<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="838.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="821" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="821" > </text>
<g id="frames">
<g >
<title>_int_free (10,101,010 samples, 0.03%)</title><rect x="808.3" y="469" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="811.29" y="479.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="133" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1089.90" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (40,404,040 samples, 0.13%)</title><rect x="293.9" y="629" width="1.5" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="296.91" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::length (10,101,010 samples, 0.03%)</title><rect x="1003.9" y="565" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="1006.88" y="575.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="1147.2" y="757" width="0.3" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="1150.17" y="767.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (202,020,200 samples, 0.64%)</title><rect x="1118.4" y="373" width="7.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1121.36" y="383.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="204.8" y="581" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="207.83" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::begin (10,101,010 samples, 0.03%)</title><rect x="780.6" y="517" width="0.4" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="783.62" y="527.5" ></text>
</g>
<g >
<title>__lru_cache_add (10,101,010 samples, 0.03%)</title><rect x="328.4" y="69" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="331.41" y="79.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::size (20,202,020 samples, 0.06%)</title><rect x="708.2" y="485" width="0.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="711.22" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_default_append (262,626,260 samples, 0.84%)</title><rect x="177.2" y="549" width="9.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="180.16" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="244.3" y="661" width="0.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="247.26" y="671.5" ></text>
</g>
<g >
<title>_cond_resched (10,101,010 samples, 0.03%)</title><rect x="39.2" y="565" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="42.19" y="575.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;unsigned int, false&gt; (20,202,020 samples, 0.06%)</title><rect x="860.2" y="533" width="0.8" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="863.22" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::base (30,303,030 samples, 0.10%)</title><rect x="61.9" y="677" width="1.2" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="64.93" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="243.5" y="677" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="246.50" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (939,393,930 samples, 2.99%)</title><rect x="138.9" y="517" width="35.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="141.88" y="527.5" >st..</text>
</g>
<g >
<title>do_syscall_64 (70,707,070 samples, 0.22%)</title><rect x="13.4" y="709" width="2.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="16.41" y="719.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.03%)</title><rect x="325.4" y="117" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="328.37" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (20,202,020 samples, 0.06%)</title><rect x="1129.7" y="293" width="0.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1132.73" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (30,303,030 samples, 0.10%)</title><rect x="1127.1" y="309" width="1.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1130.08" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (20,202,020 samples, 0.06%)</title><rect x="303.4" y="293" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="306.39" y="303.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="1104.0" y="197" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1106.95" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;int*, unsigned long&gt; (30,303,030 samples, 0.10%)</title><rect x="476.6" y="437" width="1.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="479.62" y="447.5" ></text>
</g>
<g >
<title>std::__addressof&lt;cppjieba::Word&gt; (10,101,010 samples, 0.03%)</title><rect x="911.4" y="533" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="914.39" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (414,141,410 samples, 1.32%)</title><rect x="269.3" y="677" width="15.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="272.27" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="939.4" y="565" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="942.44" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="100.6" y="629" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="103.59" y="639.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="514.5" y="501" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="517.52" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="1019.8" y="565" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1022.80" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::DictUnit&gt;::construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (70,707,070 samples, 0.22%)</title><rect x="322.3" y="325" width="2.7" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="325.34" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_get_Tp_allocator (10,101,010 samples, 0.03%)</title><rect x="478.5" y="485" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="481.51" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;unsigned int, true, false&gt;::_Node_const_iterator (20,202,020 samples, 0.06%)</title><rect x="814.0" y="469" width="0.7" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="816.98" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_lseek (20,202,020 samples, 0.06%)</title><rect x="1159.3" y="709" width="0.8" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1162.30" y="719.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="313.6" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="316.62" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, WordWeight::WEIGHT, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt; &gt; &gt;::operator[] (20,202,020 samples, 0.06%)</title><rect x="246.2" y="693" width="0.7" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="249.15" y="703.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="640.4" y="389" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="643.37" y="399.5" ></text>
</g>
<g >
<title>cppjieba::PreFilter::~PreFilter (10,101,010 samples, 0.03%)</title><rect x="906.5" y="565" width="0.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="909.47" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_get_node (10,101,010 samples, 0.03%)</title><rect x="930.3" y="565" width="0.4" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="933.35" y="575.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (10,101,010 samples, 0.03%)</title><rect x="928.1" y="517" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="931.07" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_default_append (90,909,090 samples, 0.29%)</title><rect x="369.0" y="549" width="3.4" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="371.97" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="525.9" y="485" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="528.89" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="204.1" y="597" width="0.4" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="207.08" y="607.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="1055.4" y="629" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1058.44" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="279.1" y="597" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="282.13" y="607.5" ></text>
</g>
<g >
<title>[unknown] (60,606,060 samples, 0.19%)</title><rect x="22.1" y="725" width="2.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="25.13" y="735.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="332.2" y="165" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="335.20" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="206.7" y="501" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="209.73" y="511.5" ></text>
</g>
<g >
<title>__mpn_mul_1 (10,101,010 samples, 0.03%)</title><rect x="13.0" y="725" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="16.03" y="735.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (40,404,040 samples, 0.13%)</title><rect x="489.5" y="517" width="1.5" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="492.51" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="870.8" y="485" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="873.84" y="495.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;cppjieba::WordRange*, cppjieba::WordRange*, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="835.2" y="469" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="838.20" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="958.0" y="533" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="961.02" y="543.5" ></text>
</g>
<g >
<title>handle_mm_fault (70,707,070 samples, 0.22%)</title><rect x="1155.5" y="661" width="2.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1158.51" y="671.5" ></text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (20,202,020 samples, 0.06%)</title><rect x="701.4" y="405" width="0.8" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="704.40" y="415.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;cppjieba::RuneStr&gt;::end (10,101,010 samples, 0.03%)</title><rect x="853.8" y="549" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="856.78" y="559.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1105.5" y="197" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1108.47" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="864.8" y="517" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="867.77" y="527.5" ></text>
</g>
<g >
<title>call_timer_fn (10,101,010 samples, 0.03%)</title><rect x="514.5" y="405" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="517.52" y="415.5" ></text>
</g>
<g >
<title>async_page_fault (20,202,020 samples, 0.06%)</title><rect x="1109.6" y="245" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1112.64" y="255.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, cppjieba::KeywordExtractor::Word, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::map (10,101,010 samples, 0.03%)</title><rect x="1044.1" y="629" width="0.3" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1047.06" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;unsigned int, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="864.0" y="501" width="0.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="867.01" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (20,202,020 samples, 0.06%)</title><rect x="290.1" y="677" width="0.8" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="293.12" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="161.6" y="453" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="164.62" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (30,303,030 samples, 0.10%)</title><rect x="99.8" y="645" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="102.84" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="620.7" y="405" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="623.66" y="415.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="1093.3" y="261" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1096.34" y="271.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="101" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1094.82" y="111.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (50,505,050 samples, 0.16%)</title><rect x="1086.1" y="309" width="1.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1089.14" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (10,101,010 samples, 0.03%)</title><rect x="977.3" y="453" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="980.35" y="463.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="213" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1094.82" y="223.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="329.9" y="277" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="332.92" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_ptr (30,303,030 samples, 0.10%)</title><rect x="447.4" y="357" width="1.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="450.43" y="367.5" ></text>
</g>
<g >
<title>ext4_da_write_end (181,818,180 samples, 0.58%)</title><rect x="44.5" y="565" width="6.8" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="47.49" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (272,727,270 samples, 0.87%)</title><rect x="256.4" y="645" width="10.2" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="259.39" y="655.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.03%)</title><rect x="472.8" y="437" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="475.83" y="447.5" ></text>
</g>
<g >
<title>ksys_read (60,606,060 samples, 0.19%)</title><rect x="13.8" y="677" width="2.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="16.79" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,101,010 samples, 0.03%)</title><rect x="358.0" y="309" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="360.97" y="319.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="149" width="0.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1115.67" y="159.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="372.0" y="517" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="375.00" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (242,424,240 samples, 0.77%)</title><rect x="163.9" y="485" width="9.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="166.90" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned long, unsigned long, std::allocator&lt;unsigned long&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned long&gt;, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (10,101,010 samples, 0.03%)</title><rect x="1055.1" y="693" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1058.06" y="703.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="1096.4" y="197" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1099.37" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::deallocate (20,202,020 samples, 0.06%)</title><rect x="1060.4" y="325" width="0.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1063.36" y="335.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="999.3" y="501" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1002.34" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (30,303,030 samples, 0.10%)</title><rect x="214.3" y="549" width="1.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="217.31" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (20,202,020 samples, 0.06%)</title><rect x="487.2" y="517" width="0.8" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="490.23" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;limonp::LocalVector&lt;unsigned int&gt; const*, limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt; &gt; (50,505,050 samples, 0.16%)</title><rect x="1078.6" y="309" width="1.9" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="1081.56" y="319.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="329.9" y="245" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="332.92" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_relocate (20,202,020 samples, 0.06%)</title><rect x="1042.9" y="581" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1045.93" y="591.5" ></text>
</g>
<g >
<title>cppjieba::MixSegment::Cut (14,515,151,370 samples, 46.16%)</title><rect x="367.4" y="597" width="544.8" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="370.45" y="607.5" >cppjieba::MixSegment::Cut</text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate (30,303,030 samples, 0.10%)</title><rect x="472.1" y="469" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="475.07" y="479.5" ></text>
</g>
<g >
<title>do_page_fault (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="197" width="0.7" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1115.67" y="207.5" ></text>
</g>
<g >
<title>current_time (10,101,010 samples, 0.03%)</title><rect x="36.9" y="581" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="39.91" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (10,101,010 samples, 0.03%)</title><rect x="1127.8" y="277" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1130.83" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="314.4" y="325" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="317.38" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (777,777,770 samples, 2.47%)</title><rect x="432.6" y="437" width="29.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="435.65" y="447.5" >st..</text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long&gt; (70,707,070 samples, 0.22%)</title><rect x="369.0" y="517" width="2.6" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="371.97" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;cppjieba::Dag const*, cppjieba::Dag*, cppjieba::Dag&gt; (10,101,010 samples, 0.03%)</title><rect x="704.4" y="453" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="707.43" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_node_allocator (10,101,010 samples, 0.03%)</title><rect x="1130.9" y="309" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1133.87" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::construct&lt;limonp::LocalVector&lt;unsigned int&gt;, limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="311.3" y="341" width="0.8" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="314.35" y="351.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::end (101,010,100 samples, 0.32%)</title><rect x="861.0" y="533" width="3.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="863.98" y="543.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (10,101,010 samples, 0.03%)</title><rect x="335.6" y="213" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="338.61" y="223.5" ></text>
</g>
<g >
<title>std::operator==&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="753.3" y="517" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="756.33" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;SplitChinese&gt;::construct&lt;SplitChinese, char const  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="613" width="64.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1065.26" y="623.5" >__gnu_c..</text>
</g>
<g >
<title>cppjieba::PreFilter::Next (303,030,300 samples, 0.96%)</title><rect x="204.5" y="613" width="11.3" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="207.46" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;unsigned int&gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="881.1" y="389" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="884.07" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,202,020 samples, 0.06%)</title><rect x="1158.2" y="757" width="0.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1161.16" y="767.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::begin (10,101,010 samples, 0.03%)</title><rect x="298.8" y="309" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="301.84" y="319.5" ></text>
</g>
<g >
<title>__do_munmap (10,101,010 samples, 0.03%)</title><rect x="325.4" y="213" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="328.37" y="223.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.03%)</title><rect x="206.7" y="437" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="209.73" y="447.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;cppjieba::RuneStr&gt;::end (10,101,010 samples, 0.03%)</title><rect x="204.5" y="597" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="207.46" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (50,505,050 samples, 0.16%)</title><rect x="270.8" y="645" width="1.9" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="273.79" y="655.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10,101,010 samples, 0.03%)</title><rect x="324.2" y="133" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="327.24" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__pred_iter&lt;int  (10,101,010 samples, 0.03%)</title><rect x="92.3" y="661" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="95.26" y="671.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (10,101,010 samples, 0.03%)</title><rect x="21.8" y="741" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="24.75" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="331.1" y="101" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="334.06" y="111.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (90,909,090 samples, 0.29%)</title><rect x="1089.2" y="261" width="3.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1092.17" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="489.9" y="453" width="0.4" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="492.88" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::WordRange*&gt; (10,101,010 samples, 0.03%)</title><rect x="848.1" y="517" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="851.09" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, false, true&gt;::_Node_const_iterator (10,101,010 samples, 0.03%)</title><rect x="983.8" y="581" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="986.79" y="591.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::capacity (10,101,010 samples, 0.03%)</title><rect x="337.9" y="197" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="340.88" y="207.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="369.3" y="485" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="372.34" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;unsigned long&gt;, unsigned long&gt;::_S_select_on_copy (10,101,010 samples, 0.03%)</title><rect x="1026.6" y="533" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1029.63" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="251.5" y="693" width="0.3" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="254.46" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_allocate (30,303,030 samples, 0.10%)</title><rect x="481.2" y="469" width="1.1" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="484.17" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_construct_node&lt;std::pair&lt;int, double&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="82.8" y="629" width="0.4" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="85.78" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (50,505,050 samples, 0.16%)</title><rect x="358.4" y="341" width="1.8" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="361.35" y="351.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="803.7" y="517" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="806.74" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="934.1" y="517" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="937.14" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (101,010,100 samples, 0.32%)</title><rect x="1118.7" y="325" width="3.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1121.74" y="335.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (30,303,030 samples, 0.10%)</title><rect x="1050.1" y="629" width="1.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1053.13" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;JiebaSplitCn, std::allocator&lt;JiebaSplitCn&gt;,  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="501" width="64.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1065.26" y="511.5" >std::_S..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="941.3" y="581" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="944.34" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::push_back (181,818,180 samples, 0.58%)</title><rect x="1085.8" y="357" width="6.8" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1088.76" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="308.3" y="261" width="0.4" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="311.32" y="271.5" ></text>
</g>
<g >
<title>SimHashWebPage::SimHashWebPage (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="581" width="66.0" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="299.95" y="591.5" >SimHash..</text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="288.6" y="709" width="0.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="291.61" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;unsigned int, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="891.7" y="469" width="0.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="894.68" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="661" width="64.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1065.26" y="671.5" >std::__..</text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_const_iterator (20,202,020 samples, 0.06%)</title><rect x="187.0" y="581" width="0.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="190.02" y="591.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="318.2" y="277" width="0.4" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="321.17" y="287.5" ></text>
</g>
<g >
<title>uhci_hub_status_data (10,101,010 samples, 0.03%)</title><rect x="514.5" y="357" width="0.4" height="15.0" fill="rgb(250,211,50)" rx="2" ry="2" />
<text  x="517.52" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;double*&gt; (10,101,010 samples, 0.03%)</title><rect x="471.3" y="469" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="474.31" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1036.9" y="565" width="0.3" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1039.86" y="575.5" ></text>
</g>
<g >
<title>std::IsIn&lt;unsigned int, std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="826.1" y="533" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="829.11" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="221.1" y="549" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="224.13" y="559.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="245" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1089.52" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="395.5" y="501" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="398.50" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1116.5" y="357" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1119.46" y="367.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="295.4" y="485" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.43" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="360.2" y="325" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="363.25" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.16%)</title><rect x="305.7" y="245" width="1.9" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="308.66" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (10,101,010 samples, 0.03%)</title><rect x="290.9" y="709" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="293.88" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::_M_range_initialize&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (60,606,060 samples, 0.19%)</title><rect x="347.7" y="341" width="2.3" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="350.74" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*, cppjieba::DictUnit&gt; (60,606,060 samples, 0.19%)</title><rect x="347.7" y="325" width="2.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="350.74" y="335.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.03%)</title><rect x="346.2" y="69" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="349.22" y="79.5" ></text>
</g>
<g >
<title>cppjieba::Trie::InsertNode (292,929,290 samples, 0.93%)</title><rect x="298.5" y="325" width="11.0" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="301.46" y="335.5" ></text>
</g>
<g >
<title>cppjieba::RuneStrLite::RuneStrLite (30,303,030 samples, 0.10%)</title><rect x="366.3" y="581" width="1.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="369.31" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (10,101,010 samples, 0.03%)</title><rect x="97.2" y="677" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="100.18" y="687.5" ></text>
</g>
<g >
<title>std::__find_if&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_negate&lt;int  (30,303,030 samples, 0.10%)</title><rect x="96.0" y="645" width="1.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="99.05" y="655.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="338.6" y="165" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="341.64" y="175.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="165" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1089.52" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (141,414,140 samples, 0.45%)</title><rect x="304.1" y="293" width="5.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="307.15" y="303.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.03%)</title><rect x="1089.9" y="69" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1092.93" y="79.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="1092.2" y="245" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1095.20" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_erase_at_end (20,202,020 samples, 0.06%)</title><rect x="828.0" y="533" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="831.00" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt; &gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="931.1" y="565" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="934.11" y="575.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (90,909,090 samples, 0.29%)</title><rect x="1176.4" y="741" width="3.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1179.35" y="751.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="983.8" y="613" width="0.4" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="986.79" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;cppjieba::Dag*, unsigned long&gt; (575,757,570 samples, 1.83%)</title><rect x="682.1" y="453" width="21.6" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="685.07" y="463.5" >s..</text>
</g>
<g >
<title>munmap (10,101,010 samples, 0.03%)</title><rect x="350.4" y="293" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="353.39" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="285.2" y="709" width="0.8" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="288.19" y="719.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;WordWeight::WEIGHT&gt; &gt; &gt;::construct&lt;WordWeight::WEIGHT, WordWeight::WEIGHT&gt; (10,101,010 samples, 0.03%)</title><rect x="243.1" y="645" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="246.12" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;simhash::Simhasher&gt;::destroy&lt;simhash::Simhasher&gt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="485" width="5.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1058.81" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned int&gt;, true&gt;::_S_cget (20,202,020 samples, 0.06%)</title><rect x="887.9" y="437" width="0.8" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="890.89" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_drop_node (20,202,020 samples, 0.06%)</title><rect x="978.1" y="501" width="0.8" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="981.11" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_v (30,303,030 samples, 0.10%)</title><rect x="451.2" y="389" width="1.2" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="454.22" y="399.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="482.3" y="469" width="0.8" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="485.30" y="479.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="332.6" y="101" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="335.58" y="111.5" ></text>
</g>
<g >
<title>do_user_addr_fault (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="149" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1092.55" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="116.1" y="661" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="119.14" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1130.5" y="389" width="0.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1133.49" y="399.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="334.9" y="149" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="337.85" y="159.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="69" width="0.3" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1094.07" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="1018.3" y="533" width="0.4" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1021.29" y="543.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::operator= (10,101,010 samples, 0.03%)</title><rect x="981.1" y="533" width="0.4" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="984.14" y="543.5" ></text>
</g>
<g >
<title>unmap_region (10,101,010 samples, 0.03%)</title><rect x="350.4" y="197" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="353.39" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="1073.6" y="245" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1076.63" y="255.5" ></text>
</g>
<g >
<title>std::forward&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="319.3" y="293" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="322.31" y="303.5" ></text>
</g>
<g >
<title>rcu_core (10,101,010 samples, 0.03%)</title><rect x="249.2" y="565" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="252.18" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::vector (60,606,060 samples, 0.19%)</title><rect x="1108.5" y="357" width="2.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1111.50" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="339.4" y="277" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="342.40" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::KeywordExtractor::Word&gt;::construct&lt;cppjieba::KeywordExtractor::Word, cppjieba::KeywordExtractor::Word const&amp;&gt; (242,424,240 samples, 0.77%)</title><rect x="1022.8" y="581" width="9.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1025.84" y="591.5" ></text>
</g>
<g >
<title>cppjieba::HMMSegment::Cut (10,101,010 samples, 0.03%)</title><rect x="396.6" y="565" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="399.64" y="575.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="331.1" y="181" width="0.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="191.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;cppjieba::Dag const*, cppjieba::Dag*&gt; (10,101,010 samples, 0.03%)</title><rect x="704.4" y="437" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="707.43" y="447.5" ></text>
</g>
<g >
<title>cppjieba::HMMModel::LoadEmitProb (30,303,030 samples, 0.10%)</title><rect x="1114.6" y="373" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1117.57" y="383.5" ></text>
</g>
<g >
<title>simhash::Simhasher::Simhasher (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="437" width="66.0" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="299.95" y="447.5" >simhash..</text>
</g>
<g >
<title>cppjieba::DecodeRuneInString (20,202,020 samples, 0.06%)</title><rect x="216.6" y="565" width="0.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="219.59" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;SplitChinese&gt;::destroy&lt;SplitChinese&gt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="629" width="5.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1129.70" y="639.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="181" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1127.04" y="191.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1098.6" y="213" width="1.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1101.65" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="85.1" y="645" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="88.05" y="655.5" ></text>
</g>
<g >
<title>xas_start (10,101,010 samples, 0.03%)</title><rect x="15.7" y="533" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="18.69" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::WordRange&gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="833.7" y="517" width="0.7" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="836.69" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="197" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1089.52" y="207.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (50,505,050 samples, 0.16%)</title><rect x="1094.9" y="213" width="1.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="514.5" y="485" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="517.52" y="495.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="345.8" y="165" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="348.84" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_erase (90,909,090 samples, 0.29%)</title><rect x="977.3" y="565" width="3.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="980.35" y="575.5" ></text>
</g>
<g >
<title>do_page_fault (30,303,030 samples, 0.10%)</title><rect x="1078.6" y="181" width="1.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1081.56" y="191.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.06%)</title><rect x="267.4" y="629" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="270.38" y="639.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, char const*, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (90,909,090 samples, 0.29%)</title><rect x="1051.6" y="661" width="3.5" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1054.64" y="671.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="940.6" y="581" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="943.58" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (90,909,090 samples, 0.29%)</title><rect x="354.9" y="325" width="3.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="357.94" y="335.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, cppjieba::TrieNode*&gt; (20,202,020 samples, 0.06%)</title><rect x="165.8" y="453" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="168.79" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (70,707,070 samples, 0.22%)</title><rect x="636.2" y="405" width="2.7" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="639.20" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="815.1" y="485" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="818.11" y="495.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.03%)</title><rect x="295.4" y="405" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="298.43" y="415.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (10,101,010 samples, 0.03%)</title><rect x="1156.6" y="613" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1159.64" y="623.5" ></text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="349.3" y="133" width="0.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="352.25" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="1128.6" y="325" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1131.59" y="335.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (30,303,030 samples, 0.10%)</title><rect x="1105.8" y="261" width="1.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1108.85" y="271.5" ></text>
</g>
<g >
<title>std::operator!=&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt; (141,414,140 samples, 0.45%)</title><rect x="748.0" y="517" width="5.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="751.02" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (30,303,030 samples, 0.10%)</title><rect x="833.7" y="533" width="1.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="836.69" y="543.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (50,505,050 samples, 0.16%)</title><rect x="112.7" y="613" width="1.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="115.72" y="623.5" ></text>
</g>
<g >
<title>__libc_malloc (131,313,130 samples, 0.42%)</title><rect x="53.2" y="757" width="4.9" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="56.21" y="767.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="1104.3" y="197" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1107.33" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (10,101,010 samples, 0.03%)</title><rect x="1071.0" y="197" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1073.98" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_drop_node (10,101,010 samples, 0.03%)</title><rect x="977.7" y="517" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="980.73" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (40,404,040 samples, 0.13%)</title><rect x="99.5" y="661" width="1.5" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="102.46" y="671.5" ></text>
</g>
<g >
<title>do_page_fault (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="181" width="1.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1092.55" y="191.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, WordWeight::IDF, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="1132.4" y="725" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="1135.38" y="735.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;SimHashWebPage, std::allocator&lt;SimHashWebPage&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="693" width="66.0" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="299.95" y="703.5" >std::al..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,101,010 samples, 0.03%)</title><rect x="1057.3" y="277" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1060.33" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="1129.7" y="261" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1132.73" y="271.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (40,404,040 samples, 0.13%)</title><rect x="334.1" y="229" width="1.5" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="337.09" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, false&gt; &gt;::destroy&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="293.9" y="597" width="1.5" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="296.91" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="223.4" y="629" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="226.41" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="871.2" y="501" width="0.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="874.21" y="511.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::find (212,121,210 samples, 0.67%)</title><rect x="228.0" y="693" width="7.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="230.96" y="703.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (80,808,080 samples, 0.26%)</title><rect x="1089.2" y="245" width="3.0" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1092.17" y="255.5" ></text>
</g>
<g >
<title>cppjieba::GetStringsFromWords (131,313,130 samples, 0.42%)</title><rect x="367.4" y="581" width="5.0" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="370.45" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (80,808,080 samples, 0.26%)</title><rect x="1019.4" y="581" width="3.1" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1022.42" y="591.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;unsigned long, unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="1042.9" y="533" width="0.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="1045.93" y="543.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit&gt; (20,202,020 samples, 0.06%)</title><rect x="1113.4" y="293" width="0.8" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1116.43" y="303.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (191,919,190 samples, 0.61%)</title><rect x="965.6" y="549" width="7.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="968.60" y="559.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned int const, double&gt;::pair&lt;unsigned int const&amp;, 0ul&gt; (10,101,010 samples, 0.03%)</title><rect x="1115.3" y="261" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1118.33" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_insert_node (10,101,010 samples, 0.03%)</title><rect x="936.8" y="581" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="939.79" y="591.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (30,303,030 samples, 0.10%)</title><rect x="63.4" y="693" width="1.2" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="66.45" y="703.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (10,101,010 samples, 0.03%)</title><rect x="928.1" y="501" width="0.4" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="931.07" y="511.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (20,202,020 samples, 0.06%)</title><rect x="332.2" y="149" width="0.8" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="335.20" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="934.5" y="549" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="937.52" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="174.5" y="533" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="177.51" y="543.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (30,303,030 samples, 0.10%)</title><rect x="326.9" y="229" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="329.89" y="239.5" ></text>
</g>
<g >
<title>__do_page_fault (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="197" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1111.50" y="207.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="327.3" y="213" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="330.27" y="223.5" ></text>
</g>
<g >
<title>cppjieba::Trie::Trie (313,131,310 samples, 1.00%)</title><rect x="1064.2" y="357" width="11.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1067.15" y="367.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (10,101,010 samples, 0.03%)</title><rect x="199.1" y="565" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="202.15" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_negate&lt;int  (30,303,030 samples, 0.10%)</title><rect x="94.5" y="629" width="1.2" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="97.53" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_S_relocate (10,101,010 samples, 0.03%)</title><rect x="197.3" y="565" width="0.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="200.25" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (151,515,150 samples, 0.48%)</title><rect x="465.6" y="501" width="5.7" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="468.62" y="511.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, true&gt; (10,101,010 samples, 0.03%)</title><rect x="252.2" y="693" width="0.4" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="255.22" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::max_size (40,404,040 samples, 0.13%)</title><rect x="706.7" y="469" width="1.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="709.70" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (70,707,070 samples, 0.22%)</title><rect x="253.4" y="645" width="2.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="256.35" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (20,202,020 samples, 0.06%)</title><rect x="823.5" y="469" width="0.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="826.45" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (10,101,010 samples, 0.03%)</title><rect x="1127.8" y="261" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1130.83" y="271.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1116.8" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1119.84" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="304.9" y="245" width="0.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="307.91" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="210.1" y="469" width="0.4" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="213.14" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (565,656,560 samples, 1.80%)</title><rect x="608.9" y="421" width="21.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="611.91" y="431.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (20,202,020 samples, 0.06%)</title><rect x="233.3" y="597" width="0.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="236.26" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="100.2" y="629" width="0.4" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="103.22" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::begin (10,101,010 samples, 0.03%)</title><rect x="1126.7" y="309" width="0.4" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="1129.70" y="319.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="1156.3" y="581" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1159.26" y="591.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;cppjieba::RuneStr&gt;::end (40,404,040 samples, 0.13%)</title><rect x="857.2" y="549" width="1.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="860.19" y="559.5" ></text>
</g>
<g >
<title>tinyxml2::XMLUtil::IsUTF8Continuation (10,101,010 samples, 0.03%)</title><rect x="65.3" y="485" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="68.34" y="495.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, cppjieba::KeywordExtractor::Word, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::end (30,303,030 samples, 0.10%)</title><rect x="917.1" y="613" width="1.1" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="920.08" y="623.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="841.3" y="517" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="844.27" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;::~_List_base (40,404,040 samples, 0.13%)</title><rect x="293.9" y="549" width="1.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="296.91" y="559.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;cppjieba::Dag const*, cppjieba::Dag*&gt; (10,101,010 samples, 0.03%)</title><rect x="185.1" y="501" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="188.12" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (121,212,120 samples, 0.39%)</title><rect x="1046.7" y="645" width="4.6" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1049.72" y="655.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_pad (90,909,090 samples, 0.29%)</title><rect x="1176.4" y="757" width="3.4" height="15.0" fill="rgb(227,103,24)" rx="2" ry="2" />
<text  x="1179.35" y="767.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="342.1" y="309" width="2.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="345.05" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="1068.7" y="229" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1071.70" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,101,010 samples, 0.03%)</title><rect x="293.2" y="485" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="296.15" y="495.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::CalcFreqSum (20,202,020 samples, 0.06%)</title><rect x="297.3" y="373" width="0.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="300.32" y="383.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (10,101,010 samples, 0.03%)</title><rect x="37.3" y="581" width="0.4" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="40.29" y="591.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (80,808,080 samples, 0.26%)</title><rect x="47.9" y="517" width="3.0" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="50.91" y="527.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (50,505,050 samples, 0.16%)</title><rect x="1108.5" y="277" width="1.9" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1111.50" y="287.5" ></text>
</g>
<g >
<title>main (28,646,464,360 samples, 91.10%)</title><rect x="58.1" y="741" width="1075.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="61.14" y="751.5" >main</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,101,010 samples, 0.03%)</title><rect x="475.5" y="469" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="478.48" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (181,818,180 samples, 0.58%)</title><rect x="444.0" y="421" width="6.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="447.02" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1127.8" y="293" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1130.83" y="303.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.03%)</title><rect x="906.5" y="549" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="909.47" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (30,303,030 samples, 0.10%)</title><rect x="235.9" y="677" width="1.2" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="238.92" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int, double&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="80.5" y="661" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="83.50" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (121,212,120 samples, 0.39%)</title><rect x="277.2" y="661" width="4.6" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="280.23" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_default_append (181,818,180 samples, 0.58%)</title><rect x="479.3" y="485" width="6.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="482.27" y="495.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="1068.7" y="213" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1071.70" y="223.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::Find (1,787,878,770 samples, 5.69%)</title><rect x="121.4" y="597" width="67.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="124.44" y="607.5" >cppjieb..</text>
</g>
<g >
<title>std::shared_ptr&lt;simhash::Simhasher&gt;::~shared_ptr (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="581" width="5.3" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="1058.81" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="300.4" y="245" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="303.36" y="255.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="181" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1094.82" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::clear (10,101,010 samples, 0.03%)</title><rect x="318.2" y="341" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="321.17" y="351.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="197" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1127.04" y="207.5" ></text>
</g>
<g >
<title>all (31,444,444,130 samples, 100%)</title><rect x="10.0" y="789" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="799.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (50,505,050 samples, 0.16%)</title><rect x="820.4" y="453" width="1.9" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="823.42" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_valptr (20,202,020 samples, 0.06%)</title><rect x="418.6" y="469" width="0.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="421.62" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="137.7" y="533" width="0.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="140.74" y="543.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&gt; (10,101,010 samples, 0.03%)</title><rect x="219.6" y="533" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="222.62" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::push_back (252,525,250 samples, 0.80%)</title><rect x="387.2" y="549" width="9.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="390.16" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned long, unsigned long, std::__detail::_Identity, std::hash&lt;unsigned long&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="1055.1" y="677" width="0.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1058.06" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="360.6" y="309" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="363.63" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;unsigned int&gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="881.1" y="405" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="884.07" y="415.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.03%)</title><rect x="514.5" y="341" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="517.52" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="486.5" y="501" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="489.47" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt;::construct&lt;cppjieba::KeywordExtractor::Word, cppjieba::KeywordExtractor::Word const&amp;&gt; (242,424,240 samples, 0.77%)</title><rect x="1022.8" y="597" width="9.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1025.84" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (10,101,010 samples, 0.03%)</title><rect x="812.1" y="501" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="815.08" y="511.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::~num_put (30,303,030 samples, 0.10%)</title><rect x="24.4" y="741" width="1.1" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="27.40" y="751.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (10,101,010 samples, 0.03%)</title><rect x="350.4" y="117" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="353.39" y="127.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="837.9" y="501" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="840.86" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="1064.2" y="293" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1067.15" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_construct_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (252,525,250 samples, 0.80%)</title><rect x="920.9" y="565" width="9.4" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="923.87" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (20,202,020 samples, 0.06%)</title><rect x="1127.1" y="293" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1130.08" y="303.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (40,404,040 samples, 0.13%)</title><rect x="1107.0" y="261" width="1.5" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1109.99" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (10,101,010 samples, 0.03%)</title><rect x="291.3" y="517" width="0.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="294.26" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="675.6" y="485" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="678.62" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (40,404,040 samples, 0.13%)</title><rect x="262.1" y="597" width="1.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="265.07" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (10,101,010 samples, 0.03%)</title><rect x="927.3" y="485" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="930.31" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_erase (40,404,040 samples, 0.13%)</title><rect x="978.1" y="517" width="1.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="981.11" y="527.5" ></text>
</g>
<g >
<title>cppjieba::GetStringsFromWords (20,202,020 samples, 0.06%)</title><rect x="219.2" y="629" width="0.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="222.24" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (60,606,060 samples, 0.19%)</title><rect x="1020.2" y="565" width="2.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1023.18" y="575.5" ></text>
</g>
<g >
<title>std::__heap_select&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="980.8" y="581" width="2.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="983.76" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt;::construct&lt;limonp::LocalVector&lt;unsigned int&gt;, limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="311.3" y="325" width="0.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="314.35" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (20,202,020 samples, 0.06%)</title><rect x="488.7" y="517" width="0.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="491.75" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (40,404,040 samples, 0.13%)</title><rect x="449.3" y="389" width="1.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="452.33" y="399.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (20,202,020 samples, 0.06%)</title><rect x="1107.0" y="245" width="0.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1109.99" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_addr (30,303,030 samples, 0.10%)</title><rect x="447.4" y="341" width="1.2" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="450.43" y="351.5" ></text>
</g>
<g >
<title>cppjieba::Word::Word (141,414,140 samples, 0.45%)</title><rect x="379.2" y="533" width="5.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="382.20" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="293" width="0.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1090.65" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="1122.9" y="293" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1125.91" y="303.5" ></text>
</g>
<g >
<title>cppjieba::Jieba::Jieba (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="421" width="66.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="299.95" y="431.5" >cppjieb..</text>
</g>
<g >
<title>unmap_vmas (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="645" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1161.54" y="655.5" ></text>
</g>
<g >
<title>WebPage::rinse (131,313,130 samples, 0.42%)</title><rect x="58.1" y="709" width="5.0" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="61.14" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="243.5" y="645" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="246.50" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::Dag&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="196.9" y="549" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="199.87" y="559.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="238.6" y="645" width="0.3" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="241.57" y="655.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1104.0" y="165" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1106.95" y="175.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::CalcFreqSum (20,202,020 samples, 0.06%)</title><rect x="1063.4" y="373" width="0.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1066.40" y="383.5" ></text>
</g>
<g >
<title>cppjieba::HMMSegment::Cut (2,404,040,380 samples, 7.65%)</title><rect x="404.6" y="549" width="90.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="407.60" y="559.5" >cppjieba::..</text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="519.5" y="501" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="522.45" y="511.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, cppjieba::KeywordExtractor::Word, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::operator[] (1,565,656,550 samples, 4.98%)</title><rect x="918.6" y="613" width="58.7" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="921.60" y="623.5" >std::m..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="352.7" y="325" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="355.67" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (50,505,050 samples, 0.16%)</title><rect x="1120.6" y="293" width="1.9" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1123.63" y="303.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.03%)</title><rect x="1131.2" y="293" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1134.25" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::resize (808,080,800 samples, 2.57%)</title><rect x="678.7" y="501" width="30.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="681.65" y="511.5" >st..</text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="101" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1094.07" y="111.5" ></text>
</g>
<g >
<title>cppjieba::MPSegment::Cut (8,393,939,310 samples, 26.69%)</title><rect x="494.8" y="549" width="315.0" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="497.81" y="559.5" >cppjieba::MPSegment::Cut</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="164.3" y="453" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="167.28" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="346.6" y="277" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="349.60" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (20,202,020 samples, 0.06%)</title><rect x="622.6" y="373" width="0.7" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="625.55" y="383.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::~_Rb_tree (30,303,030 samples, 0.10%)</title><rect x="295.4" y="565" width="1.2" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="298.43" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, WordWeight::IDF, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="249.6" y="693" width="0.3" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="252.56" y="703.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.03%)</title><rect x="391.3" y="357" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="394.33" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;limonp::LocalVector&lt;unsigned int&gt; const*, limonp::LocalVector&lt;unsigned int&gt;*&gt; (50,505,050 samples, 0.16%)</title><rect x="312.5" y="277" width="1.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="315.49" y="287.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (30,303,030 samples, 0.10%)</title><rect x="1029.3" y="485" width="1.1" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1032.28" y="495.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="277" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1089.52" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (20,202,020 samples, 0.06%)</title><rect x="1127.1" y="277" width="0.7" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1130.08" y="287.5" ></text>
</g>
<g >
<title>std::all_of&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, int  (171,717,170 samples, 0.55%)</title><rect x="90.7" y="693" width="6.5" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="93.74" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::operator[] (30,303,030 samples, 0.10%)</title><rect x="193.8" y="597" width="1.2" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="196.84" y="607.5" ></text>
</g>
<g >
<title>std::operator&lt;&lt; &lt;char&gt; (90,909,090 samples, 0.29%)</title><rect x="1051.6" y="709" width="3.5" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1054.64" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="268.9" y="629" width="0.4" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="271.89" y="639.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::Word&gt; (10,101,010 samples, 0.03%)</title><rect x="391.7" y="485" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="394.71" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_S_check_init_len (20,202,020 samples, 0.06%)</title><rect x="470.6" y="485" width="0.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="473.55" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;cppjieba::Dag const*, cppjieba::Dag*, cppjieba::Dag&gt; (10,101,010 samples, 0.03%)</title><rect x="681.7" y="469" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="684.69" y="479.5" ></text>
</g>
<g >
<title>cppjieba::PreFilter::PreFilter (232,323,230 samples, 0.74%)</title><rect x="897.7" y="565" width="8.8" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="900.75" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="351.2" y="341" width="0.3" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="354.15" y="351.5" ></text>
</g>
<g >
<title>cppjieba::MPSegment::IsUserDictSingleChineseWord (444,444,440 samples, 1.41%)</title><rect x="809.8" y="549" width="16.7" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="812.81" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="278.4" y="597" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="281.37" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="675.2" y="469" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="678.24" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_addr (60,606,060 samples, 0.19%)</title><rect x="960.7" y="501" width="2.2" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="963.67" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="284.1" y="645" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="287.06" y="655.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (222,222,220 samples, 0.71%)</title><rect x="897.7" y="533" width="8.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="900.75" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (80,808,080 samples, 0.26%)</title><rect x="278.8" y="645" width="3.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="281.75" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::Word*&gt; (20,202,020 samples, 0.06%)</title><rect x="910.6" y="533" width="0.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="913.64" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_Vector_impl::~_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="852.6" y="517" width="0.4" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="855.64" y="527.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;unsigned int, false&gt; (10,101,010 samples, 0.03%)</title><rect x="896.2" y="549" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="899.23" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 0.06%)</title><rect x="101.4" y="645" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="104.35" y="655.5" ></text>
</g>
<g >
<title>unmap_region (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="629" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1064.12" y="639.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::init_ (50,505,050 samples, 0.16%)</title><rect x="182.5" y="437" width="1.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="185.47" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::~_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="983.0" y="453" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="986.04" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="233.3" y="581" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="236.26" y="591.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="937.2" y="565" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="940.17" y="575.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="117" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1090.65" y="127.5" ></text>
</g>
<g >
<title>__fdget_pos (10,101,010 samples, 0.03%)</title><rect x="35.0" y="661" width="0.4" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="38.02" y="671.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;JiebaSplitCn, std::allocator&lt;JiebaSplitCn&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="565" width="64.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1065.26" y="575.5" >std::al..</text>
</g>
<g >
<title>std::__shared_count&lt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="549" width="5.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1058.81" y="559.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (80,808,080 samples, 0.26%)</title><rect x="969.8" y="533" width="3.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="972.77" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;double*, unsigned long, double&gt; (40,404,040 samples, 0.13%)</title><rect x="469.0" y="469" width="1.6" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="472.04" y="479.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="309.1" y="229" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="312.07" y="239.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_destroy_node (10,101,010 samples, 0.03%)</title><rect x="977.3" y="533" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="980.35" y="543.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&gt;::pair&lt;std::_Rb_tree_node_base*&amp;, std::_Rb_tree_node_base*&amp;, true&gt; (10,101,010 samples, 0.03%)</title><rect x="936.4" y="565" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="939.41" y="575.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.03%)</title><rect x="1127.1" y="229" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1130.08" y="239.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.03%)</title><rect x="1039.1" y="549" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1042.14" y="559.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;simhash::Simhasher,  (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="517" width="66.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="299.95" y="527.5" >std::__..</text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::push_back (20,202,020 samples, 0.06%)</title><rect x="1044.4" y="629" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1047.44" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (40,404,040 samples, 0.13%)</title><rect x="293.9" y="645" width="1.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="296.91" y="655.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Extract (18,171,716,990 samples, 57.79%)</title><rect x="363.3" y="645" width="681.9" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="366.28" y="655.5" >cppjieba::KeywordExtractor::Extract</text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::emplace_back&lt;cppjieba::Word&gt; (252,525,250 samples, 0.80%)</title><rect x="387.2" y="533" width="9.4" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="390.16" y="543.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.03%)</title><rect x="227.6" y="629" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="230.58" y="639.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="1097.1" y="181" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1100.13" y="191.5" ></text>
</g>
<g >
<title>ksys_write (474,747,470 samples, 1.51%)</title><rect x="34.6" y="677" width="17.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="37.64" y="687.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="326.5" y="197" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="329.51" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (50,505,050 samples, 0.16%)</title><rect x="639.2" y="405" width="1.9" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="642.23" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="165" width="0.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1115.67" y="175.5" ></text>
</g>
<g >
<title>tinyxml2::XMLDocument::LoadFile (101,010,100 samples, 0.32%)</title><rect x="65.3" y="709" width="3.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="68.34" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="351.2" y="325" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="354.15" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::~new_allocator (10,101,010 samples, 0.03%)</title><rect x="983.0" y="421" width="0.4" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="986.04" y="431.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::size (80,808,080 samples, 0.26%)</title><rect x="742.3" y="501" width="3.1" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="745.34" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (101,010,100 samples, 0.32%)</title><rect x="866.7" y="469" width="3.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="869.67" y="479.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="1103.2" y="245" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1106.20" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,101,010 samples, 0.03%)</title><rect x="926.6" y="421" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="929.56" y="431.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="249.2" y="645" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="252.18" y="655.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="1098.6" y="197" width="1.2" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1101.65" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_addr (30,303,030 samples, 0.10%)</title><rect x="958.8" y="517" width="1.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="961.78" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt; (70,707,070 samples, 0.22%)</title><rect x="291.3" y="613" width="2.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="294.26" y="623.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned int const, cppjieba::TrieNode*&gt; (20,202,020 samples, 0.06%)</title><rect x="629.0" y="373" width="0.8" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="632.00" y="383.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned int&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="887.5" y="437" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="890.51" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="325.4" y="325" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="328.37" y="335.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_get_Tp_allocator (10,101,010 samples, 0.03%)</title><rect x="982.7" y="469" width="0.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="985.66" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="336.7" y="277" width="2.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="339.75" y="287.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="613" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1064.12" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="1014.5" y="517" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1017.50" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;::_M_clear (40,404,040 samples, 0.13%)</title><rect x="293.9" y="533" width="1.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="296.91" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="620.7" y="389" width="0.3" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="623.66" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="85.8" y="629" width="0.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="88.81" y="639.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="1105.5" y="181" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1108.47" y="191.5" ></text>
</g>
<g >
<title>operator delete (10,101,010 samples, 0.03%)</title><rect x="808.7" y="469" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="811.67" y="479.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;limonp::LocalVector&lt;unsigned int&gt; const*, limonp::LocalVector&lt;unsigned int&gt;*&gt; (50,505,050 samples, 0.16%)</title><rect x="312.5" y="293" width="1.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="315.49" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::max_size (20,202,020 samples, 0.06%)</title><rect x="1041.8" y="565" width="0.7" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1044.79" y="575.5" ></text>
</g>
<g >
<title>std::_List_node&lt;WordWeight::WEIGHT&gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="242.7" y="645" width="0.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="245.74" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1125.6" y="341" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1128.56" y="351.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1087.3" y="261" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1090.28" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="1124.4" y="293" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1127.42" y="303.5" ></text>
</g>
<g >
<title>start_this_handle (40,404,040 samples, 0.13%)</title><rect x="41.5" y="517" width="1.5" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="44.46" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="371.2" y="485" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="374.24" y="495.5" ></text>
</g>
<g >
<title>SimHashWebPage::~SimHashWebPage (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="597" width="5.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1058.81" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;::~list (40,404,040 samples, 0.13%)</title><rect x="293.9" y="565" width="1.5" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="296.91" y="575.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;SplitChinese, std::allocator&lt;SplitChinese&gt;, char const  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="709" width="64.0" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="1065.26" y="719.5" >std::al..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_Alloc_node::operator (10,101,010 samples, 0.03%)</title><rect x="82.8" y="661" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="85.78" y="671.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned long&gt;::~allocator (10,101,010 samples, 0.03%)</title><rect x="1034.2" y="453" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1037.21" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="295.4" y="421" width="0.4" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="298.43" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="1065.3" y="245" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1068.29" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (30,303,030 samples, 0.10%)</title><rect x="199.9" y="597" width="1.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="202.91" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (20,202,020 samples, 0.06%)</title><rect x="529.3" y="453" width="0.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="532.31" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (50,505,050 samples, 0.16%)</title><rect x="925.0" y="469" width="1.9" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="928.04" y="479.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.03%)</title><rect x="45.6" y="485" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="48.63" y="495.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (20,202,020 samples, 0.06%)</title><rect x="348.1" y="245" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="351.12" y="255.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="277" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1090.65" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="219.2" y="565" width="0.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="222.24" y="575.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::reverse_iterator (20,202,020 samples, 0.06%)</title><rect x="771.1" y="501" width="0.8" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="774.14" y="511.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;SimHashWebPage&gt;::~shared_ptr (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="709" width="5.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1058.81" y="719.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1107.7" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1110.74" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_create_storage (40,404,040 samples, 0.13%)</title><rect x="466.4" y="469" width="1.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="469.38" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::Word&gt; (10,101,010 samples, 0.03%)</title><rect x="392.5" y="517" width="0.3" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="395.47" y="527.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="245" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1089.90" y="255.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="334.9" y="133" width="0.3" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="337.85" y="143.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::~unordered_map (30,303,030 samples, 0.10%)</title><rect x="1127.1" y="325" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1130.08" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned int&gt;::operator (20,202,020 samples, 0.06%)</title><rect x="674.5" y="453" width="0.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="677.48" y="463.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (60,606,060 samples, 0.19%)</title><rect x="1102.4" y="261" width="2.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1105.44" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_key (20,202,020 samples, 0.06%)</title><rect x="933.8" y="549" width="0.7" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="936.76" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (70,707,070 samples, 0.22%)</title><rect x="291.3" y="693" width="2.6" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="294.26" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="464.9" y="453" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="467.87" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.06%)</title><rect x="1057.3" y="341" width="0.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1060.33" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::_M_default_initialize (10,101,010 samples, 0.03%)</title><rect x="1055.4" y="693" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="1058.44" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (20,202,020 samples, 0.06%)</title><rect x="108.9" y="645" width="0.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="111.93" y="655.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;double*, unsigned long, double&gt; (30,303,030 samples, 0.10%)</title><rect x="469.0" y="405" width="1.2" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="472.04" y="415.5" ></text>
</g>
<g >
<title>std::__remove_if&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;SplitChinese::rinse (111,111,110 samples, 0.35%)</title><rect x="221.9" y="645" width="4.2" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="224.89" y="655.5" ></text>
</g>
<g >
<title>ext4_reserve_inode_write (30,303,030 samples, 0.10%)</title><rect x="49.8" y="485" width="1.1" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="52.80" y="495.5" ></text>
</g>
<g >
<title>std::operator==&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="226.8" y="693" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="229.82" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="203.7" y="565" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="206.70" y="575.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (10,101,010 samples, 0.03%)</title><rect x="1051.3" y="709" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1054.27" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="637.3" y="373" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="640.34" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (121,212,120 samples, 0.39%)</title><rect x="272.7" y="661" width="4.5" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="275.69" y="671.5" ></text>
</g>
<g >
<title>kthread_blkcg (10,101,010 samples, 0.03%)</title><rect x="1157.0" y="597" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1160.02" y="607.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="133" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1090.65" y="143.5" ></text>
</g>
<g >
<title>__x64_sys_read (60,606,060 samples, 0.19%)</title><rect x="13.8" y="693" width="2.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="16.79" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="981.5" y="469" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="984.52" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator (20,202,020 samples, 0.06%)</title><rect x="915.2" y="613" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="918.18" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_M_next (20,202,020 samples, 0.06%)</title><rect x="671.1" y="453" width="0.7" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="674.07" y="463.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::find (838,383,830 samples, 2.67%)</title><rect x="864.8" y="533" width="31.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="867.77" y="543.5" >st..</text>
</g>
<g >
<title>std::__get_helper&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="927.7" y="469" width="0.4" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="930.69" y="479.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="895.5" y="501" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="898.47" y="511.5" ></text>
</g>
<g >
<title>simhash::Simhasher::make (18,181,818,000 samples, 57.82%)</title><rect x="363.3" y="677" width="682.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="366.28" y="687.5" >simhash::Simhasher::make</text>
</g>
<g >
<title>std::_Identity&lt;std::pair&lt;int, double&gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="83.2" y="629" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="86.16" y="639.5" ></text>
</g>
<g >
<title>simhash::jenkins::operator (10,101,010 samples, 0.03%)</title><rect x="1045.2" y="661" width="0.4" height="15.0" fill="rgb(246,192,45)" rx="2" ry="2" />
<text  x="1048.20" y="671.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Extract (18,131,312,950 samples, 57.66%)</title><rect x="363.3" y="629" width="680.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="366.28" y="639.5" >cppjieba::KeywordExtractor::Extract</text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (50,505,050 samples, 0.16%)</title><rect x="981.5" y="565" width="1.9" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="984.52" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="314.4" y="309" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="317.38" y="319.5" ></text>
</g>
<g >
<title>rcu_all_qs (10,101,010 samples, 0.03%)</title><rect x="349.6" y="69" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="352.63" y="79.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="237.4" y="613" width="1.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="240.43" y="623.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="185.5" y="533" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="188.50" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Hash_node (10,101,010 samples, 0.03%)</title><rect x="308.3" y="245" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="311.32" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_S_right (10,101,010 samples, 0.03%)</title><rect x="80.1" y="661" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="83.13" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_valptr (40,404,040 samples, 0.13%)</title><rect x="447.1" y="373" width="1.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="450.05" y="383.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="645" width="66.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="299.95" y="655.5" >std::__..</text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;SplitChinese::rinse (50,505,050 samples, 0.16%)</title><rect x="224.2" y="629" width="1.9" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="227.17" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::base (10,101,010 samples, 0.03%)</title><rect x="58.9" y="693" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="61.90" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_S_left (20,202,020 samples, 0.06%)</title><rect x="79.4" y="661" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="82.37" y="671.5" ></text>
</g>
<g >
<title>clear_page_erms (10,101,010 samples, 0.03%)</title><rect x="1146.0" y="565" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1149.03" y="575.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.03%)</title><rect x="1158.2" y="581" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1161.16" y="591.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="373.9" y="549" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="376.89" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;SimHashWebPage&gt;::destroy&lt;SimHashWebPage&gt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="613" width="5.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1058.81" y="623.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (10,101,010 samples, 0.03%)</title><rect x="339.8" y="245" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="342.78" y="255.5" ></text>
</g>
<g >
<title>std::__addressof&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1059.6" y="357" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1062.60" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (222,222,220 samples, 0.71%)</title><rect x="994.8" y="533" width="8.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="997.79" y="543.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (20,202,020 samples, 0.06%)</title><rect x="1076.7" y="293" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1079.66" y="303.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="53" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1094.07" y="63.5" ></text>
</g>
<g >
<title>__lru_cache_add (10,101,010 samples, 0.03%)</title><rect x="1156.6" y="597" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1159.64" y="607.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="797.3" y="501" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="800.30" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt;::_M_incr (10,101,010 samples, 0.03%)</title><rect x="75.2" y="709" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="78.20" y="719.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::KeywordExtractor (303,030,300 samples, 0.96%)</title><rect x="351.5" y="405" width="11.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="354.53" y="415.5" ></text>
</g>
<g >
<title>_IO_setb (10,101,010 samples, 0.03%)</title><rect x="12.7" y="741" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="15.65" y="751.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (404,040,400 samples, 1.28%)</title><rect x="1093.3" y="341" width="15.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1096.34" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="1128.6" y="293" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1131.59" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::find (1,161,616,150 samples, 3.69%)</title><rect x="132.1" y="565" width="43.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="135.06" y="575.5" >std:..</text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::rend (90,909,090 samples, 0.29%)</title><rect x="783.3" y="517" width="3.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="786.27" y="527.5" ></text>
</g>
<g >
<title>generic_perform_write (373,737,370 samples, 1.19%)</title><rect x="38.4" y="581" width="14.1" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="41.43" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (20,202,020 samples, 0.06%)</title><rect x="246.9" y="661" width="0.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="249.91" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (80,808,080 samples, 0.26%)</title><rect x="278.8" y="629" width="3.0" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="281.75" y="639.5" ></text>
</g>
<g >
<title>mem_cgroup_uncharge_list (10,101,010 samples, 0.03%)</title><rect x="350.4" y="69" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="353.39" y="79.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="165" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1114.91" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,101,010 samples, 0.03%)</title><rect x="1130.1" y="261" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1133.11" y="271.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (70,707,070 samples, 0.22%)</title><rect x="972.8" y="549" width="2.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="975.80" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long&gt; (60,606,060 samples, 0.19%)</title><rect x="369.3" y="501" width="2.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="372.34" y="511.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="341.3" y="229" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="344.29" y="239.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="1093.3" y="277" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1096.34" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (50,505,050 samples, 0.16%)</title><rect x="305.7" y="261" width="1.9" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="308.66" y="271.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (20,202,020 samples, 0.06%)</title><rect x="340.5" y="229" width="0.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="343.54" y="239.5" ></text>
</g>
<g >
<title>std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1093.3" y="309" width="1.2" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1096.34" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;JiebaSplitCn&gt;::construct&lt;JiebaSplitCn, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="469" width="64.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1065.26" y="479.5" >__gnu_c..</text>
</g>
<g >
<title>cppjieba::RuneStrLite::RuneStrLite (10,101,010 samples, 0.03%)</title><rect x="315.9" y="293" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="318.90" y="303.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="324.2" y="261" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="327.24" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_Rb_tree_iterator (20,202,020 samples, 0.06%)</title><rect x="941.7" y="581" width="0.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="944.72" y="591.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="1111.2" y="293" width="2.2" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1114.16" y="303.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="215.4" y="597" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="218.45" y="607.5" ></text>
</g>
<g >
<title>do_anonymous_page (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="101" width="1.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1092.55" y="111.5" ></text>
</g>
<g >
<title>cppjieba::GetWordFromRunes (10,101,010 samples, 0.03%)</title><rect x="372.4" y="565" width="0.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="375.38" y="575.5" ></text>
</g>
<g >
<title>alloc_pages_current (10,101,010 samples, 0.03%)</title><rect x="43.4" y="501" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="46.36" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="87.3" y="613" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="90.33" y="623.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="111.2" y="629" width="0.4" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="114.21" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1099.8" y="213" width="1.1" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1102.78" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;cppjieba::Dag*, unsigned long&gt; (171,717,170 samples, 0.55%)</title><rect x="178.7" y="501" width="6.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="181.68" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;int  (10,101,010 samples, 0.03%)</title><rect x="91.9" y="661" width="0.4" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="94.88" y="671.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="347.7" y="165" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="350.74" y="175.5" ></text>
</g>
<g >
<title>cppjieba::WordRange::WordRange (20,202,020 samples, 0.06%)</title><rect x="218.5" y="613" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="221.48" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="486.9" y="501" width="0.3" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="489.85" y="511.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::push_back (20,202,020 samples, 0.06%)</title><rect x="709.0" y="517" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="711.98" y="527.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (30,303,030 samples, 0.10%)</title><rect x="1099.8" y="197" width="1.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1102.78" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (20,202,020 samples, 0.06%)</title><rect x="1113.4" y="309" width="0.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1116.43" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (20,202,020 samples, 0.06%)</title><rect x="1080.5" y="309" width="0.7" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1083.45" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (40,404,040 samples, 0.13%)</title><rect x="231.0" y="613" width="1.5" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="233.99" y="623.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (10,101,010 samples, 0.03%)</title><rect x="331.1" y="85" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="334.06" y="95.5" ></text>
</g>
<g >
<title>simhash::Simhasher::make (18,202,020,020 samples, 57.89%)</title><rect x="362.9" y="693" width="683.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="365.90" y="703.5" >simhash::Simhasher::make</text>
</g>
<g >
<title>zap_pte_range.isra.0 (10,101,010 samples, 0.03%)</title><rect x="314.8" y="133" width="0.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="317.76" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="445.5" y="389" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="448.53" y="399.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="347.7" y="213" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="350.74" y="223.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::IsUserDictSingleChineseWord (20,202,020 samples, 0.06%)</title><rect x="403.8" y="549" width="0.8" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="406.84" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_key (40,404,040 samples, 0.13%)</title><rect x="933.4" y="565" width="1.5" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="936.38" y="575.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;unsigned long*, unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="482.3" y="437" width="0.8" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="485.30" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (10,101,010 samples, 0.03%)</title><rect x="371.6" y="533" width="0.4" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="374.62" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="1069.5" y="229" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1072.46" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="1125.2" y="341" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1128.18" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="1127.8" y="213" width="0.4" height="15.0" fill="rgb(250,209,49)" rx="2" ry="2" />
<text  x="1130.83" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (141,414,140 samples, 0.45%)</title><rect x="473.2" y="501" width="5.3" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="476.21" y="511.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="236.7" y="645" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="239.68" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (10,101,010 samples, 0.03%)</title><rect x="1032.7" y="501" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1035.69" y="511.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::size (20,202,020 samples, 0.06%)</title><rect x="348.1" y="213" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="351.12" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="1004.6" y="597" width="0.4" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1007.64" y="607.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="149" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1114.91" y="159.5" ></text>
</g>
<g >
<title>munmap (10,101,010 samples, 0.03%)</title><rect x="325.4" y="293" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="328.37" y="303.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::reverse_iterator (30,303,030 samples, 0.10%)</title><rect x="779.5" y="517" width="1.1" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="782.48" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Word&gt; (10,101,010 samples, 0.03%)</title><rect x="910.3" y="533" width="0.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="913.26" y="543.5" ></text>
</g>
<g >
<title>__handle_mm_fault (60,606,060 samples, 0.19%)</title><rect x="1155.5" y="645" width="2.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1158.51" y="655.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.03%)</title><rect x="295.0" y="485" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="298.05" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,202,020 samples, 0.06%)</title><rect x="1006.2" y="549" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1009.16" y="559.5" ></text>
</g>
<g >
<title>try_charge (10,101,010 samples, 0.03%)</title><rect x="324.2" y="101" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="327.24" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="474.0" y="437" width="0.3" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="476.96" y="447.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (20,202,020 samples, 0.06%)</title><rect x="1113.4" y="341" width="0.8" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1116.43" y="351.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="565" width="0.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1192.24" y="575.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::~DictTrie (111,111,110 samples, 0.35%)</title><rect x="1055.8" y="437" width="4.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1058.81" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (10,101,010 samples, 0.03%)</title><rect x="291.3" y="501" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="294.26" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, void&gt; (40,404,040 samples, 0.13%)</title><rect x="286.3" y="709" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="289.33" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10,101,010 samples, 0.03%)</title><rect x="422.0" y="469" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="425.03" y="479.5" ></text>
</g>
<g >
<title>cppjieba::Dag::~Dag (30,303,030 samples, 0.10%)</title><rect x="806.4" y="453" width="1.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="809.40" y="463.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="380.0" y="517" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="382.96" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Word*, std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt; &gt;::operator* (20,202,020 samples, 0.06%)</title><rect x="393.6" y="501" width="0.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="396.60" y="511.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="703.3" y="405" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="706.29" y="415.5" ></text>
</g>
<g >
<title>__vm_munmap (10,101,010 samples, 0.03%)</title><rect x="325.4" y="229" width="0.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="328.37" y="239.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::Value (10,101,010 samples, 0.03%)</title><rect x="71.4" y="661" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="74.41" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="235.2" y="661" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="238.16" y="671.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="333.3" y="197" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="336.33" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="984.2" y="565" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="987.17" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_check_len (60,606,060 samples, 0.19%)</title><rect x="1040.7" y="581" width="2.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1043.65" y="591.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::_S_to_pointer&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt; (80,808,080 samples, 0.26%)</title><rect x="753.7" y="517" width="3.0" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="756.71" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt; &gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="930.3" y="549" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="933.35" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::rbegin (60,606,060 samples, 0.19%)</title><rect x="781.0" y="517" width="2.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="784.00" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="361.0" y="293" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="364.01" y="303.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="261" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1111.50" y="271.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="165" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1094.82" y="175.5" ></text>
</g>
<g >
<title>async_page_fault (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="245" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1111.50" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;int*, unsigned long, int&gt; (30,303,030 samples, 0.10%)</title><rect x="476.6" y="469" width="1.2" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="479.62" y="479.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="338.6" y="181" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="341.64" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_erase (80,808,080 samples, 0.26%)</title><rect x="977.7" y="533" width="3.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="980.73" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (20,202,020 samples, 0.06%)</title><rect x="1159.3" y="725" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1162.30" y="735.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;JiebaSplitCn,  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="533" width="64.0" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1065.26" y="543.5" >std::__..</text>
</g>
<g >
<title>generic_perform_write (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="597" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="1192.24" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (141,414,140 samples, 0.45%)</title><rect x="208.6" y="533" width="5.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="211.63" y="543.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="1003.5" y="565" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1006.50" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="630.5" y="421" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="633.51" y="431.5" ></text>
</g>
<g >
<title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (90,909,090 samples, 0.29%)</title><rect x="1051.6" y="693" width="3.5" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1054.64" y="703.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::find (282,828,280 samples, 0.90%)</title><rect x="814.7" y="501" width="10.6" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="817.73" y="511.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="486.5" y="469" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="489.47" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (474,747,470 samples, 1.51%)</title><rect x="985.3" y="565" width="17.8" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="988.31" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="468.7" y="485" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="471.66" y="495.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (20,202,020 samples, 0.06%)</title><rect x="1157.0" y="613" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1160.02" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::Word&gt;::construct&lt;cppjieba::Word, cppjieba::Word&gt; (60,606,060 samples, 0.19%)</title><rect x="389.8" y="501" width="2.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="392.81" y="511.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (10,101,010 samples, 0.03%)</title><rect x="265.9" y="565" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="268.86" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;::_M_insert&lt;WordWeight::WEIGHT&gt; (40,404,040 samples, 0.13%)</title><rect x="242.0" y="677" width="1.5" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="244.98" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="978.5" y="469" width="0.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="981.49" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_bucket_begin (20,202,020 samples, 0.06%)</title><rect x="1122.5" y="325" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1125.53" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="474.0" y="421" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="476.96" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (10,101,010 samples, 0.03%)</title><rect x="1114.9" y="293" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1117.95" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char const&gt; (10,101,010 samples, 0.03%)</title><rect x="200.3" y="581" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="203.29" y="591.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (20,202,020 samples, 0.06%)</title><rect x="323.9" y="277" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="326.86" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="1067.2" y="261" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1070.19" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (90,909,090 samples, 0.29%)</title><rect x="817.0" y="469" width="3.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="820.01" y="479.5" ></text>
</g>
<g >
<title>clear_page_erms (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="85" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1127.04" y="95.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="325.0" y="293" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="328.00" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator==&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="749.5" y="485" width="1.6" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="752.54" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="247.3" y="613" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="250.29" y="623.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="331.4" y="69" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="334.44" y="79.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="340.9" y="181" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="343.92" y="191.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="581" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1161.54" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="1127.5" y="261" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1130.46" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="978.9" y="453" width="0.3" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="981.87" y="463.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.03%)</title><rect x="227.6" y="613" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="230.58" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Insert&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, false&gt;::insert&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, void&gt; (10,101,010 samples, 0.03%)</title><rect x="268.9" y="677" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="271.89" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_default_append (20,202,020 samples, 0.06%)</title><rect x="219.2" y="597" width="0.8" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="222.24" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="1028.9" y="485" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1031.90" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="475.9" y="485" width="0.3" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="478.86" y="495.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;cppjieba::WordRange*, cppjieba::WordRange*, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="197.3" y="533" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="200.25" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="824.6" y="453" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="827.59" y="463.5" ></text>
</g>
<g >
<title>do_async_page_fault (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="213" width="0.7" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1115.67" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (20,202,020 samples, 0.06%)</title><rect x="301.9" y="229" width="0.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="304.87" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::vector (10,101,010 samples, 0.03%)</title><rect x="827.2" y="549" width="0.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="830.24" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (20,202,020 samples, 0.06%)</title><rect x="321.2" y="357" width="0.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="324.20" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (10,101,010 samples, 0.03%)</title><rect x="210.9" y="517" width="0.4" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="213.90" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (50,505,050 samples, 0.16%)</title><rect x="1120.6" y="309" width="1.9" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1123.63" y="319.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (20,202,020 samples, 0.06%)</title><rect x="322.7" y="293" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="325.72" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_get_Tp_allocator (10,101,010 samples, 0.03%)</title><rect x="679.0" y="485" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="682.03" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_get_Tp_allocator (20,202,020 samples, 0.06%)</title><rect x="705.6" y="437" width="0.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="708.57" y="447.5" ></text>
</g>
<g >
<title>SplitChinese::splitWords (2,868,686,840 samples, 9.12%)</title><rect x="118.4" y="693" width="107.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="121.41" y="703.5" >SplitChinese:..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (20,202,020 samples, 0.06%)</title><rect x="887.9" y="453" width="0.8" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="890.89" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="277.6" y="597" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="280.61" y="607.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1087.3" y="277" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1090.28" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned int&gt;::_M_v (30,303,030 samples, 0.10%)</title><rect x="880.3" y="437" width="1.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="883.31" y="447.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (30,303,030 samples, 0.10%)</title><rect x="1029.3" y="517" width="1.1" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1032.28" y="527.5" ></text>
</g>
<g >
<title>cppjieba::RuneStrLite::RuneStrLite (10,101,010 samples, 0.03%)</title><rect x="315.5" y="277" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="318.52" y="287.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="324.2" y="213" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="327.24" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (222,222,220 samples, 0.71%)</title><rect x="994.8" y="549" width="8.3" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="997.79" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.16%)</title><rect x="1070.2" y="245" width="1.9" height="15.0" fill="rgb(235,142,34)" rx="2" ry="2" />
<text  x="1073.22" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, false, true&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="251.8" y="693" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="254.84" y="703.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; (10,101,010 samples, 0.03%)</title><rect x="1002.7" y="517" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1005.75" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (50,505,050 samples, 0.16%)</title><rect x="266.6" y="661" width="1.9" height="15.0" fill="rgb(218,62,15)" rx="2" ry="2" />
<text  x="269.62" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (141,414,140 samples, 0.45%)</title><rect x="1168.8" y="757" width="5.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1171.77" y="767.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::~LocalVector (30,303,030 samples, 0.10%)</title><rect x="806.4" y="437" width="1.1" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="809.40" y="447.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::~LocalVector (10,101,010 samples, 0.03%)</title><rect x="333.0" y="133" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="335.96" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="188.2" y="581" width="0.3" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="191.16" y="591.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::Word*&gt; (20,202,020 samples, 0.06%)</title><rect x="220.8" y="581" width="0.7" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="223.75" y="591.5" ></text>
</g>
<g >
<title>tinyxml2::XMLElement::ParseDeep (101,010,100 samples, 0.32%)</title><rect x="65.3" y="581" width="3.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="68.34" y="591.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::operator++ (70,707,070 samples, 0.22%)</title><rect x="769.2" y="517" width="2.7" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="772.25" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_left (20,202,020 samples, 0.06%)</title><rect x="979.6" y="517" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="982.62" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="911.8" y="581" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="914.77" y="591.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (10,101,010 samples, 0.03%)</title><rect x="346.2" y="85" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="349.22" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="1104.7" y="261" width="0.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1107.71" y="271.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="333.0" y="197" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="335.96" y="207.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="117" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1127.04" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::vector (60,606,060 samples, 0.19%)</title><rect x="344.7" y="357" width="2.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="347.71" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (30,303,030 samples, 0.10%)</title><rect x="1114.6" y="341" width="1.1" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1117.57" y="351.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::_S_to_pointer&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt; (101,010,100 samples, 0.32%)</title><rect x="775.7" y="501" width="3.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="778.69" y="511.5" ></text>
</g>
<g >
<title>__ext4_get_inode_loc (20,202,020 samples, 0.06%)</title><rect x="50.2" y="469" width="0.7" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="53.18" y="479.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.03%)</title><rect x="607.8" y="389" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="610.77" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="725" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.24" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="1039.5" y="581" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1042.51" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (161,616,160 samples, 0.51%)</title><rect x="207.9" y="549" width="6.0" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="210.87" y="559.5" ></text>
</g>
<g >
<title>WebPageInvert::~WebPageInvert (141,414,140 samples, 0.45%)</title><rect x="291.3" y="725" width="5.3" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="294.26" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="85.1" y="661" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="88.05" y="671.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="391.3" y="405" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="394.33" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (20,202,020 samples, 0.06%)</title><rect x="130.9" y="533" width="0.8" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="133.92" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="237.8" y="565" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="240.81" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.10%)</title><rect x="295.4" y="533" width="1.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.43" y="543.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="331.1" y="165" width="0.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="175.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (20,202,020 samples, 0.06%)</title><rect x="981.5" y="485" width="0.8" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="984.52" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_right (10,101,010 samples, 0.03%)</title><rect x="979.2" y="485" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="982.25" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (40,404,040 samples, 0.13%)</title><rect x="473.6" y="469" width="1.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="476.58" y="479.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="229" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1089.52" y="239.5" ></text>
</g>
<g >
<title>cppjieba::RuneStrLite::RuneStrLite (20,202,020 samples, 0.06%)</title><rect x="903.1" y="501" width="0.7" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="906.05" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;cppjieba::Dag*, unsigned long, cppjieba::Dag&gt; (171,717,170 samples, 0.55%)</title><rect x="178.7" y="533" width="6.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="181.68" y="543.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (70,707,070 samples, 0.22%)</title><rect x="322.3" y="309" width="2.7" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="325.34" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="631.3" y="437" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="634.27" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (20,202,020 samples, 0.06%)</title><rect x="86.9" y="693" width="0.8" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="89.95" y="703.5" ></text>
</g>
<g >
<title>WebPageInvert::createInvert (10,101,010 samples, 0.03%)</title><rect x="290.9" y="725" width="0.4" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="293.88" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;SimHashWebPage&gt;::construct&lt;SimHashWebPage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="597" width="66.0" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="299.95" y="607.5" >__gnu_c..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="1039.5" y="565" width="0.8" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1042.51" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::operator (20,202,020 samples, 0.06%)</title><rect x="518.7" y="501" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="521.69" y="511.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="677" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1064.12" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="672.2" y="469" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="675.21" y="479.5" ></text>
</g>
<g >
<title>alloc_pages_vma (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="149" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1090.65" y="159.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="238.6" y="677" width="0.3" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="241.57" y="687.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRuneInString (50,505,050 samples, 0.16%)</title><rect x="365.6" y="597" width="1.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="368.55" y="607.5" ></text>
</g>
<g >
<title>cppjieba::MPSegment::IsUserDictSingleChineseWord (10,101,010 samples, 0.03%)</title><rect x="397.0" y="565" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="400.02" y="575.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="85" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1094.82" y="95.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (20,202,020 samples, 0.06%)</title><rect x="347.0" y="341" width="0.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="349.98" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (171,717,170 samples, 0.55%)</title><rect x="444.4" y="405" width="6.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="447.40" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="1127.1" y="245" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1130.08" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Word*, std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt; &gt;::__normal_iterator (10,101,010 samples, 0.03%)</title><rect x="395.5" y="485" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="398.50" y="495.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="328.4" y="197" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="331.41" y="207.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1091.4" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1094.45" y="223.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::DictTrie (1,393,939,380 samples, 4.43%)</title><rect x="1062.3" y="405" width="52.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1065.26" y="415.5" >cppji..</text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.03%)</title><rect x="1158.2" y="613" width="0.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1161.16" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;unsigned int, true, false&gt;::_Node_const_iterator (10,101,010 samples, 0.03%)</title><rect x="864.4" y="517" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="867.39" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="1084.2" y="325" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1087.24" y="335.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_S_right (10,101,010 samples, 0.03%)</title><rect x="295.8" y="405" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="298.81" y="415.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (20,202,020 samples, 0.06%)</title><rect x="265.5" y="581" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="268.48" y="591.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::init_ (20,202,020 samples, 0.06%)</title><rect x="700.6" y="389" width="0.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="703.64" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_valptr (20,202,020 samples, 0.06%)</title><rect x="451.6" y="373" width="0.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="454.60" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (60,606,060 samples, 0.19%)</title><rect x="473.6" y="485" width="2.3" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="476.58" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_store_code (10,101,010 samples, 0.03%)</title><rect x="359.9" y="325" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="362.87" y="335.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="163.5" y="485" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="166.52" y="495.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag*, cppjieba::Dag&gt; (80,808,080 samples, 0.26%)</title><rect x="804.5" y="517" width="3.0" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="807.50" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (10,101,010 samples, 0.03%)</title><rect x="460.7" y="405" width="0.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="463.70" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_Vector_impl::~_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="849.2" y="533" width="0.4" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="852.23" y="543.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (10,101,010 samples, 0.03%)</title><rect x="1157.4" y="597" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1160.40" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (20,202,020 samples, 0.06%)</title><rect x="1085.0" y="357" width="0.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1088.00" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (40,404,040 samples, 0.13%)</title><rect x="165.0" y="469" width="1.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="168.03" y="479.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (40,404,040 samples, 0.13%)</title><rect x="1100.9" y="197" width="1.5" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1103.92" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (40,404,040 samples, 0.13%)</title><rect x="301.5" y="245" width="1.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="304.49" y="255.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="1097.1" y="149" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1100.13" y="159.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (20,202,020 samples, 0.06%)</title><rect x="340.5" y="213" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="343.54" y="223.5" ></text>
</g>
<g >
<title>__do_page_fault (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="165" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1092.55" y="175.5" ></text>
</g>
<g >
<title>do_async_page_fault (20,202,020 samples, 0.06%)</title><rect x="1109.6" y="229" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1112.64" y="239.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="133" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1114.91" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="306.8" y="197" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="309.80" y="207.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;cppjieba::DictUnit const*, cppjieba::DictUnit*&gt; (90,909,090 samples, 0.29%)</title><rect x="325.8" y="293" width="3.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="328.75" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="1055.8" y="325" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1058.81" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="314.4" y="293" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="317.38" y="303.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="1099.8" y="245" width="2.6" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1102.78" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="260.6" y="629" width="0.7" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="263.56" y="639.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (30,303,030 samples, 0.10%)</title><rect x="337.9" y="213" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="340.88" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;unsigned int, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="863.6" y="485" width="0.4" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="866.63" y="495.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;SimHashWebPage, std::allocator&lt;SimHashWebPage&gt;,  (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="645" width="5.3" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="1058.81" y="655.5" ></text>
</g>
<g >
<title>mmput (20,202,020 samples, 0.06%)</title><rect x="1158.2" y="677" width="0.7" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1161.16" y="687.5" ></text>
</g>
<g >
<title>SingleWord::nBytecode (20,202,020 samples, 0.06%)</title><rect x="90.0" y="693" width="0.7" height="15.0" fill="rgb(236,146,34)" rx="2" ry="2" />
<text  x="92.98" y="703.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="202.6" y="549" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="205.56" y="559.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;double*, double&gt; (10,101,010 samples, 0.03%)</title><rect x="471.3" y="485" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="474.31" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="213.2" y="501" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="216.17" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Word*, std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="202.9" y="549" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="205.94" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="113.9" y="581" width="0.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="116.86" y="591.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;simhash::Simhasher&gt; &gt;::destroy&lt;simhash::Simhasher&gt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="501" width="5.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1058.81" y="511.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (10,101,010 samples, 0.03%)</title><rect x="235.2" y="629" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="238.16" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="632.0" y="437" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="635.03" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="114.2" y="597" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="117.24" y="607.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, WordWeight::TF&gt; (10,101,010 samples, 0.03%)</title><rect x="278.4" y="581" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="281.37" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;simhash::Simhasher, std::allocator&lt;simhash::Simhasher&gt;,  (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="517" width="5.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1058.81" y="527.5" ></text>
</g>
<g >
<title>do_iter_write (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="661" width="0.8" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1192.24" y="671.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="335.2" y="165" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="338.23" y="175.5" ></text>
</g>
<g >
<title>jbd2_journal_stop (50,505,050 samples, 0.16%)</title><rect x="44.5" y="533" width="1.9" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="47.49" y="543.5" ></text>
</g>
<g >
<title>std::operator&lt; &lt;int, double&gt; (20,202,020 samples, 0.06%)</title><rect x="81.3" y="645" width="0.7" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="84.26" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="321.6" y="341" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="324.58" y="351.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (90,909,090 samples, 0.29%)</title><rect x="325.8" y="261" width="3.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="328.75" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (30,303,030 samples, 0.10%)</title><rect x="162.0" y="469" width="1.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="165.00" y="479.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_key (10,101,010 samples, 0.03%)</title><rect x="975.5" y="565" width="0.3" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="978.45" y="575.5" ></text>
</g>
<g >
<title>rcu_do_batch (10,101,010 samples, 0.03%)</title><rect x="249.2" y="549" width="0.4" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="252.18" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;int*, unsigned long&gt; (30,303,030 samples, 0.10%)</title><rect x="476.6" y="453" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="479.62" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="984.2" y="533" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="987.17" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (20,202,020 samples, 0.06%)</title><rect x="1129.7" y="325" width="0.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1132.73" y="335.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="391.3" y="437" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="394.33" y="447.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="725" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="735.5" ></text>
</g>
<g >
<title>_IO_no_init (10,101,010 samples, 0.03%)</title><rect x="11.1" y="629" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="14.14" y="639.5" ></text>
</g>
<g >
<title>munmap (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="725" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1064.12" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="638.9" y="405" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="641.85" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::~vector (141,414,140 samples, 0.45%)</title><rect x="848.1" y="549" width="5.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="851.09" y="559.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="117" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1094.82" y="127.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_filebuf (60,606,060 samples, 0.19%)</title><rect x="22.1" y="741" width="2.3" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="25.13" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="519.1" y="469" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="522.07" y="479.5" ></text>
</g>
<g >
<title>__x64_sys_read (10,101,010 samples, 0.03%)</title><rect x="21.4" y="693" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="24.37" y="703.5" ></text>
</g>
<g >
<title>do_syscall_64 (20,202,020 samples, 0.06%)</title><rect x="1158.2" y="741" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1161.16" y="751.5" ></text>
</g>
<g >
<title>unmap_region (10,101,010 samples, 0.03%)</title><rect x="325.4" y="197" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="328.37" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="232.5" y="629" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="235.51" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="790.5" y="517" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="793.48" y="527.5" ></text>
</g>
<g >
<title>__page_cache_alloc (10,101,010 samples, 0.03%)</title><rect x="43.4" y="517" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="46.36" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="1071.7" y="197" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1074.73" y="207.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="227.6" y="661" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="230.58" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,101,010 samples, 0.03%)</title><rect x="293.5" y="501" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="296.53" y="511.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="165" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1090.65" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (30,303,030 samples, 0.10%)</title><rect x="318.6" y="325" width="1.1" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="321.55" y="335.5" ></text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="133" width="0.7" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1115.67" y="143.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;cppjieba::RuneStr&gt;::push_back (10,101,010 samples, 0.03%)</title><rect x="217.7" y="565" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="220.72" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt;::__normal_iterator (50,505,050 samples, 0.16%)</title><rect x="784.8" y="485" width="1.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="787.79" y="495.5" ></text>
</g>
<g >
<title>alloc_pages_vma (10,101,010 samples, 0.03%)</title><rect x="1078.9" y="85" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1081.94" y="95.5" ></text>
</g>
<g >
<title>std::__iterator_category&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="383.7" y="485" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="386.75" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::base (10,101,010 samples, 0.03%)</title><rect x="284.8" y="709" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="287.82" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (90,909,090 samples, 0.29%)</title><rect x="105.5" y="645" width="3.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="108.52" y="655.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&gt; (40,404,040 samples, 0.13%)</title><rect x="369.7" y="485" width="1.5" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="372.72" y="495.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="149" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1089.90" y="159.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (20,202,020 samples, 0.06%)</title><rect x="1059.2" y="389" width="0.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1062.23" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (70,707,070 samples, 0.22%)</title><rect x="817.8" y="437" width="2.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="820.77" y="447.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="340.5" y="197" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="343.54" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (141,414,140 samples, 0.45%)</title><rect x="132.4" y="533" width="5.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="135.43" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (20,202,020 samples, 0.06%)</title><rect x="287.8" y="693" width="0.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="290.85" y="703.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="328.4" y="117" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="331.41" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="113.5" y="581" width="0.4" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="116.48" y="591.5" ></text>
</g>
<g >
<title>std::__addressof&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="325.0" y="277" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="328.00" y="287.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::~LocalVector (10,101,010 samples, 0.03%)</title><rect x="312.1" y="261" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="315.11" y="271.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (10,101,010 samples, 0.03%)</title><rect x="1079.3" y="69" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1082.32" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_destroy_node (10,101,010 samples, 0.03%)</title><rect x="978.1" y="485" width="0.4" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="981.11" y="495.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (232,323,230 samples, 0.74%)</title><rect x="1135.0" y="757" width="8.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1138.04" y="767.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Word*&gt; (40,404,040 samples, 0.13%)</title><rect x="910.3" y="549" width="1.5" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="913.26" y="559.5" ></text>
</g>
<g >
<title>xas_load (10,101,010 samples, 0.03%)</title><rect x="44.1" y="501" width="0.4" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="47.12" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (10,101,010 samples, 0.03%)</title><rect x="1083.9" y="341" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1086.86" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="630.9" y="421" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="633.89" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="134.7" y="501" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="137.71" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (20,202,020 samples, 0.06%)</title><rect x="246.2" y="661" width="0.7" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="249.15" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="350.0" y="309" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="353.01" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="329.5" y="293" width="0.4" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="332.54" y="303.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="302.3" y="213" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="305.25" y="223.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="290.5" y="661" width="0.4" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="293.50" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (30,303,030 samples, 0.10%)</title><rect x="390.6" y="485" width="1.1" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="393.57" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_negate&lt;int  (10,101,010 samples, 0.03%)</title><rect x="93.0" y="645" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="96.01" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (20,202,020 samples, 0.06%)</title><rect x="1077.8" y="293" width="0.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1080.80" y="303.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (80,808,080 samples, 0.26%)</title><rect x="326.1" y="245" width="3.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="329.13" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::_M_realloc_insert&lt;limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (60,606,060 samples, 0.19%)</title><rect x="312.1" y="341" width="2.3" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="315.11" y="351.5" ></text>
</g>
<g >
<title>cppjieba::Jieba::CutAll (2,747,474,720 samples, 8.74%)</title><rect x="118.4" y="661" width="103.1" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="121.41" y="671.5" >cppjieba::Ji..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.03%)</title><rect x="85.8" y="661" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="88.81" y="671.5" ></text>
</g>
<g >
<title>std::_List_const_iterator&lt;WordWeight::WEIGHT&gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="286.0" y="709" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="288.95" y="719.5" ></text>
</g>
<g >
<title>do_user_addr_fault (20,202,020 samples, 0.06%)</title><rect x="345.8" y="181" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="348.84" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_Hashtable_alloc (20,202,020 samples, 0.06%)</title><rect x="1075.1" y="277" width="0.8" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1078.15" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (121,212,120 samples, 0.39%)</title><rect x="229.9" y="645" width="4.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="232.85" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;WordWeight::WEIGHT&gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="242.7" y="629" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="245.74" y="639.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.03%)</title><rect x="406.5" y="485" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="409.49" y="495.5" ></text>
</g>
<g >
<title>__do_page_fault (60,606,060 samples, 0.19%)</title><rect x="1144.9" y="693" width="2.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1147.89" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::find (10,101,010 samples, 0.03%)</title><rect x="187.8" y="581" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="190.78" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Word*, std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt; &gt;::operator- (30,303,030 samples, 0.10%)</title><rect x="394.4" y="501" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="397.36" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::resize (20,202,020 samples, 0.06%)</title><rect x="219.2" y="613" width="0.8" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="222.24" y="623.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="677" width="5.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1058.81" y="687.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (101,010,100 samples, 0.32%)</title><rect x="380.3" y="517" width="3.8" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="383.34" y="527.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::~_Vector_base (101,010,100 samples, 0.32%)</title><rect x="849.6" y="533" width="3.8" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="852.61" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (545,454,540 samples, 1.73%)</title><rect x="32.0" y="709" width="20.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="34.99" y="719.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (20,202,020 samples, 0.06%)</title><rect x="40.3" y="517" width="0.8" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="43.32" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (40,404,040 samples, 0.13%)</title><rect x="993.3" y="549" width="1.5" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="996.27" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_insert_unique&lt;std::pair&lt;int, double&gt; &gt; (181,818,180 samples, 0.58%)</title><rect x="77.9" y="693" width="6.8" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="80.85" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, double&gt;, false&gt; &gt;::construct&lt;std::pair&lt;unsigned int const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1115.3" y="293" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1118.33" y="303.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (10,101,010 samples, 0.03%)</title><rect x="378.8" y="533" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="381.82" y="543.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.03%)</title><rect x="1110.0" y="101" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1113.02" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (20,202,020 samples, 0.06%)</title><rect x="892.4" y="501" width="0.8" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="895.44" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (191,919,190 samples, 0.61%)</title><rect x="423.9" y="453" width="7.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="426.93" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit const*, std::allocator&lt;cppjieba::DictUnit const*&gt; &gt;::emplace_back&lt;cppjieba::DictUnit const*&gt; (30,303,030 samples, 0.10%)</title><rect x="309.8" y="341" width="1.2" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="312.83" y="351.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::operator (60,606,060 samples, 0.19%)</title><rect x="797.7" y="533" width="2.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="800.68" y="543.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="197" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1094.07" y="207.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="289.4" y="709" width="0.3" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="292.36" y="719.5" ></text>
</g>
<g >
<title>std::move&lt;std::pair&lt;int, double&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="77.5" y="709" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="80.47" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="494.1" y="533" width="0.7" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="497.05" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt; &gt;::lower_bound (10,101,010 samples, 0.03%)</title><rect x="296.6" y="677" width="0.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="299.57" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="981.1" y="517" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="984.14" y="527.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.03%)</title><rect x="978.9" y="437" width="0.3" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="981.87" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_pred&lt;int  (10,101,010 samples, 0.03%)</title><rect x="92.3" y="645" width="0.3" height="15.0" fill="rgb(213,37,9)" rx="2" ry="2" />
<text  x="95.26" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="668.0" y="405" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="671.04" y="415.5" ></text>
</g>
<g >
<title>std::_List_node&lt;WordWeight::WEIGHT&gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="294.7" y="517" width="0.3" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="297.67" y="527.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (50,505,050 samples, 0.16%)</title><rect x="340.2" y="245" width="1.9" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="343.16" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="174.9" y="533" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="177.89" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned int&gt;::_M_v (20,202,020 samples, 0.06%)</title><rect x="212.0" y="485" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="215.04" y="495.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="343.6" y="277" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="346.57" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::~unordered_map (10,101,010 samples, 0.03%)</title><rect x="1058.5" y="373" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1061.47" y="383.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;SplitChinese&gt;::~shared_ptr (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="725" width="5.7" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1129.70" y="735.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (10,101,010 samples, 0.03%)</title><rect x="1028.9" y="469" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1031.90" y="479.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;cppjieba::Dag*, cppjieba::Dag*, std::allocator&lt;cppjieba::Dag&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="185.1" y="533" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="188.12" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="621.4" y="405" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="624.42" y="415.5" ></text>
</g>
<g >
<title>exit_mmap (20,202,020 samples, 0.06%)</title><rect x="1158.2" y="661" width="0.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1161.16" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (222,222,220 samples, 0.71%)</title><rect x="922.0" y="549" width="8.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="925.01" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt;::insert (10,101,010 samples, 0.03%)</title><rect x="268.9" y="693" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="271.89" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::end (161,616,160 samples, 0.51%)</title><rect x="526.3" y="501" width="6.0" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="529.27" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="489.9" y="485" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="492.88" y="495.5" ></text>
</g>
<g >
<title>cppjieba::FullSegment::Cut (2,747,474,720 samples, 8.74%)</title><rect x="118.4" y="645" width="103.1" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="121.41" y="655.5" >cppjieba::Fu..</text>
</g>
<g >
<title>unmap_page_range (10,101,010 samples, 0.03%)</title><rect x="314.8" y="149" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="317.76" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (30,303,030 samples, 0.10%)</title><rect x="1003.5" y="581" width="1.1" height="15.0" fill="rgb(233,129,30)" rx="2" ry="2" />
<text  x="1006.50" y="591.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (20,202,020 samples, 0.06%)</title><rect x="45.3" y="501" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="48.25" y="511.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.03%)</title><rect x="325.4" y="149" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="328.37" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.03%)</title><rect x="1155.5" y="629" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1158.51" y="639.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::__negate&lt;int  (70,707,070 samples, 0.22%)</title><rect x="93.4" y="645" width="2.6" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="96.39" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (292,929,290 samples, 0.93%)</title><rect x="450.8" y="421" width="11.0" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="453.84" y="431.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="318.2" y="309" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="321.17" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="493.7" y="517" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="496.67" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="418.6" y="453" width="0.4" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="421.62" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;, void&gt; (141,414,140 samples, 0.45%)</title><rect x="1046.0" y="709" width="5.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1048.96" y="719.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (10,101,010 samples, 0.03%)</title><rect x="350.8" y="357" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="353.77" y="367.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (90,909,090 samples, 0.29%)</title><rect x="1055.8" y="405" width="3.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1058.81" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;unsigned int, true, false&gt;::_Node_const_iterator (40,404,040 samples, 0.13%)</title><rect x="890.5" y="485" width="1.6" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="893.55" y="495.5" ></text>
</g>
<g >
<title>alloc_pages_vma (10,101,010 samples, 0.03%)</title><rect x="1156.3" y="613" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1159.26" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="307.9" y="261" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="310.94" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator-- (10,101,010 samples, 0.03%)</title><rect x="938.7" y="581" width="0.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="941.69" y="591.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::KeywordExtractor::Word*&gt; (70,707,070 samples, 0.22%)</title><rect x="1031.9" y="549" width="2.7" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1034.93" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_check_len (50,505,050 samples, 0.16%)</title><rect x="704.8" y="469" width="1.9" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="707.81" y="479.5" ></text>
</g>
<g >
<title>limonp::Split (20,202,020 samples, 0.06%)</title><rect x="1083.5" y="357" width="0.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1086.49" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::~unordered_map (10,101,010 samples, 0.03%)</title><rect x="1056.2" y="341" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1059.19" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="299.6" y="245" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="302.60" y="255.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1096.0" y="133" width="0.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1098.99" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="330.7" y="277" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="333.68" y="287.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::~DictUnit (10,101,010 samples, 0.03%)</title><rect x="1088.0" y="261" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1091.03" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="1110.4" y="277" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1113.40" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="361.0" y="325" width="0.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="364.01" y="335.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="406.5" y="517" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="409.49" y="527.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (80,808,080 samples, 0.26%)</title><rect x="331.1" y="245" width="3.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="268.9" y="645" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="271.89" y="655.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="331.1" y="117" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="334.06" y="127.5" ></text>
</g>
<g >
<title>__add_to_page_cache_locked (10,101,010 samples, 0.03%)</title><rect x="43.7" y="501" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="46.74" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::find_first_of (40,404,040 samples, 0.13%)</title><rect x="1174.1" y="757" width="1.5" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="1177.08" y="767.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;JiebaSplitCn&gt;::shared_ptr&lt;std::allocator&lt;JiebaSplitCn&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="549" width="64.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="1065.26" y="559.5" >std::sh..</text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="1069.1" y="229" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1072.08" y="239.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="219.6" y="549" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="222.62" y="559.5" ></text>
</g>
<g >
<title>WordWeight::buildTF (929,292,920 samples, 2.96%)</title><rect x="249.9" y="709" width="34.9" height="15.0" fill="rgb(217,58,14)" rx="2" ry="2" />
<text  x="252.94" y="719.5" >Wo..</text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (30,303,030 samples, 0.10%)</title><rect x="179.8" y="453" width="1.2" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="182.82" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="206.7" y="533" width="1.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="209.73" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.10%)</title><rect x="295.4" y="517" width="1.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.43" y="527.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="741" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.24" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (404,040,400 samples, 1.28%)</title><rect x="538.4" y="469" width="15.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="541.40" y="479.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned int const, double&gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="449.7" y="373" width="0.8" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="452.70" y="383.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (10,101,010 samples, 0.03%)</title><rect x="26.3" y="741" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="29.30" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1115.3" y="325" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1118.33" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="282.2" y="613" width="0.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="285.16" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="307.9" y="245" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="310.94" y="255.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl_data::_M_swap_data (10,101,010 samples, 0.03%)</title><rect x="982.3" y="485" width="0.4" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="985.28" y="495.5" ></text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1109.6" y="149" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1112.64" y="159.5" ></text>
</g>
<g >
<title>std::__partial_sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="980.8" y="597" width="2.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="983.76" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (20,202,020 samples, 0.06%)</title><rect x="1075.1" y="293" width="0.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1078.15" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit&gt; (20,202,020 samples, 0.06%)</title><rect x="347.0" y="293" width="0.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="349.98" y="303.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (90,909,090 samples, 0.29%)</title><rect x="999.3" y="517" width="3.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="1002.34" y="527.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (10,101,010 samples, 0.03%)</title><rect x="1157.4" y="581" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1160.40" y="591.5" ></text>
</g>
<g >
<title>kmem_cache_free (10,101,010 samples, 0.03%)</title><rect x="46.0" y="517" width="0.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="49.01" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (30,303,030 samples, 0.10%)</title><rect x="881.8" y="437" width="1.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="884.83" y="447.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (30,303,030 samples, 0.10%)</title><rect x="312.5" y="229" width="1.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="315.49" y="239.5" ></text>
</g>
<g >
<title>_raw_spin_lock (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="133" width="0.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1111.50" y="143.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="549" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1161.54" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="237.1" y="645" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="240.05" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="1059.2" y="421" width="0.8" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="1062.23" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::vector (50,505,050 samples, 0.16%)</title><rect x="802.2" y="533" width="1.9" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="805.23" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="915.9" y="613" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="918.94" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (10,101,010 samples, 0.03%)</title><rect x="924.7" y="469" width="0.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="927.66" y="479.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1111.5" y="277" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1114.54" y="287.5" ></text>
</g>
<g >
<title>cppjieba::Dag::~Dag (10,101,010 samples, 0.03%)</title><rect x="195.7" y="517" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="198.74" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (20,202,020 samples, 0.06%)</title><rect x="233.3" y="613" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="236.26" y="623.5" ></text>
</g>
<g >
<title>do_user_addr_fault (30,303,030 samples, 0.10%)</title><rect x="1078.6" y="149" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1081.56" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="238.2" y="581" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="241.19" y="591.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="101" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1127.04" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3,131,313,100 samples, 9.96%)</title><rect x="554.3" y="469" width="117.5" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="557.32" y="479.5" >std::_Hashtabl..</text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (20,202,020 samples, 0.06%)</title><rect x="127.5" y="549" width="0.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="130.51" y="559.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::LoadDict (323,232,320 samples, 1.03%)</title><rect x="1081.2" y="373" width="12.1" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1084.21" y="383.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::assign (10,101,010 samples, 0.03%)</title><rect x="287.5" y="629" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="290.47" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, false, true&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="243.5" y="693" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="246.50" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="1122.9" y="309" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="1125.91" y="319.5" ></text>
</g>
<g >
<title>std::ostream::put (10,101,010 samples, 0.03%)</title><rect x="25.5" y="741" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="28.54" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (282,828,280 samples, 0.90%)</title><rect x="542.6" y="453" width="10.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="545.57" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (141,414,140 samples, 0.45%)</title><rect x="261.3" y="629" width="5.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="264.31" y="639.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (90,909,090 samples, 0.29%)</title><rect x="1051.6" y="677" width="3.5" height="15.0" fill="rgb(240,161,38)" rx="2" ry="2" />
<text  x="1054.64" y="687.5" ></text>
</g>
<g >
<title>cppjieba::PreFilter::PreFilter (60,606,060 samples, 0.19%)</title><rect x="215.8" y="613" width="2.3" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="218.83" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="1004.3" y="565" width="0.3" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="1007.26" y="575.5" ></text>
</g>
<g >
<title>__fdget_pos (20,202,020 samples, 0.06%)</title><rect x="1159.3" y="677" width="0.8" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="1162.30" y="687.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="165.4" y="453" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="168.41" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (30,303,030 samples, 0.10%)</title><rect x="237.4" y="661" width="1.2" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="240.43" y="671.5" ></text>
</g>
<g >
<title>__ext4_journal_stop (50,505,050 samples, 0.16%)</title><rect x="44.5" y="549" width="1.9" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="47.49" y="559.5" ></text>
</g>
<g >
<title>std::__make_heap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="981.1" y="565" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="984.14" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (20,202,020 samples, 0.06%)</title><rect x="1059.2" y="405" width="0.8" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1062.23" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;unsigned int, true, false&gt;::_Node_const_iterator (30,303,030 samples, 0.10%)</title><rect x="862.9" y="501" width="1.1" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="865.88" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="1096.8" y="181" width="0.3" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1099.75" y="191.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::ParseDeep (90,909,090 samples, 0.29%)</title><rect x="65.3" y="565" width="3.5" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="68.34" y="575.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="349.3" y="69" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="352.25" y="79.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="1114.6" y="325" width="0.3" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1117.57" y="335.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_Head_base (10,101,010 samples, 0.03%)</title><rect x="362.5" y="325" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="365.52" y="335.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::capacity (10,101,010 samples, 0.03%)</title><rect x="340.5" y="181" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="343.54" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="1013.7" y="549" width="1.2" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1016.74" y="559.5" ></text>
</g>
<g >
<title>__mpn_mul_1 (10,101,010 samples, 0.03%)</title><rect x="1179.4" y="693" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1182.39" y="703.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned int const, WordWeight::WEIGHT&gt; (10,101,010 samples, 0.03%)</title><rect x="246.5" y="581" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="249.53" y="591.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::~set (30,303,030 samples, 0.10%)</title><rect x="295.4" y="581" width="1.2" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="298.43" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (121,212,120 samples, 0.39%)</title><rect x="110.8" y="645" width="4.6" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="113.83" y="655.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (10,101,010 samples, 0.03%)</title><rect x="47.9" y="501" width="0.4" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="50.91" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (30,303,030 samples, 0.10%)</title><rect x="637.7" y="373" width="1.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="640.72" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="490.6" y="485" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="493.64" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (40,404,040 samples, 0.13%)</title><rect x="293.9" y="661" width="1.5" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="296.91" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="1110.8" y="325" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1113.78" y="335.5" ></text>
</g>
<g >
<title>tinyxml2::XMLUtil::StringEqual (10,101,010 samples, 0.03%)</title><rect x="68.8" y="565" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="71.75" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_Vector_impl::_Vector_impl (40,404,040 samples, 0.13%)</title><rect x="802.2" y="501" width="1.5" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="805.23" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag*, cppjieba::Dag&gt; (20,202,020 samples, 0.06%)</title><rect x="680.9" y="469" width="0.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="683.93" y="479.5" ></text>
</g>
<g >
<title>cppjieba::Word::Word (20,202,020 samples, 0.06%)</title><rect x="198.8" y="581" width="0.7" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="201.77" y="591.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; (10,101,010 samples, 0.03%)</title><rect x="1129.0" y="341" width="0.4" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1131.97" y="351.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (20,202,020 samples, 0.06%)</title><rect x="1060.4" y="309" width="0.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1063.36" y="319.5" ></text>
</g>
<g >
<title>__do_munmap (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="645" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="1064.12" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="627.1" y="389" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="630.10" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (70,707,070 samples, 0.22%)</title><rect x="13.4" y="725" width="2.7" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="16.41" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,101,010 samples, 0.03%)</title><rect x="1056.2" y="261" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1059.19" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::max_size (20,202,020 samples, 0.06%)</title><rect x="483.8" y="421" width="0.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="486.82" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="282.2" y="629" width="0.3" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="285.16" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (212,121,210 samples, 0.67%)</title><rect x="354.9" y="357" width="8.0" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="357.94" y="367.5" ></text>
</g>
<g >
<title>std::IsIn&lt;unsigned int, std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt; &gt; (999,999,990 samples, 3.18%)</title><rect x="858.7" y="549" width="37.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="861.71" y="559.5" >std..</text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (20,202,020 samples, 0.06%)</title><rect x="1025.5" y="549" width="0.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1028.49" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (70,707,070 samples, 0.22%)</title><rect x="291.3" y="677" width="2.6" height="15.0" fill="rgb(243,175,41)" rx="2" ry="2" />
<text  x="294.26" y="687.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, double, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="351.2" y="357" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="354.15" y="367.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="181" width="0.3" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1090.65" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::operator[] (20,202,020 samples, 0.06%)</title><rect x="800.3" y="533" width="0.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="803.33" y="543.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="329.9" y="261" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="332.92" y="271.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.03%)</title><rect x="406.5" y="469" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="409.49" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="1130.5" y="325" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1133.49" y="335.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="1094.9" y="149" width="0.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1097.86" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::max_size (40,404,040 samples, 0.13%)</title><rect x="483.4" y="453" width="1.6" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="486.44" y="463.5" ></text>
</g>
<g >
<title>std::__allocated_ptr&lt;std::allocator&lt;std::_List_node&lt;WordWeight::WEIGHT&gt; &gt; &gt;::~__allocated_ptr (10,101,010 samples, 0.03%)</title><rect x="242.4" y="661" width="0.3" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="245.36" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::DictUnit&gt; &gt;::construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (60,606,060 samples, 0.19%)</title><rect x="1085.8" y="341" width="2.2" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1088.76" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="305.3" y="165" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="308.28" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;double*, unsigned long&gt; (40,404,040 samples, 0.13%)</title><rect x="469.0" y="453" width="1.6" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="472.04" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt;::operator-- (30,303,030 samples, 0.10%)</title><rect x="770.0" y="501" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="773.01" y="511.5" ></text>
</g>
<g >
<title>BuildWebPage (31,444,444,130 samples, 100.00%)</title><rect x="10.0" y="773" width="1180.0" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="13.00" y="783.5" >BuildWebPage</text>
</g>
<g >
<title>async_page_fault (30,303,030 samples, 0.10%)</title><rect x="1078.6" y="213" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1081.56" y="223.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;unsigned long*, unsigned long*, std::allocator&lt;unsigned long&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1042.9" y="549" width="0.8" height="15.0" fill="rgb(205,3,0)" rx="2" ry="2" />
<text  x="1045.93" y="559.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.03%)</title><rect x="345.8" y="133" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="348.84" y="143.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="337.5" y="213" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="340.50" y="223.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::DictTrie (1,434,343,420 samples, 4.56%)</title><rect x="296.9" y="405" width="53.9" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="299.95" y="415.5" >cppji..</text>
</g>
<g >
<title>unmap_vmas (10,101,010 samples, 0.03%)</title><rect x="314.8" y="181" width="0.3" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="317.76" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_bucket_index (40,404,040 samples, 0.13%)</title><rect x="228.3" y="661" width="1.6" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="231.34" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="324.6" y="293" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="327.62" y="303.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::Shrink (80,808,080 samples, 0.26%)</title><rect x="1111.2" y="373" width="3.0" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1114.16" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1078.9" y="117" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1081.94" y="127.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="163.1" y="437" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="166.14" y="447.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="133" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1094.07" y="143.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt;::construct&lt;limonp::LocalVector&lt;unsigned int&gt;, limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (40,404,040 samples, 0.13%)</title><rect x="1075.9" y="325" width="1.5" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1078.90" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (40,404,040 samples, 0.13%)</title><rect x="271.2" y="629" width="1.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="274.17" y="639.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::find (10,101,010 samples, 0.03%)</title><rect x="897.4" y="549" width="0.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="900.37" y="559.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (10,101,010 samples, 0.03%)</title><rect x="1102.8" y="229" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1105.82" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="350.0" y="341" width="0.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="353.01" y="351.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;::~pair (10,101,010 samples, 0.03%)</title><rect x="977.3" y="485" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="980.35" y="495.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="334.9" y="181" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="337.85" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (40,404,040 samples, 0.13%)</title><rect x="1065.7" y="245" width="1.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1068.67" y="255.5" ></text>
</g>
<g >
<title>std::partial_sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;, bool  (70,707,070 samples, 0.22%)</title><rect x="980.8" y="613" width="2.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="983.76" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;cppjieba::Dag*, cppjieba::Dag*, std::allocator&lt;cppjieba::Dag&gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="703.7" y="469" width="1.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="706.67" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 0.06%)</title><rect x="1035.7" y="549" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1038.72" y="559.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (20,202,020 samples, 0.06%)</title><rect x="1055.8" y="357" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1058.81" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (30,303,030 samples, 0.10%)</title><rect x="531.2" y="485" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="534.20" y="495.5" ></text>
</g>
<g >
<title>alloc_pages_vma (10,101,010 samples, 0.03%)</title><rect x="1113.1" y="101" width="0.3" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1116.05" y="111.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (20,202,020 samples, 0.06%)</title><rect x="485.0" y="453" width="0.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="487.96" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="488.7" y="485" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="491.75" y="495.5" ></text>
</g>
<g >
<title>std::forward&lt;WordWeight::WEIGHT&gt; (10,101,010 samples, 0.03%)</title><rect x="243.1" y="629" width="0.4" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="246.12" y="639.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (10,101,010 samples, 0.03%)</title><rect x="25.9" y="741" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="28.92" y="751.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (10,101,010 samples, 0.03%)</title><rect x="1158.2" y="645" width="0.3" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1161.16" y="655.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (60,606,060 samples, 0.19%)</title><rect x="339.8" y="277" width="2.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="342.78" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_equals (90,909,090 samples, 0.29%)</title><rect x="1015.6" y="549" width="3.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1018.63" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="210.1" y="501" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="213.14" y="511.5" ></text>
</g>
<g >
<title>__wake_up (20,202,020 samples, 0.06%)</title><rect x="45.3" y="517" width="0.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="48.25" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;int, double&gt; &gt;::_M_valptr (20,202,020 samples, 0.06%)</title><rect x="78.6" y="645" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="81.61" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1,030,303,020 samples, 3.28%)</title><rect x="632.4" y="437" width="38.7" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="635.41" y="447.5" >std..</text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (30,303,030 samples, 0.10%)</title><rect x="342.4" y="261" width="1.2" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="345.43" y="271.5" ></text>
</g>
<g >
<title>malloc_consolidate (232,323,230 samples, 0.74%)</title><rect x="1160.1" y="757" width="8.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1163.05" y="767.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::base (20,202,020 samples, 0.06%)</title><rect x="752.6" y="501" width="0.7" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="755.57" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (30,303,030 samples, 0.10%)</title><rect x="245.0" y="661" width="1.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="248.01" y="671.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;unsigned int&gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="880.7" y="421" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="883.69" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="304.5" y="229" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="307.53" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="314.4" y="357" width="0.7" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="317.38" y="367.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (40,404,040 samples, 0.13%)</title><rect x="1093.3" y="325" width="1.6" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="1096.34" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;::base (40,404,040 samples, 0.13%)</title><rect x="1047.5" y="629" width="1.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1050.48" y="639.5" ></text>
</g>
<g >
<title>__vfs_write (434,343,430 samples, 1.38%)</title><rect x="36.2" y="645" width="16.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="39.15" y="655.5" ></text>
</g>
<g >
<title>__do_page_fault (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="181" width="0.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1115.67" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_realloc_insert&lt;unsigned long const&amp;&gt; (171,717,170 samples, 0.55%)</title><rect x="1037.2" y="597" width="6.5" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1040.24" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Word*, std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt; &gt;::__normal_iterator (10,101,010 samples, 0.03%)</title><rect x="393.2" y="501" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="396.23" y="511.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="334.9" y="165" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="337.85" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (50,505,050 samples, 0.16%)</title><rect x="247.7" y="661" width="1.9" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="250.67" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned int&gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="212.4" y="469" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="215.42" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (10,101,010 samples, 0.03%)</title><rect x="196.9" y="533" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="199.87" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Identity::operator (20,202,020 samples, 0.06%)</title><rect x="888.7" y="453" width="0.7" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="891.65" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::begin (10,101,010 samples, 0.03%)</title><rect x="1126.7" y="325" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1129.70" y="335.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::reverse_iterator (20,202,020 samples, 0.06%)</title><rect x="783.7" y="501" width="0.7" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="786.65" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_do_relocate (20,202,020 samples, 0.06%)</title><rect x="1042.9" y="565" width="0.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1045.93" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1105.8" y="277" width="1.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1108.85" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned long&gt;::~allocator (10,101,010 samples, 0.03%)</title><rect x="490.3" y="469" width="0.3" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="493.26" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SplitChinese&gt; &gt;::construct&lt;SplitChinese, char const  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="629" width="64.0" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1065.26" y="639.5" >std::al..</text>
</g>
<g >
<title>add_to_page_cache_lru (10,101,010 samples, 0.03%)</title><rect x="43.7" y="517" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="46.74" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (10,101,010 samples, 0.03%)</title><rect x="1114.9" y="309" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1117.95" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (10,101,010 samples, 0.03%)</title><rect x="983.0" y="485" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="986.04" y="495.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="332.6" y="133" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="335.58" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (454,545,450 samples, 1.45%)</title><rect x="872.4" y="485" width="17.0" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="875.35" y="495.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (60,606,060 samples, 0.19%)</title><rect x="215.8" y="597" width="2.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="218.83" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="128.3" y="533" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="131.27" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (30,303,030 samples, 0.10%)</title><rect x="1029.3" y="501" width="1.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1032.28" y="511.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::Init (1,393,939,380 samples, 4.43%)</title><rect x="1062.3" y="389" width="52.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1065.26" y="399.5" >cppji..</text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::~LocalVector (20,202,020 samples, 0.06%)</title><rect x="1080.5" y="277" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1083.45" y="287.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (10,101,010 samples, 0.03%)</title><rect x="350.8" y="341" width="0.4" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="353.77" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::DictUnit&gt; &gt;::construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (70,707,070 samples, 0.22%)</title><rect x="322.3" y="341" width="2.7" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="325.34" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="186.6" y="533" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="189.64" y="543.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="1035.3" y="597" width="1.2" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="1038.35" y="607.5" ></text>
</g>
<g >
<title>unmap_single_vma (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="629" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1161.54" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::push_back (191,919,190 samples, 0.61%)</title><rect x="1036.5" y="613" width="7.2" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1039.48" y="623.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::size (80,808,080 samples, 0.26%)</title><rect x="190.8" y="597" width="3.0" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="193.81" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (20,202,020 samples, 0.06%)</title><rect x="622.6" y="357" width="0.7" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="625.55" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;::__normal_iterator (10,101,010 samples, 0.03%)</title><rect x="1031.2" y="517" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1034.18" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_right (10,101,010 samples, 0.03%)</title><rect x="980.4" y="517" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="983.38" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (10,101,010 samples, 0.03%)</title><rect x="386.8" y="533" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="389.78" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,101,010 samples, 0.03%)</title><rect x="1058.5" y="293" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1061.47" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__alloc_traits&lt;std::allocator&lt;unsigned long&gt;, unsigned long&gt;::_S_select_on_copy (10,101,010 samples, 0.03%)</title><rect x="1023.6" y="549" width="0.4" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1026.59" y="559.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag*&gt; (10,101,010 samples, 0.03%)</title><rect x="195.7" y="565" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="198.74" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (20,202,020 samples, 0.06%)</title><rect x="1057.3" y="309" width="0.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1060.33" y="319.5" ></text>
</g>
<g >
<title>do_user_addr_fault (90,909,090 samples, 0.29%)</title><rect x="1154.7" y="677" width="3.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1157.75" y="687.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::~vector (151,515,150 samples, 0.48%)</title><rect x="804.1" y="533" width="5.7" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="807.12" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="260.6" y="613" width="0.7" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="263.56" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="325.0" y="325" width="0.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="328.00" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned int&gt;, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="461.1" y="405" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="464.08" y="415.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (10,101,010 samples, 0.03%)</title><rect x="354.2" y="357" width="0.4" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="357.18" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="234.4" y="661" width="0.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="237.40" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (20,202,020 samples, 0.06%)</title><rect x="86.9" y="677" width="0.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="89.95" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="268.9" y="661" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="271.89" y="671.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::Word&gt; &gt;::construct&lt;cppjieba::Word, cppjieba::Word&gt; (90,909,090 samples, 0.29%)</title><rect x="389.1" y="517" width="3.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="392.06" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="164.3" y="437" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="167.28" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="926.9" y="485" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="929.94" y="495.5" ></text>
</g>
<g >
<title>async_page_fault (20,202,020 samples, 0.06%)</title><rect x="345.8" y="245" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="348.84" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_realloc_insert&lt;cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="835.2" y="533" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="838.20" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::push_back (80,808,080 samples, 0.26%)</title><rect x="201.0" y="597" width="3.1" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="204.04" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="128.3" y="565" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="131.27" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_node_allocator (10,101,010 samples, 0.03%)</title><rect x="1132.0" y="325" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1135.00" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="87.3" y="629" width="0.4" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="90.33" y="639.5" ></text>
</g>
<g >
<title>cppjieba::FullSegment::Cut (2,111,111,090 samples, 6.71%)</title><rect x="118.4" y="613" width="79.2" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="121.41" y="623.5" >cppjieba:..</text>
</g>
<g >
<title>tinyxml2::XMLUtil::SkipWhiteSpace (10,101,010 samples, 0.03%)</title><rect x="65.3" y="533" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="68.34" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_bucket_index (40,404,040 samples, 0.13%)</title><rect x="1005.8" y="581" width="1.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1008.78" y="591.5" ></text>
</g>
<g >
<title>cppjieba::MixSegment::Cut (14,313,131,170 samples, 45.52%)</title><rect x="372.4" y="581" width="537.1" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="375.38" y="591.5" >cppjieba::MixSegment::Cut</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="631.7" y="437" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="634.65" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="336.4" y="197" width="0.3" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="339.37" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (838,383,830 samples, 2.67%)</title><rect x="431.1" y="453" width="31.5" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="434.13" y="463.5" >st..</text>
</g>
<g >
<title>async_page_fault (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="213" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1092.55" y="223.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="926.9" y="469" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="929.94" y="479.5" ></text>
</g>
<g >
<title>simhash::Simhasher::~Simhasher (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="469" width="5.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1058.81" y="479.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="607.8" y="437" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="610.77" y="447.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="1112.3" y="245" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1115.29" y="255.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="309.1" y="245" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="312.07" y="255.5" ></text>
</g>
<g >
<title>vfs_write (454,545,450 samples, 1.45%)</title><rect x="35.4" y="661" width="17.1" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="38.40" y="671.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.03%)</title><rect x="206.7" y="453" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="209.73" y="463.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_drop_node (10,101,010 samples, 0.03%)</title><rect x="295.4" y="453" width="0.4" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="298.43" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="446.7" y="373" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="449.67" y="383.5" ></text>
</g>
<g >
<title>unmap_vmas (10,101,010 samples, 0.03%)</title><rect x="350.4" y="181" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="353.39" y="191.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;void, true&gt; (10,101,010 samples, 0.03%)</title><rect x="983.4" y="613" width="0.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="986.41" y="623.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (50,505,050 samples, 0.16%)</title><rect x="1078.6" y="245" width="1.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1081.56" y="255.5" ></text>
</g>
<g >
<title>std::sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, bool  (404,040,400 samples, 1.28%)</title><rect x="1093.3" y="357" width="15.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1096.34" y="367.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (10,101,010 samples, 0.03%)</title><rect x="334.5" y="181" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="337.47" y="191.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="200.7" y="565" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="203.66" y="575.5" ></text>
</g>
<g >
<title>iov_iter_advance (10,101,010 samples, 0.03%)</title><rect x="51.3" y="565" width="0.4" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="54.32" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::unordered_map (20,202,020 samples, 0.06%)</title><rect x="1075.1" y="309" width="0.8" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="1078.15" y="319.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="825.3" y="517" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="828.35" y="527.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Word*, cppjieba::Word&gt; (20,202,020 samples, 0.06%)</title><rect x="220.8" y="613" width="0.7" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="223.75" y="623.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="1029.3" y="437" width="0.7" height="15.0" fill="rgb(240,163,38)" rx="2" ry="2" />
<text  x="1032.28" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="278.0" y="597" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="280.99" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="245" width="0.7" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1115.67" y="255.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, WordWeight::IDF, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt; &gt;::find (50,505,050 samples, 0.16%)</title><rect x="244.3" y="693" width="1.9" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="247.26" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_get_insert_unique_pos (111,111,110 samples, 0.35%)</title><rect x="77.9" y="677" width="4.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="80.85" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="358.0" y="293" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="360.97" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (20,202,020 samples, 0.06%)</title><rect x="915.2" y="597" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="918.18" y="607.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (20,202,020 samples, 0.06%)</title><rect x="361.0" y="277" width="0.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="364.01" y="287.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (30,303,030 samples, 0.10%)</title><rect x="14.2" y="549" width="1.1" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="17.17" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (20,202,020 samples, 0.06%)</title><rect x="352.3" y="357" width="0.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="355.29" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_realloc_insert&lt;cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="197.3" y="581" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="200.25" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator= (30,303,030 samples, 0.10%)</title><rect x="982.3" y="517" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="985.28" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="993.3" y="533" width="1.1" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="996.27" y="543.5" ></text>
</g>
<g >
<title>munmap (10,101,010 samples, 0.03%)</title><rect x="314.8" y="293" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="317.76" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="302.6" y="229" width="0.4" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="305.63" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="251.8" y="661" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="254.84" y="671.5" ></text>
</g>
<g >
<title>cppjieba::HMMSegment::Viterbi (2,111,111,090 samples, 6.71%)</title><rect x="406.9" y="517" width="79.2" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="409.87" y="527.5" >cppjieba:..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::WordRange&gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="835.2" y="421" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="838.20" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_allocate (10,101,010 samples, 0.03%)</title><rect x="467.5" y="453" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="470.52" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="1056.6" y="357" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1059.57" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cppjieba::DictUnit const*, cppjieba::DictUnit*&gt; (90,909,090 samples, 0.29%)</title><rect x="325.8" y="277" width="3.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="328.75" y="287.5" ></text>
</g>
<g >
<title>cppjieba::Dag::Dag (141,414,140 samples, 0.45%)</title><rect x="179.1" y="469" width="5.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="182.06" y="479.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="707.8" y="437" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="710.84" y="447.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::~_Vector_base (40,404,040 samples, 0.13%)</title><rect x="808.3" y="517" width="1.5" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="811.29" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_S_key (10,101,010 samples, 0.03%)</title><rect x="83.2" y="645" width="0.3" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="86.16" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::Word&gt;::construct&lt;cppjieba::Word, cppjieba::Word&gt; (20,202,020 samples, 0.06%)</title><rect x="201.8" y="549" width="0.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="204.80" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1036.9" y="581" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1039.86" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="710.5" y="517" width="0.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="713.49" y="527.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="262.8" y="565" width="0.8" height="15.0" fill="rgb(211,29,6)" rx="2" ry="2" />
<text  x="265.83" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="978.1" y="469" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="981.11" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="175.3" y="549" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="178.27" y="559.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_float&lt;double&gt; (10,101,010 samples, 0.03%)</title><rect x="24.8" y="693" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="27.78" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_valptr (20,202,020 samples, 0.06%)</title><rect x="452.4" y="389" width="0.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="455.36" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (60,606,060 samples, 0.19%)</title><rect x="291.6" y="517" width="2.3" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="294.64" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="892.1" y="501" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="895.06" y="511.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1105.5" y="213" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1108.47" y="223.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::Dag*&gt; (80,808,080 samples, 0.26%)</title><rect x="804.5" y="485" width="3.0" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="807.50" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1117.2" y="373" width="0.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1120.22" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (70,707,070 samples, 0.22%)</title><rect x="211.3" y="517" width="2.6" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="214.28" y="527.5" ></text>
</g>
<g >
<title>cppjieba::GetWordsFromWordRanges (181,818,180 samples, 0.58%)</title><rect x="197.6" y="613" width="6.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="200.63" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,101,010 samples, 0.03%)</title><rect x="981.9" y="469" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="984.90" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="419.0" y="453" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="422.00" y="463.5" ></text>
</g>
<g >
<title>std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="24.0" y="709" width="0.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="27.03" y="719.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;void, true&gt; (10,101,010 samples, 0.03%)</title><rect x="977.0" y="597" width="0.3" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="979.97" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="295.4" y="613" width="1.2" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="298.43" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt;::base (10,101,010 samples, 0.03%)</title><rect x="749.2" y="485" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="752.16" y="495.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="1105.8" y="293" width="2.7" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1108.85" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (111,111,110 samples, 0.35%)</title><rect x="923.9" y="517" width="4.2" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="926.90" y="527.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="1111.2" y="309" width="2.2" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="1114.16" y="319.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10,101,010 samples, 0.03%)</title><rect x="1079.3" y="85" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1082.32" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="464.1" y="453" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="467.11" y="463.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (10,101,010 samples, 0.03%)</title><rect x="328.4" y="85" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="331.41" y="95.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="181" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1089.52" y="191.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (40,404,040 samples, 0.13%)</title><rect x="1111.9" y="261" width="1.5" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1114.91" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.03%)</title><rect x="1069.5" y="245" width="0.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1072.46" y="255.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_erase (80,808,080 samples, 0.26%)</title><rect x="977.7" y="549" width="3.1" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="980.73" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, unsigned int, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (80,808,080 samples, 0.26%)</title><rect x="884.9" y="453" width="3.0" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="887.86" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1056.2" y="309" width="0.4" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1059.19" y="319.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1112.3" y="229" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1115.29" y="239.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;*&gt;::pointer_to (10,101,010 samples, 0.03%)</title><rect x="1130.1" y="245" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1133.11" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="984.2" y="549" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="987.17" y="559.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (10,101,010 samples, 0.03%)</title><rect x="1002.4" y="501" width="0.3" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1005.37" y="511.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;int*, unsigned long, int&gt; (20,202,020 samples, 0.06%)</title><rect x="477.0" y="405" width="0.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="480.00" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_get_Tp_allocator (10,101,010 samples, 0.03%)</title><rect x="465.6" y="485" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="468.62" y="495.5" ></text>
</g>
<g >
<title>do_page_fault (20,202,020 samples, 0.06%)</title><rect x="345.8" y="213" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="348.84" y="223.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="328.8" y="229" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="331.79" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="276.1" y="597" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="279.10" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (50,505,050 samples, 0.16%)</title><rect x="820.4" y="469" width="1.9" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="823.42" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::vector (10,101,010 samples, 0.03%)</title><rect x="1045.6" y="677" width="0.4" height="15.0" fill="rgb(239,156,37)" rx="2" ry="2" />
<text  x="1048.58" y="687.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned long, std::hash&lt;unsigned long&gt;, std::equal_to&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (10,101,010 samples, 0.03%)</title><rect x="1055.1" y="709" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1058.06" y="719.5" ></text>
</g>
<g >
<title>cppjieba::Trie::InsertNode (313,131,310 samples, 1.00%)</title><rect x="1064.2" y="325" width="11.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="1067.15" y="335.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;double&gt; (20,202,020 samples, 0.06%)</title><rect x="24.4" y="709" width="0.8" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="27.40" y="719.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::~DictUnit (10,101,010 samples, 0.03%)</title><rect x="1096.4" y="133" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1099.37" y="143.5" ></text>
</g>
<g >
<title>cppjieba::Trie::Trie (303,030,300 samples, 0.96%)</title><rect x="298.5" y="357" width="11.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="301.46" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="1042.5" y="565" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1045.55" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, false, true&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="268.5" y="661" width="0.4" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="271.52" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (10,101,010 samples, 0.03%)</title><rect x="283.3" y="629" width="0.4" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="286.30" y="639.5" ></text>
</g>
<g >
<title>std::__relocate_a_1&lt;cppjieba::WordRange*, cppjieba::WordRange*, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="197.3" y="517" width="0.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="200.25" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="164.7" y="469" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="167.65" y="479.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="661" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="671.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (10,101,010 samples, 0.03%)</title><rect x="1158.2" y="629" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1161.16" y="639.5" ></text>
</g>
<g >
<title>iov_iter_init (10,101,010 samples, 0.03%)</title><rect x="36.5" y="629" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="39.53" y="639.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (10,101,010 samples, 0.03%)</title><rect x="268.1" y="629" width="0.4" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="271.14" y="639.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;cppjieba::WordRange, cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="197.3" y="501" width="0.3" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="200.25" y="511.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (10,101,010 samples, 0.03%)</title><rect x="324.2" y="117" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="327.24" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="840.9" y="517" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="843.89" y="527.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="517" width="64.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1065.26" y="527.5" >std::__..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (131,313,130 samples, 0.42%)</title><rect x="923.5" y="533" width="5.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="926.52" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="930.3" y="533" width="0.4" height="15.0" fill="rgb(227,104,24)" rx="2" ry="2" />
<text  x="933.35" y="543.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="834.8" y="533" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="837.82" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (141,414,140 samples, 0.45%)</title><rect x="878.0" y="453" width="5.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="881.04" y="463.5" ></text>
</g>
<g >
<title>std::fill_n&lt;unsigned long*, unsigned long, unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="482.3" y="421" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="485.30" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (30,303,030 samples, 0.10%)</title><rect x="1060.0" y="389" width="1.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1062.98" y="399.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="311.7" y="309" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="314.73" y="319.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::MakeNodeInfo (60,606,060 samples, 0.19%)</title><rect x="315.5" y="357" width="2.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="318.52" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~vector (40,404,040 samples, 0.13%)</title><rect x="1033.1" y="501" width="1.5" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="1036.07" y="511.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="1118.0" y="357" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1120.98" y="367.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;simhash::Simhasher&gt;::shared_ptr&lt;std::allocator&lt;simhash::Simhasher&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="533" width="66.0" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="299.95" y="543.5" >std::sh..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1,141,414,130 samples, 3.63%)</title><rect x="422.4" y="469" width="42.8" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="425.41" y="479.5" >std:..</text>
</g>
<g >
<title>__x64_sys_writev (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="709" width="0.8" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="1192.24" y="719.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="199.9" y="581" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="202.91" y="591.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="326.5" y="165" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="329.51" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (50,505,050 samples, 0.16%)</title><rect x="1145.3" y="661" width="1.9" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1148.27" y="671.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (60,606,060 samples, 0.19%)</title><rect x="315.5" y="341" width="2.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="318.52" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (111,111,110 samples, 0.35%)</title><rect x="866.3" y="485" width="4.2" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="869.29" y="495.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="213" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1094.07" y="223.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::DictUnit, cppjieba::DictUnit&amp;&gt; (40,404,040 samples, 0.13%)</title><rect x="1111.9" y="277" width="1.5" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1114.91" y="287.5" ></text>
</g>
<g >
<title>WebPageRemove::buildNewDict (18,464,646,280 samples, 58.72%)</title><rect x="362.9" y="725" width="692.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="365.90" y="735.5" >WebPageRemove::buildNewDict</text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::size (10,101,010 samples, 0.03%)</title><rect x="1080.1" y="213" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1083.07" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="299.6" y="277" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="302.60" y="287.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (20,202,020 samples, 0.06%)</title><rect x="336.0" y="213" width="0.7" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="338.99" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::vector&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, void&gt; (60,606,060 samples, 0.19%)</title><rect x="347.7" y="357" width="2.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="350.74" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="289.7" y="709" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="292.74" y="719.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (10,101,010 samples, 0.03%)</title><rect x="51.7" y="549" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="54.70" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="307.6" y="261" width="0.3" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="310.56" y="271.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::~_Rb_tree (90,909,090 samples, 0.29%)</title><rect x="977.3" y="597" width="3.5" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="980.35" y="607.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="1087.3" y="245" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1090.28" y="255.5" ></text>
</g>
<g >
<title>writev (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="757" width="0.8" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="1192.24" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt;, true&gt;::_Hashtable_ebo_helper (10,101,010 samples, 0.03%)</title><rect x="1075.5" y="261" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1078.53" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (20,202,020 samples, 0.06%)</title><rect x="328.0" y="229" width="0.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="331.03" y="239.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, 0ul&gt; (111,111,110 samples, 0.35%)</title><rect x="923.9" y="501" width="4.2" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="926.90" y="511.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="237.4" y="597" width="1.2" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="240.43" y="607.5" ></text>
</g>
<g >
<title>mem_cgroup_commit_charge (10,101,010 samples, 0.03%)</title><rect x="1090.3" y="85" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1093.31" y="95.5" ></text>
</g>
<g >
<title>cppjieba::PreFilter::Next (10,101,010 samples, 0.03%)</title><rect x="220.0" y="629" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="223.00" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (70,707,070 samples, 0.22%)</title><rect x="291.3" y="661" width="2.6" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="294.26" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_M_v (20,202,020 samples, 0.06%)</title><rect x="281.8" y="661" width="0.7" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="284.78" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (50,505,050 samples, 0.16%)</title><rect x="925.0" y="453" width="1.9" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="928.04" y="463.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::~LocalVector (20,202,020 samples, 0.06%)</title><rect x="1077.8" y="261" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1080.80" y="271.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="101" width="0.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1090.65" y="111.5" ></text>
</g>
<g >
<title>std::__fill_n_a&lt;unsigned long*, unsigned long, unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="482.3" y="405" width="0.8" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="485.30" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::_M_realloc_insert&lt;cppjieba::DictUnit const&amp;&gt; (121,212,120 samples, 0.39%)</title><rect x="1088.0" y="341" width="4.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1091.03" y="351.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (10,101,010 samples, 0.03%)</title><rect x="25.2" y="693" width="0.3" height="15.0" fill="rgb(223,82,19)" rx="2" ry="2" />
<text  x="28.16" y="703.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;false&gt;::__uninit_default_n&lt;cppjieba::Dag*, unsigned long&gt; (555,555,550 samples, 1.77%)</title><rect x="682.8" y="437" width="20.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="685.82" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (20,202,020 samples, 0.06%)</title><rect x="1175.6" y="757" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="1178.60" y="767.5" ></text>
</g>
<g >
<title>cppjieba::HMMModel::HMMModel (30,303,030 samples, 0.10%)</title><rect x="1114.6" y="405" width="1.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="1117.57" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt;::resize (70,707,070 samples, 0.22%)</title><rect x="1031.9" y="613" width="2.7" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="1034.93" y="623.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.03%)</title><rect x="1158.2" y="597" width="0.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1161.16" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="227.2" y="677" width="0.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="230.20" y="687.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="930.7" y="565" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="933.73" y="575.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (20,202,020 samples, 0.06%)</title><rect x="1100.9" y="181" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1103.92" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (10,101,010 samples, 0.03%)</title><rect x="1127.1" y="261" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1130.08" y="271.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::init_ (60,606,060 samples, 0.19%)</title><rect x="698.4" y="373" width="2.2" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="701.36" y="383.5" ></text>
</g>
<g >
<title>SplitChinese::rinse (10,101,010 samples, 0.03%)</title><rect x="225.3" y="613" width="0.4" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="228.30" y="623.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::capacity (10,101,010 samples, 0.03%)</title><rect x="1091.4" y="197" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1094.45" y="207.5" ></text>
</g>
<g >
<title>std::pointer_traits&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;*&gt;::pointer_to (10,101,010 samples, 0.03%)</title><rect x="1057.3" y="261" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1060.33" y="271.5" ></text>
</g>
<g >
<title>str_to_mpn.isra.0 (10,101,010 samples, 0.03%)</title><rect x="1179.8" y="757" width="0.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1182.77" y="767.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (10,101,010 samples, 0.03%)</title><rect x="1116.8" y="357" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1119.84" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, double&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned int const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1115.3" y="309" width="0.4" height="15.0" fill="rgb(251,213,50)" rx="2" ry="2" />
<text  x="1118.33" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned long*&gt; (10,101,010 samples, 0.03%)</title><rect x="489.5" y="485" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="492.51" y="495.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (10,101,010 samples, 0.03%)</title><rect x="16.1" y="741" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="19.06" y="751.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (20,202,020 samples, 0.06%)</title><rect x="345.8" y="261" width="0.8" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="348.84" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (272,727,270 samples, 0.87%)</title><rect x="163.9" y="501" width="10.2" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="166.90" y="511.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt;::pair&lt;unsigned long&amp;, true&gt; (20,202,020 samples, 0.06%)</title><rect x="130.2" y="565" width="0.7" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="133.16" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="425.1" y="421" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="428.07" y="431.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="117" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1094.07" y="127.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (30,303,030 samples, 0.10%)</title><rect x="1088.0" y="309" width="1.2" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1091.03" y="319.5" ></text>
</g>
<g >
<title>do_user_addr_fault (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="181" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1111.50" y="191.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="11.5" y="725" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="14.52" y="735.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::find (3,838,383,800 samples, 12.21%)</title><rect x="532.3" y="501" width="144.1" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="535.34" y="511.5" >std::unordered_map..</text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt; &gt;::_S_right (10,101,010 samples, 0.03%)</title><rect x="296.6" y="645" width="0.3" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="299.57" y="655.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="319.7" y="357" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="322.69" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1080.5" y="341" width="0.7" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1083.45" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_max_size (40,404,040 samples, 0.13%)</title><rect x="483.4" y="437" width="1.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="486.44" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="304.9" y="229" width="0.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="307.91" y="239.5" ></text>
</g>
<g >
<title>std::default_delete&lt;cppjieba::Jieba&gt;::operator (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="453" width="5.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1129.70" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::push_back (10,101,010 samples, 0.03%)</title><rect x="909.1" y="565" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="912.12" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char const&gt; (10,101,010 samples, 0.03%)</title><rect x="386.4" y="517" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="389.40" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (202,020,200 samples, 0.64%)</title><rect x="228.0" y="677" width="7.5" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="230.96" y="687.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;JiebaSplitCn&gt;::destroy&lt;JiebaSplitCn&gt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="501" width="5.7" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="1129.70" y="511.5" ></text>
</g>
<g >
<title>unmap_page_range (10,101,010 samples, 0.03%)</title><rect x="350.4" y="149" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="353.39" y="159.5" ></text>
</g>
<g >
<title>async_page_fault (30,303,030 samples, 0.10%)</title><rect x="348.9" y="229" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="351.88" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="1055.8" y="341" width="0.4" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1058.81" y="351.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit const*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="344.7" y="325" width="2.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="347.71" y="335.5" ></text>
</g>
<g >
<title>__do_munmap (10,101,010 samples, 0.03%)</title><rect x="350.4" y="213" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="353.39" y="223.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::LocalVector (30,303,030 samples, 0.10%)</title><rect x="702.2" y="405" width="1.1" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="705.16" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="1101.7" y="181" width="0.7" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1104.68" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::~vector (40,404,040 samples, 0.13%)</title><rect x="195.7" y="597" width="1.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="198.74" y="607.5" ></text>
</g>
<g >
<title>__do_page_fault (20,202,020 samples, 0.06%)</title><rect x="345.8" y="197" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="348.84" y="207.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned long&gt;::~allocator (10,101,010 samples, 0.03%)</title><rect x="1030.4" y="533" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="1033.42" y="543.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::insert (191,919,190 samples, 0.61%)</title><rect x="77.9" y="709" width="7.2" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="80.85" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (141,414,140 samples, 0.45%)</title><rect x="865.9" y="501" width="5.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="868.91" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, true&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="268.5" y="645" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="271.52" y="655.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1125.6" y="325" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1128.56" y="335.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (40,404,040 samples, 0.13%)</title><rect x="1075.9" y="309" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1078.90" y="319.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="328.4" y="101" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="331.41" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned int&gt;::_M_v (20,202,020 samples, 0.06%)</title><rect x="883.3" y="453" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="886.34" y="463.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;cppjieba::DictUnit const*, cppjieba::DictUnit*&gt; (90,909,090 samples, 0.29%)</title><rect x="1089.2" y="293" width="3.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1092.17" y="303.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="324.2" y="149" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="327.24" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="461.5" y="405" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="464.46" y="415.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="113.1" y="597" width="1.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="116.10" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::operator[] (60,606,060 samples, 0.19%)</title><rect x="828.8" y="549" width="2.2" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="831.76" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="339.8" y="261" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="342.78" y="271.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::LocalVector (90,909,090 samples, 0.29%)</title><rect x="181.0" y="453" width="3.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="183.95" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt;::operator= (50,505,050 samples, 0.16%)</title><rect x="515.3" y="485" width="1.9" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="518.28" y="495.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="197" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1089.90" y="207.5" ></text>
</g>
<g >
<title>pagecache_get_page (20,202,020 samples, 0.06%)</title><rect x="15.3" y="565" width="0.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="18.31" y="575.5" ></text>
</g>
<g >
<title>tinyxml2::XMLDocument::Parse (101,010,100 samples, 0.32%)</title><rect x="65.3" y="677" width="3.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="68.34" y="687.5" ></text>
</g>
<g >
<title>__vfprintf_internal (90,909,090 samples, 0.29%)</title><rect x="1176.4" y="725" width="3.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1179.35" y="735.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="360.6" y="293" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="363.63" y="303.5" ></text>
</g>
<g >
<title>simhash::Simhasher::extract (18,171,716,990 samples, 57.79%)</title><rect x="363.3" y="661" width="681.9" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="366.28" y="671.5" >simhash::Simhasher::extract</text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="221.5" y="645" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="224.51" y="655.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="391.3" y="453" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="394.33" y="463.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="290.5" y="645" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="293.50" y="655.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, cppjieba::TrieNode*&gt; (50,505,050 samples, 0.16%)</title><rect x="627.9" y="389" width="1.9" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="630.86" y="399.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="328.4" y="133" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="331.41" y="143.5" ></text>
</g>
<g >
<title>ext4_da_write_end (10,101,010 samples, 0.03%)</title><rect x="37.7" y="581" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="40.67" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="553.2" y="453" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="556.19" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (20,202,020 samples, 0.06%)</title><rect x="518.7" y="485" width="0.8" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="521.69" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (10,101,010 samples, 0.03%)</title><rect x="106.3" y="629" width="0.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="109.28" y="639.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="293.9" y="613" width="1.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="296.91" y="623.5" ></text>
</g>
<g >
<title>tinyxml2::XMLDocument::Identify (10,101,010 samples, 0.03%)</title><rect x="65.3" y="549" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="68.34" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (60,606,060 samples, 0.19%)</title><rect x="889.8" y="501" width="2.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="892.79" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1083.9" y="325" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1086.86" y="335.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (262,626,260 samples, 0.84%)</title><rect x="1094.9" y="293" width="9.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="303.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (20,202,020 samples, 0.06%)</title><rect x="86.9" y="709" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="89.95" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;unsigned int, false&gt;::_Node_iterator_base (30,303,030 samples, 0.10%)</title><rect x="822.3" y="437" width="1.2" height="15.0" fill="rgb(212,33,8)" rx="2" ry="2" />
<text  x="825.32" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::_M_deallocate_node (10,101,010 samples, 0.03%)</title><rect x="293.2" y="501" width="0.3" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="296.15" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_node (40,404,040 samples, 0.13%)</title><rect x="1130.9" y="341" width="1.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1133.87" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,202,020 samples, 0.06%)</title><rect x="244.3" y="629" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="247.26" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (20,202,020 samples, 0.06%)</title><rect x="544.1" y="437" width="0.7" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="547.09" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, true&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="234.4" y="645" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="237.40" y="655.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (50,505,050 samples, 0.16%)</title><rect x="1081.6" y="341" width="1.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1084.59" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (20,202,020 samples, 0.06%)</title><rect x="1159.3" y="741" width="0.8" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1162.30" y="751.5" ></text>
</g>
<g >
<title>unmap_page_range (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="613" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1161.54" y="623.5" ></text>
</g>
<g >
<title>cppjieba::Word::~Word (10,101,010 samples, 0.03%)</title><rect x="218.1" y="613" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="221.10" y="623.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned long&gt;::~allocator (10,101,010 samples, 0.03%)</title><rect x="983.0" y="437" width="0.4" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="986.04" y="447.5" ></text>
</g>
<g >
<title>std::allocator&lt;unsigned long&gt;::allocator (10,101,010 samples, 0.03%)</title><rect x="1026.6" y="517" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="1029.63" y="527.5" ></text>
</g>
<g >
<title>std::__distance&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="200.7" y="549" width="0.3" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="203.66" y="559.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1096.0" y="149" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1098.99" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="300.4" y="229" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="303.36" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.03%)</title><rect x="1007.3" y="581" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1010.30" y="591.5" ></text>
</g>
<g >
<title>__ext4_handle_dirty_metadata (10,101,010 samples, 0.03%)</title><rect x="49.4" y="453" width="0.4" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="52.42" y="463.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1097.9" y="117" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1100.89" y="127.5" ></text>
</g>
<g >
<title>std::IsIn&lt;unsigned int, std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt; &gt; (282,828,280 samples, 0.90%)</title><rect x="204.8" y="597" width="10.6" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="207.83" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::insert&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (151,515,150 samples, 0.48%)</title><rect x="1069.5" y="309" width="5.6" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1072.46" y="319.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::Word (60,606,060 samples, 0.19%)</title><rect x="924.7" y="485" width="2.2" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="927.66" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (20,202,020 samples, 0.06%)</title><rect x="353.4" y="325" width="0.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="356.42" y="335.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="391.3" y="469" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="394.33" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="1030.8" y="533" width="0.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1033.80" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="1080.5" y="357" width="0.7" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="1083.45" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1074.8" y="261" width="0.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1077.77" y="271.5" ></text>
</g>
<g >
<title>SplitChinese::rinse (121,212,120 samples, 0.39%)</title><rect x="221.5" y="677" width="4.6" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="224.51" y="687.5" ></text>
</g>
<g >
<title>[BuildWebPage] (20,202,020 samples, 0.06%)</title><rect x="378.1" y="533" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="381.06" y="543.5" ></text>
</g>
<g >
<title>do_user_addr_fault (60,606,060 samples, 0.19%)</title><rect x="1144.9" y="677" width="2.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1147.89" y="687.5" ></text>
</g>
<g >
<title>tinyxml2::XMLElement::ParseDeep (101,010,100 samples, 0.32%)</title><rect x="65.3" y="645" width="3.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="68.34" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="357.6" y="309" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="360.59" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::reserve (212,121,210 samples, 0.67%)</title><rect x="835.6" y="549" width="7.9" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="838.58" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (30,303,030 samples, 0.10%)</title><rect x="358.4" y="309" width="1.1" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="361.35" y="319.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::FirstChildElement (10,101,010 samples, 0.03%)</title><rect x="71.4" y="693" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="74.41" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="137.4" y="517" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="140.36" y="527.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (50,505,050 samples, 0.16%)</title><rect x="1096.8" y="197" width="1.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1099.75" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (30,303,030 samples, 0.10%)</title><rect x="1060.0" y="405" width="1.1" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1062.98" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="301.9" y="197" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="304.87" y="207.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="1102.8" y="245" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1105.82" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="304.5" y="245" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="307.53" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;::_M_put_node (10,101,010 samples, 0.03%)</title><rect x="295.0" y="517" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="298.05" y="527.5" ></text>
</g>
<g >
<title>cppjieba::HMMModel::HMMModel (20,202,020 samples, 0.06%)</title><rect x="350.8" y="405" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="353.77" y="415.5" ></text>
</g>
<g >
<title>do_page_fault (20,202,020 samples, 0.06%)</title><rect x="1109.6" y="213" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1112.64" y="223.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="165" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1111.50" y="175.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;cppjieba::Dag*, unsigned long, cppjieba::Dag&gt; (575,757,570 samples, 1.83%)</title><rect x="682.1" y="469" width="21.6" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="685.07" y="479.5" >s..</text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_Vector_impl_data::_Vector_impl_data (40,404,040 samples, 0.13%)</title><rect x="802.2" y="485" width="1.5" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="805.23" y="495.5" ></text>
</g>
<g >
<title>pagecache_get_page (40,404,040 samples, 0.13%)</title><rect x="43.0" y="533" width="1.5" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="45.98" y="543.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.03%)</title><rect x="249.2" y="613" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="252.18" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="325.0" y="309" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="328.00" y="319.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (20,202,020 samples, 0.06%)</title><rect x="1098.6" y="165" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1101.65" y="175.5" ></text>
</g>
<g >
<title>WebPageInvert::buildMap (424,242,420 samples, 1.35%)</title><rect x="71.8" y="725" width="15.9" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="74.79" y="735.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="261" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1089.90" y="271.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="219.2" y="549" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="222.24" y="559.5" ></text>
</g>
<g >
<title>jbd2__journal_start (70,707,070 samples, 0.22%)</title><rect x="40.3" y="533" width="2.7" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="43.32" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (40,404,040 samples, 0.13%)</title><rect x="277.2" y="629" width="1.6" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="280.23" y="639.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::operator (202,020,200 samples, 0.64%)</title><rect x="771.9" y="517" width="7.6" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="774.90" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (10,101,010 samples, 0.03%)</title><rect x="354.6" y="373" width="0.3" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="357.56" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (20,202,020 samples, 0.06%)</title><rect x="304.9" y="261" width="0.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="307.91" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="1046.0" y="645" width="0.3" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1048.96" y="655.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (40,404,040 samples, 0.13%)</title><rect x="1097.1" y="165" width="1.5" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1100.13" y="175.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, cppjieba::KeywordExtractor::Word, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::lower_bound (909,090,900 samples, 2.89%)</title><rect x="942.5" y="597" width="34.1" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="945.48" y="607.5" >st..</text>
</g>
<g >
<title>cppjieba::DictTrie::CreateTrie (454,545,450 samples, 1.45%)</title><rect x="1064.2" y="373" width="17.0" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1067.15" y="383.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1108.1" y="245" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1111.12" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="464.1" y="437" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="467.11" y="447.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="335.6" y="245" width="1.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="338.61" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Word&gt; (10,101,010 samples, 0.03%)</title><rect x="221.1" y="565" width="0.4" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="224.13" y="575.5" ></text>
</g>
<g >
<title>tinyxml2::XMLUtil::IsWhiteSpace (10,101,010 samples, 0.03%)</title><rect x="65.3" y="501" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="68.34" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, double, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt; &gt;::end (60,606,060 samples, 0.19%)</title><rect x="419.8" y="485" width="2.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="422.76" y="495.5" ></text>
</g>
<g >
<title>std::make_unique&lt;cppjieba::Jieba, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="437" width="64.0" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1065.26" y="447.5" >std::ma..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (90,909,090 samples, 0.29%)</title><rect x="861.0" y="517" width="3.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="863.98" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator++ (10,101,010 samples, 0.03%)</title><rect x="223.8" y="629" width="0.4" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="226.79" y="639.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="391.3" y="389" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="394.33" y="399.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;long&gt; (10,101,010 samples, 0.03%)</title><rect x="25.2" y="709" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="28.16" y="719.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.03%)</title><rect x="350.4" y="277" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="353.39" y="287.5" ></text>
</g>
<g >
<title>cppjieba::IsSingleWord (60,606,060 samples, 0.19%)</title><rect x="365.2" y="613" width="2.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="368.18" y="623.5" ></text>
</g>
<g >
<title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;char const*, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; (90,909,090 samples, 0.29%)</title><rect x="1051.6" y="645" width="3.5" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1054.64" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="917.5" y="597" width="0.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="920.46" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="282.2" y="645" width="0.3" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="285.16" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (10,101,010 samples, 0.03%)</title><rect x="1058.5" y="309" width="0.3" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1061.47" y="319.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::size (20,202,020 samples, 0.06%)</title><rect x="789.7" y="517" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="792.72" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="445.5" y="373" width="0.4" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="448.53" y="383.5" ></text>
</g>
<g >
<title>mem_cgroup_throttle_swaprate (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="117" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1089.90" y="127.5" ></text>
</g>
<g >
<title>cppjieba::MixSegment::Cut (14,515,151,370 samples, 46.16%)</title><rect x="367.4" y="613" width="544.8" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="370.45" y="623.5" >cppjieba::MixSegment::Cut</text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="475.1" y="469" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="478.10" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (50,505,050 samples, 0.16%)</title><rect x="893.2" y="501" width="1.9" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="896.20" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt;::operator[] (414,141,410 samples, 1.32%)</title><rect x="269.3" y="693" width="15.5" height="15.0" fill="rgb(206,9,2)" rx="2" ry="2" />
<text  x="272.27" y="703.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="235.2" y="645" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="238.16" y="655.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;cppjieba::WordRange*, cppjieba::WordRange*, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="835.2" y="485" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="838.20" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (10,101,010 samples, 0.03%)</title><rect x="1057.3" y="293" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1060.33" y="303.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="128.3" y="517" width="0.3" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="131.27" y="527.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.03%)</title><rect x="514.5" y="453" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="517.52" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, WordWeight::IDF, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt; &gt;::find (50,505,050 samples, 0.16%)</title><rect x="85.1" y="709" width="1.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="88.05" y="719.5" ></text>
</g>
<g >
<title>__do_munmap (10,101,010 samples, 0.03%)</title><rect x="314.8" y="213" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="317.76" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_const_iterator (30,303,030 samples, 0.10%)</title><rect x="127.1" y="565" width="1.2" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="130.13" y="575.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="747.6" y="517" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="750.64" y="527.5" ></text>
</g>
<g >
<title>do_async_page_fault (90,909,090 samples, 0.29%)</title><rect x="1154.7" y="725" width="3.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1157.75" y="735.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;cppjieba::Dag const*, cppjieba::Dag*, cppjieba::Dag&gt; (10,101,010 samples, 0.03%)</title><rect x="185.1" y="517" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="188.12" y="527.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (20,202,020 samples, 0.06%)</title><rect x="1097.5" y="149" width="0.8" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1100.51" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="1074.4" y="261" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1077.39" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (10,101,010 samples, 0.03%)</title><rect x="1069.8" y="245" width="0.4" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1072.84" y="255.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (10,101,010 samples, 0.03%)</title><rect x="514.5" y="421" width="0.4" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="517.52" y="431.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="384.9" y="533" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="387.89" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;limonp::LocalVector&lt;unsigned int&gt; const*, limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt; &gt; (50,505,050 samples, 0.16%)</title><rect x="312.5" y="309" width="1.9" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="315.49" y="319.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::~LocalVector (10,101,010 samples, 0.03%)</title><rect x="1098.3" y="149" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1101.27" y="159.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="213" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1089.52" y="223.5" ></text>
</g>
<g >
<title>std::make_shared&lt;SplitChinese, char const  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="725" width="64.0" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="1065.26" y="735.5" >std::ma..</text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::push_back (181,818,180 samples, 0.58%)</title><rect x="322.3" y="357" width="6.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="325.34" y="367.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::pair&lt;unsigned int, unsigned int&gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt; &gt;::lower_bound (10,101,010 samples, 0.03%)</title><rect x="296.6" y="693" width="0.3" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="299.57" y="703.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="334.5" y="213" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="337.47" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="322.0" y="357" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="324.96" y="367.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (20,202,020 samples, 0.06%)</title><rect x="1035.7" y="565" width="0.8" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="1038.72" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_check_len (70,707,070 samples, 0.22%)</title><rect x="483.1" y="469" width="2.6" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="486.06" y="479.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (30,303,030 samples, 0.10%)</title><rect x="10.0" y="757" width="1.1" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="13.00" y="767.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="549" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1064.12" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="1128.6" y="309" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1131.59" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="116.5" y="677" width="0.4" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="119.51" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="630.1" y="421" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="633.13" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::_M_realloc_insert&lt;limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (70,707,070 samples, 0.22%)</title><rect x="1077.8" y="341" width="2.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1080.80" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="1039.1" y="565" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1042.14" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="884.1" y="469" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="887.10" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (10,101,010 samples, 0.03%)</title><rect x="87.3" y="661" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="90.33" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="1042.2" y="549" width="0.3" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="1045.17" y="559.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, cppjieba::KeywordExtractor::Word, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::end (30,303,030 samples, 0.10%)</title><rect x="941.3" y="597" width="1.2" height="15.0" fill="rgb(217,58,13)" rx="2" ry="2" />
<text  x="944.34" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::WordRange*, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="826.5" y="549" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="829.49" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.10%)</title><rect x="295.4" y="501" width="1.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.43" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="329.2" y="357" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="332.16" y="367.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_allocate (10,101,010 samples, 0.03%)</title><rect x="178.3" y="533" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="181.30" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (616,161,610 samples, 1.96%)</title><rect x="608.1" y="437" width="23.2" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="611.15" y="447.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="1084.2" y="341" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1087.24" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="983.8" y="597" width="0.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="986.79" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="1124.8" y="293" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1127.80" y="303.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::Dag&gt; (454,545,450 samples, 1.45%)</title><rect x="686.6" y="421" width="17.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="689.61" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (20,202,020 samples, 0.06%)</title><rect x="201.8" y="533" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="204.80" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::~_Vector_base (10,101,010 samples, 0.03%)</title><rect x="196.9" y="581" width="0.4" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="199.87" y="591.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::operator[] (212,121,210 samples, 0.67%)</title><rect x="354.9" y="373" width="8.0" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="357.94" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (10,101,010 samples, 0.03%)</title><rect x="1073.3" y="229" width="0.3" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="1076.25" y="239.5" ></text>
</g>
<g >
<title>find_get_entry (10,101,010 samples, 0.03%)</title><rect x="15.7" y="549" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="18.69" y="559.5" ></text>
</g>
<g >
<title>std::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;int, double&gt; &gt;, bool&gt;::pair&lt;std::_Rb_tree_iterator&lt;std::pair&lt;int, double&gt; &gt;, bool, true&gt; (10,101,010 samples, 0.03%)</title><rect x="84.7" y="693" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="87.67" y="703.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::LoadDict (383,838,380 samples, 1.22%)</title><rect x="315.1" y="373" width="14.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="318.14" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::_Vector_impl (50,505,050 samples, 0.16%)</title><rect x="925.0" y="437" width="1.9" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="928.04" y="447.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::size (10,101,010 samples, 0.03%)</title><rect x="311.7" y="277" width="0.4" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="314.73" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="249.6" y="661" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="252.56" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (70,707,070 samples, 0.22%)</title><rect x="291.3" y="549" width="2.6" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="294.26" y="559.5" ></text>
</g>
<g >
<title>std::distance&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="1085.0" y="325" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1088.00" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::~vector (40,404,040 samples, 0.13%)</title><rect x="910.3" y="581" width="1.5" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="913.26" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="260.9" y="597" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="263.93" y="607.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (363,636,360 samples, 1.16%)</title><rect x="1094.9" y="325" width="13.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="1005.8" y="565" width="1.1" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1008.78" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (484,848,480 samples, 1.54%)</title><rect x="985.3" y="581" width="18.2" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="988.31" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char&gt; (10,101,010 samples, 0.03%)</title><rect x="382.2" y="501" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="385.23" y="511.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_Tuple_impl (10,101,010 samples, 0.03%)</title><rect x="1125.6" y="277" width="0.3" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="1128.56" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1110.8" y="341" width="0.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1113.78" y="351.5" ></text>
</g>
<g >
<title>std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="1054.3" y="629" width="0.8" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1057.30" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::vector (10,101,010 samples, 0.03%)</title><rect x="116.5" y="693" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="119.51" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="360.2" y="341" width="1.6" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="363.25" y="351.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag*, cppjieba::Dag&gt; (20,202,020 samples, 0.06%)</title><rect x="177.5" y="533" width="0.8" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="180.54" y="543.5" ></text>
</g>
<g >
<title>rh_timer_func (10,101,010 samples, 0.03%)</title><rect x="514.5" y="389" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="517.52" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="113.5" y="565" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="116.48" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (40,404,040 samples, 0.13%)</title><rect x="277.2" y="613" width="1.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="280.23" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="978.1" y="453" width="0.4" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="981.11" y="463.5" ></text>
</g>
<g >
<title>find_get_entry (10,101,010 samples, 0.03%)</title><rect x="44.1" y="517" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="47.12" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="1064.2" y="261" width="0.3" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1067.15" y="271.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::ParseDeep (101,010,100 samples, 0.32%)</title><rect x="65.3" y="597" width="3.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="68.34" y="607.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="114.6" y="613" width="0.8" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="117.62" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt;::_M_next (60,606,060 samples, 0.19%)</title><rect x="279.5" y="613" width="2.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="282.51" y="623.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (10,101,010 samples, 0.03%)</title><rect x="51.7" y="565" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="54.70" y="575.5" ></text>
</g>
<g >
<title>cppjieba::Trie::CreateTrie (303,030,300 samples, 0.96%)</title><rect x="298.5" y="341" width="11.3" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="301.46" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="256.0" y="645" width="0.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="259.01" y="655.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.03%)</title><rect x="1131.6" y="293" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1134.63" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="238.6" y="661" width="0.3" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="241.57" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::push_back (90,909,090 samples, 0.29%)</title><rect x="311.0" y="357" width="3.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="313.97" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_S_do_relocate (10,101,010 samples, 0.03%)</title><rect x="197.3" y="549" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="200.25" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_lower_bound (848,484,840 samples, 2.70%)</title><rect x="943.6" y="565" width="31.9" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="946.61" y="575.5" >st..</text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="108.2" y="613" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="111.18" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="353.0" y="373" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="356.05" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (40,404,040 samples, 0.13%)</title><rect x="621.8" y="405" width="1.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="624.80" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="1110.8" y="277" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1113.78" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;unsigned long*, unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="489.5" y="501" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="492.51" y="511.5" ></text>
</g>
<g >
<title>__printf_fp_l (90,909,090 samples, 0.29%)</title><rect x="1176.4" y="709" width="3.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1179.35" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt;::_M_erase_at_end (70,707,070 samples, 0.22%)</title><rect x="1031.9" y="597" width="2.7" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1034.93" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (20,202,020 samples, 0.06%)</title><rect x="824.2" y="469" width="0.8" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="827.21" y="479.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::resize (282,828,280 samples, 0.90%)</title><rect x="176.4" y="565" width="10.6" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="179.41" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="977.3" y="501" width="0.4" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="980.35" y="511.5" ></text>
</g>
<g >
<title>cppjieba::Trie::~Trie (101,010,100 samples, 0.32%)</title><rect x="1126.7" y="405" width="3.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1129.70" y="415.5" ></text>
</g>
<g >
<title>std::__find_if_not&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_pred&lt;int  (121,212,120 samples, 0.39%)</title><rect x="92.6" y="661" width="4.6" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="95.63" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (20,202,020 samples, 0.06%)</title><rect x="347.0" y="309" width="0.7" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="349.98" y="319.5" ></text>
</g>
<g >
<title>alloc_pages_vma (20,202,020 samples, 0.06%)</title><rect x="349.3" y="101" width="0.7" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="352.25" y="111.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="213.6" y="501" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="216.55" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="1049.0" y="629" width="1.1" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1051.99" y="639.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="86.6" y="677" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="89.57" y="687.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (10,101,010 samples, 0.03%)</title><rect x="328.4" y="53" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="331.41" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (20,202,020 samples, 0.06%)</title><rect x="909.5" y="581" width="0.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="912.50" y="591.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::~Word (10,101,010 samples, 0.03%)</title><rect x="978.1" y="421" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="981.11" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="131.7" y="533" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="134.68" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="1114.2" y="373" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1117.19" y="383.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (10,101,010 samples, 0.03%)</title><rect x="249.2" y="597" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="252.18" y="607.5" ></text>
</g>
<g >
<title>cppjieba::Trie::~Trie (90,909,090 samples, 0.29%)</title><rect x="1055.8" y="421" width="3.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1058.81" y="431.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="332.6" y="117" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="335.58" y="127.5" ></text>
</g>
<g >
<title>JiebaSplitCn::splitWords (10,101,010 samples, 0.03%)</title><rect x="118.0" y="693" width="0.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="121.03" y="703.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (10,101,010 samples, 0.03%)</title><rect x="21.4" y="613" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="24.37" y="623.5" ></text>
</g>
<g >
<title>unlink_chunk.isra.0 (242,424,240 samples, 0.77%)</title><rect x="1180.1" y="757" width="9.1" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="1183.14" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="825.0" y="485" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="827.97" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="163.1" y="469" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="166.14" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::emplace&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (151,515,150 samples, 0.48%)</title><rect x="1069.5" y="293" width="5.6" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1072.46" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="282.5" y="661" width="0.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="285.54" y="671.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (10,101,010 samples, 0.03%)</title><rect x="1125.6" y="293" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="1128.56" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="1069.5" y="213" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1072.46" y="223.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;char*, unsigned long, char&gt; (10,101,010 samples, 0.03%)</title><rect x="1055.4" y="677" width="0.4" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1058.44" y="687.5" ></text>
</g>
<g >
<title>do_user_addr_fault (30,303,030 samples, 0.10%)</title><rect x="348.9" y="165" width="1.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="351.88" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::~unordered_map (30,303,030 samples, 0.10%)</title><rect x="1129.4" y="341" width="1.1" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1132.35" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (40,404,040 samples, 0.13%)</title><rect x="1130.9" y="373" width="1.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1133.87" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_S_do_relocate (10,101,010 samples, 0.03%)</title><rect x="835.2" y="501" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="838.20" y="511.5" ></text>
</g>
<g >
<title>unmap_single_vma (10,101,010 samples, 0.03%)</title><rect x="350.4" y="165" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="353.39" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1046.3" y="645" width="0.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="1049.34" y="655.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::end (60,606,060 samples, 0.19%)</title><rect x="745.4" y="517" width="2.2" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="748.37" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_increment (20,202,020 samples, 0.06%)</title><rect x="912.9" y="613" width="0.8" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="915.91" y="623.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::Value (60,606,060 samples, 0.19%)</title><rect x="69.1" y="693" width="2.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="72.13" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::WordRange&gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="486.5" y="485" width="0.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="489.47" y="495.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="1130.5" y="357" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1133.49" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (191,919,190 samples, 0.61%)</title><rect x="102.5" y="661" width="7.2" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="105.49" y="671.5" ></text>
</g>
<g >
<title>cppjieba::Dag::Dag (20,202,020 samples, 0.06%)</title><rect x="685.5" y="421" width="0.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="688.48" y="431.5" ></text>
</g>
<g >
<title>get_task_policy.part.0 (10,101,010 samples, 0.03%)</title><rect x="43.4" y="485" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="46.36" y="495.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="277" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1089.90" y="287.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (292,929,290 samples, 0.93%)</title><rect x="331.1" y="309" width="11.0" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="934.1" y="533" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="937.14" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="85.1" y="677" width="0.3" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="88.05" y="687.5" ></text>
</g>
<g >
<title>__vm_munmap (10,101,010 samples, 0.03%)</title><rect x="314.8" y="229" width="0.3" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="317.76" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (20,202,020 samples, 0.06%)</title><rect x="1158.2" y="725" width="0.7" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="1161.16" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_create_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (313,131,310 samples, 1.00%)</title><rect x="919.7" y="581" width="11.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="922.73" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;SimHashWebPage, std::allocator&lt;SimHashWebPage&gt;,  (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="629" width="66.0" height="15.0" fill="rgb(232,125,29)" rx="2" ry="2" />
<text  x="299.95" y="639.5" >std::_S..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (70,707,070 samples, 0.22%)</title><rect x="384.5" y="549" width="2.7" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="387.51" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10,101,010 samples, 0.03%)</title><rect x="1069.5" y="261" width="0.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1072.46" y="271.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;::~pair (10,101,010 samples, 0.03%)</title><rect x="978.1" y="437" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="981.11" y="447.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::find (454,545,450 samples, 1.45%)</title><rect x="1005.8" y="613" width="17.0" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1008.78" y="623.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (50,505,050 samples, 0.16%)</title><rect x="1081.6" y="325" width="1.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1084.59" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="210.1" y="485" width="0.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="213.14" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_equals (30,303,030 samples, 0.10%)</title><rect x="233.3" y="629" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="236.26" y="639.5" ></text>
</g>
<g >
<title>__vfs_read (10,101,010 samples, 0.03%)</title><rect x="21.4" y="645" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="24.37" y="655.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="331.8" y="197" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="334.82" y="207.5" ></text>
</g>
<g >
<title>cppjieba::HMMSegment::NumbersRule (20,202,020 samples, 0.06%)</title><rect x="491.0" y="533" width="0.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="494.02" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (10,101,010 samples, 0.03%)</title><rect x="1058.5" y="325" width="0.3" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1061.47" y="335.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="314.4" y="341" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="317.38" y="351.5" ></text>
</g>
<g >
<title>std::_List_const_iterator&lt;WordWeight::WEIGHT&gt;::operator++ (10,101,010 samples, 0.03%)</title><rect x="241.6" y="693" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="244.60" y="703.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;unsigned long*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1038.4" y="581" width="0.7" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1041.38" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="163.9" y="453" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="166.90" y="463.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="326.5" y="133" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="329.51" y="143.5" ></text>
</g>
<g >
<title>tinyxml2::XMLElement::GetText (60,606,060 samples, 0.19%)</title><rect x="69.1" y="709" width="2.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="72.13" y="719.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::operator (333,333,330 samples, 1.06%)</title><rect x="756.7" y="517" width="12.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="759.74" y="527.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::find (262,626,260 samples, 0.84%)</title><rect x="205.6" y="581" width="9.8" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="208.59" y="591.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::push_back (60,606,060 samples, 0.19%)</title><rect x="514.9" y="501" width="2.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="517.90" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (10,101,010 samples, 0.03%)</title><rect x="473.2" y="485" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="476.21" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::size (20,202,020 samples, 0.06%)</title><rect x="195.0" y="597" width="0.7" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="197.98" y="607.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::begin (40,404,040 samples, 0.13%)</title><rect x="739.3" y="517" width="1.5" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="742.30" y="527.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="1100.9" y="165" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1103.92" y="175.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="213" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1127.04" y="223.5" ></text>
</g>
<g >
<title>std::__detail::operator==&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; (10,101,010 samples, 0.03%)</title><rect x="299.2" y="309" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="302.22" y="319.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple&lt;void, true&gt; (10,101,010 samples, 0.03%)</title><rect x="362.5" y="341" width="0.4" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="365.52" y="351.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="1074.4" y="245" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1077.39" y="255.5" ></text>
</g>
<g >
<title>unmap_region (10,101,010 samples, 0.03%)</title><rect x="314.8" y="197" width="0.3" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="317.76" y="207.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_move_assign (20,202,020 samples, 0.06%)</title><rect x="981.5" y="517" width="0.8" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="984.52" y="527.5" ></text>
</g>
<g >
<title>ksys_lseek (20,202,020 samples, 0.06%)</title><rect x="1159.3" y="693" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1162.30" y="703.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1104.7" y="293" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1107.71" y="303.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="237.4" y="629" width="1.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="240.43" y="639.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1098.6" y="229" width="1.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1101.65" y="239.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="261" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1089.52" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (20,202,020 samples, 0.06%)</title><rect x="11.9" y="725" width="0.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="14.90" y="735.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="1113.1" y="69" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1116.05" y="79.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (10,101,010 samples, 0.03%)</title><rect x="1024.7" y="549" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1027.73" y="559.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="1110.0" y="133" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1113.02" y="143.5" ></text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (171,717,170 samples, 0.55%)</title><rect x="689.6" y="389" width="6.5" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="692.65" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (282,828,280 samples, 0.90%)</title><rect x="256.0" y="661" width="10.6" height="15.0" fill="rgb(228,105,25)" rx="2" ry="2" />
<text  x="259.01" y="671.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="342.1" y="293" width="2.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="345.05" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::push_back (121,212,120 samples, 0.39%)</title><rect x="793.1" y="517" width="4.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="796.13" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="293.2" y="469" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="296.15" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::WordRange&gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="796.9" y="485" width="0.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="799.92" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (30,303,030 samples, 0.10%)</title><rect x="231.4" y="597" width="1.1" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="234.37" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="395.9" y="517" width="0.7" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="398.88" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_put_node (10,101,010 samples, 0.03%)</title><rect x="295.4" y="437" width="0.4" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="298.43" y="447.5" ></text>
</g>
<g >
<title>cppjieba::Word::Word (10,101,010 samples, 0.03%)</title><rect x="199.5" y="597" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="202.53" y="607.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="326.5" y="149" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="329.51" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="275.0" y="629" width="0.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="277.96" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::c_str (10,101,010 samples, 0.03%)</title><rect x="1125.9" y="389" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1128.94" y="399.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="640.7" y="389" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="643.75" y="399.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::~Word (60,606,060 samples, 0.19%)</title><rect x="1032.3" y="517" width="2.3" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1035.31" y="527.5" ></text>
</g>
<g >
<title>copy_page_to_iter (10,101,010 samples, 0.03%)</title><rect x="21.4" y="565" width="0.4" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="24.37" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="286.3" y="645" width="0.4" height="15.0" fill="rgb(241,165,39)" rx="2" ry="2" />
<text  x="289.33" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="1128.6" y="341" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1131.59" y="351.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;cppjieba::DictUnit const*, cppjieba::DictUnit*, cppjieba::DictUnit&gt; (90,909,090 samples, 0.29%)</title><rect x="325.8" y="309" width="3.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="328.75" y="319.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (60,606,060 samples, 0.19%)</title><rect x="337.1" y="261" width="2.3" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="340.12" y="271.5" ></text>
</g>
<g >
<title>__do_page_fault (30,303,030 samples, 0.10%)</title><rect x="1078.6" y="165" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1081.56" y="175.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1077.8" y="277" width="0.8" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1080.80" y="287.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRuneInString (121,212,120 samples, 0.39%)</title><rect x="899.3" y="517" width="4.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="902.26" y="527.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::end (50,505,050 samples, 0.16%)</title><rect x="812.8" y="501" width="1.9" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="815.84" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit const*, std::allocator&lt;cppjieba::DictUnit const*&gt; &gt;::_S_do_relocate (20,202,020 samples, 0.06%)</title><rect x="310.2" y="293" width="0.8" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="313.21" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="341.7" y="229" width="0.4" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="344.67" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::Word&gt; &gt;::construct&lt;cppjieba::Word, cppjieba::Word&gt; (30,303,030 samples, 0.10%)</title><rect x="201.8" y="565" width="1.1" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="204.80" y="575.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::push_back (20,202,020 samples, 0.06%)</title><rect x="126.4" y="565" width="0.7" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="129.37" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (70,707,070 samples, 0.22%)</title><rect x="246.9" y="677" width="2.7" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="249.91" y="687.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.03%)</title><rect x="514.5" y="469" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="517.52" y="479.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (10,101,010 samples, 0.03%)</title><rect x="350.4" y="133" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="353.39" y="143.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt; &gt;::~unordered_map (40,404,040 samples, 0.13%)</title><rect x="293.9" y="693" width="1.5" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="296.91" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_check_len (10,101,010 samples, 0.03%)</title><rect x="237.1" y="661" width="0.3" height="15.0" fill="rgb(230,119,28)" rx="2" ry="2" />
<text  x="240.05" y="671.5" ></text>
</g>
<g >
<title>std::allocator&lt;cppjieba::Dag&gt;::~allocator (10,101,010 samples, 0.03%)</title><rect x="809.4" y="485" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="812.43" y="495.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="1071.7" y="181" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1074.73" y="191.5" ></text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (10,101,010 samples, 0.03%)</title><rect x="217.3" y="565" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="220.34" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (40,404,040 samples, 0.13%)</title><rect x="1130.9" y="389" width="1.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1133.87" y="399.5" ></text>
</g>
<g >
<title>limonp::Split (50,505,050 samples, 0.16%)</title><rect x="317.8" y="357" width="1.9" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="320.79" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::size (20,202,020 samples, 0.06%)</title><rect x="488.0" y="517" width="0.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="490.99" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit const*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*, cppjieba::DictUnit&gt; (60,606,060 samples, 0.19%)</title><rect x="344.7" y="341" width="2.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="347.71" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,202,020 samples, 0.06%)</title><rect x="448.6" y="389" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="451.57" y="399.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="185.9" y="517" width="0.4" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="188.88" y="527.5" ></text>
</g>
<g >
<title>alloc_pages_vma (20,202,020 samples, 0.06%)</title><rect x="1146.0" y="613" width="0.8" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1149.03" y="623.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="907.6" y="565" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="910.60" y="575.5" ></text>
</g>
<g >
<title>handle_mm_fault (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="133" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1092.55" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="303.0" y="277" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="306.01" y="287.5" ></text>
</g>
<g >
<title>std::__sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (404,040,400 samples, 1.28%)</title><rect x="329.5" y="341" width="15.2" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="332.54" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="238.2" y="565" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="241.19" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::~vector (50,505,050 samples, 0.16%)</title><rect x="471.3" y="501" width="1.9" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="474.31" y="511.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;cppjieba::RuneStr&gt;::LocalVector (30,303,030 samples, 0.10%)</title><rect x="316.3" y="309" width="1.1" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="319.28" y="319.5" ></text>
</g>
<g >
<title>do_page_fault (60,606,060 samples, 0.19%)</title><rect x="1144.9" y="709" width="2.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1147.89" y="719.5" ></text>
</g>
<g >
<title>std::forward&lt;std::piecewise_construct_t const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="928.5" y="533" width="0.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="931.45" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::find (454,545,450 samples, 1.45%)</title><rect x="1005.8" y="597" width="17.0" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1008.78" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.10%)</title><rect x="937.5" y="581" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="940.55" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.03%)</title><rect x="1074.0" y="261" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1077.01" y="271.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (30,303,030 samples, 0.10%)</title><rect x="323.5" y="293" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="326.48" y="303.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (30,303,030 samples, 0.10%)</title><rect x="334.5" y="197" width="1.1" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="337.47" y="207.5" ></text>
</g>
<g >
<title>cppjieba::HMMSegment::SequentialLetterRule (20,202,020 samples, 0.06%)</title><rect x="491.8" y="533" width="0.7" height="15.0" fill="rgb(216,54,12)" rx="2" ry="2" />
<text  x="494.78" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_S_right (10,101,010 samples, 0.03%)</title><rect x="296.2" y="485" width="0.4" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="299.19" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="669.2" y="421" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="672.18" y="431.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="629" width="0.8" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1192.24" y="639.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="597" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1161.54" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag&gt; (40,404,040 samples, 0.13%)</title><rect x="806.0" y="469" width="1.5" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="809.02" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="305.3" y="197" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="308.28" y="207.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;char*, unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="1055.4" y="645" width="0.4" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1058.44" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::KeywordExtractor::Word*, cppjieba::KeywordExtractor::Word&gt; (70,707,070 samples, 0.22%)</title><rect x="1031.9" y="581" width="2.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1034.93" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_extract (10,101,010 samples, 0.03%)</title><rect x="668.8" y="421" width="0.4" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="671.80" y="431.5" ></text>
</g>
<g >
<title>__vfs_read (60,606,060 samples, 0.19%)</title><rect x="13.8" y="645" width="2.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="16.79" y="655.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (141,414,140 samples, 0.45%)</title><rect x="1026.2" y="549" width="5.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="1029.25" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::max_size (70,707,070 samples, 0.22%)</title><rect x="840.5" y="533" width="2.7" height="15.0" fill="rgb(254,226,54)" rx="2" ry="2" />
<text  x="843.51" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;SplitChinese, std::allocator&lt;SplitChinese&gt;,  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="645" width="64.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1065.26" y="655.5" >std::_S..</text>
</g>
<g >
<title>file_free_rcu (10,101,010 samples, 0.03%)</title><rect x="249.2" y="533" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="252.18" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl_data::_Vector_impl_data (20,202,020 samples, 0.06%)</title><rect x="467.9" y="453" width="0.8" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="470.90" y="463.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_Vector_base (50,505,050 samples, 0.16%)</title><rect x="846.2" y="533" width="1.9" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="849.20" y="543.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_get_Tp_allocator (20,202,020 samples, 0.06%)</title><rect x="848.5" y="533" width="0.7" height="15.0" fill="rgb(216,53,12)" rx="2" ry="2" />
<text  x="851.47" y="543.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;simhash::Simhasher, std::allocator&lt;simhash::Simhasher&gt;,  (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="485" width="66.0" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="299.95" y="495.5" >std::_S..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned int&gt;, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="674.1" y="453" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="677.11" y="463.5" ></text>
</g>
<g >
<title>do_async_page_fault (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="229" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1111.50" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="1013.7" y="533" width="1.2" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1016.74" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;SplitChinese,  (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="709" width="5.7" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1129.70" y="719.5" ></text>
</g>
<g >
<title>std::IsIn&lt;unsigned int, std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt; &gt; (414,141,410 samples, 1.32%)</title><rect x="809.8" y="517" width="15.5" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="812.81" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (30,303,030 samples, 0.10%)</title><rect x="130.9" y="549" width="1.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="133.92" y="559.5" ></text>
</g>
<g >
<title>do_async_page_fault (60,606,060 samples, 0.19%)</title><rect x="1144.9" y="725" width="2.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1147.89" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="911.0" y="501" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="914.02" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="453.1" y="389" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="456.12" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt;::pair&lt;unsigned long&amp;, true&gt; (90,909,090 samples, 0.29%)</title><rect x="522.9" y="501" width="3.4" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="525.86" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.03%)</title><rect x="314.8" y="261" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="317.76" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_v (20,202,020 samples, 0.06%)</title><rect x="459.9" y="405" width="0.8" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="462.94" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::emplace_back&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1044.4" y="613" width="0.8" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="1047.44" y="623.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="324.2" y="229" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="327.24" y="239.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;cppjieba::RuneStr&gt;::push_back (50,505,050 samples, 0.16%)</title><rect x="904.2" y="517" width="1.9" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="907.19" y="527.5" ></text>
</g>
<g >
<title>__ieee754_log_fma (10,101,010 samples, 0.03%)</title><rect x="1062.3" y="373" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1065.26" y="383.5" ></text>
</g>
<g >
<title>cppjieba::HMMModel::LoadModel (30,303,030 samples, 0.10%)</title><rect x="1114.6" y="389" width="1.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1117.57" y="399.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (20,202,020 samples, 0.06%)</title><rect x="327.3" y="197" width="0.7" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="330.27" y="207.5" ></text>
</g>
<g >
<title>memset_erms (10,101,010 samples, 0.03%)</title><rect x="41.1" y="517" width="0.4" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="44.08" y="527.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (30,303,030 samples, 0.10%)</title><rect x="1098.6" y="181" width="1.2" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1101.65" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, true&gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt; (70,707,070 samples, 0.22%)</title><rect x="291.3" y="597" width="2.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="294.26" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (40,404,040 samples, 0.13%)</title><rect x="1130.9" y="357" width="1.5" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1133.87" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="481.9" y="453" width="0.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="484.92" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (80,808,080 samples, 0.26%)</title><rect x="817.4" y="453" width="3.0" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="820.39" y="463.5" ></text>
</g>
<g >
<title>std::vector&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::push_back (121,212,120 samples, 0.39%)</title><rect x="1075.9" y="357" width="4.6" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1078.90" y="367.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="290.1" y="709" width="0.8" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="293.12" y="719.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::LoadIdfDict (262,626,260 samples, 0.84%)</title><rect x="1116.1" y="389" width="9.8" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1119.08" y="399.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="905.7" y="501" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="908.71" y="511.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, double, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt; &gt;::find (1,151,515,140 samples, 3.66%)</title><rect x="422.0" y="485" width="43.2" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="425.03" y="495.5" >std:..</text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Word*, cppjieba::Word&gt; (40,404,040 samples, 0.13%)</title><rect x="910.3" y="565" width="1.5" height="15.0" fill="rgb(247,196,47)" rx="2" ry="2" />
<text  x="913.26" y="575.5" ></text>
</g>
<g >
<title>rcu_core_si (10,101,010 samples, 0.03%)</title><rect x="249.2" y="581" width="0.4" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="252.18" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (70,707,070 samples, 0.22%)</title><rect x="235.9" y="693" width="2.7" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="238.92" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_deallocate (40,404,040 samples, 0.13%)</title><rect x="851.1" y="517" width="1.5" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="854.12" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Hash_node (10,101,010 samples, 0.03%)</title><rect x="1073.3" y="245" width="0.3" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1076.25" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::operator++ (10,101,010 samples, 0.03%)</title><rect x="226.1" y="693" width="0.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="229.06" y="703.5" ></text>
</g>
<g >
<title>WordWeight::buildIDF (10,101,010 samples, 0.03%)</title><rect x="249.6" y="709" width="0.3" height="15.0" fill="rgb(249,205,49)" rx="2" ry="2" />
<text  x="252.56" y="719.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1093.3" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1096.34" y="255.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::reverse_iterator (10,101,010 samples, 0.03%)</title><rect x="781.8" y="501" width="0.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="784.76" y="511.5" ></text>
</g>
<g >
<title>[unknown] (30,303,030 samples, 0.10%)</title><rect x="24.4" y="725" width="1.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="27.40" y="735.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator++ (10,101,010 samples, 0.03%)</title><rect x="914.8" y="613" width="0.4" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="917.81" y="623.5" ></text>
</g>
<g >
<title>[unknown] (1,101,010,090 samples, 3.50%)</title><rect x="11.1" y="757" width="41.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="767.5" >[un..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (20,202,020 samples, 0.06%)</title><rect x="246.2" y="677" width="0.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="249.15" y="687.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="235.9" y="661" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="238.92" y="671.5" ></text>
</g>
<g >
<title>alloc_pages_vma (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="133" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1127.04" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (30,303,030 samples, 0.10%)</title><rect x="822.3" y="469" width="1.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="825.32" y="479.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (202,020,200 samples, 0.64%)</title><rect x="1094.9" y="277" width="7.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (20,202,020 samples, 0.06%)</title><rect x="939.1" y="581" width="0.7" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="942.07" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="234.0" y="613" width="0.4" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="237.02" y="623.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="853.0" y="517" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="856.02" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Word*, std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt; &gt;::operator- (10,101,010 samples, 0.03%)</title><rect x="203.3" y="549" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="206.32" y="559.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.03%)</title><rect x="325.4" y="133" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="328.37" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1116.8" y="341" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1119.84" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::emplace_back&lt;cppjieba::Word&gt; (80,808,080 samples, 0.26%)</title><rect x="201.0" y="581" width="3.1" height="15.0" fill="rgb(244,179,42)" rx="2" ry="2" />
<text  x="204.04" y="591.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="243.5" y="661" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="246.50" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (20,202,020 samples, 0.06%)</title><rect x="1113.4" y="325" width="0.8" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1116.43" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="352.7" y="341" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="355.67" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt;::operator-- (40,404,040 samples, 0.13%)</title><rect x="737.4" y="517" width="1.5" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="740.41" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::vector (20,202,020 samples, 0.06%)</title><rect x="981.5" y="501" width="0.8" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="984.52" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::equal_to&lt;unsigned int&gt;, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="670.3" y="405" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="673.31" y="415.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, double&gt; (10,101,010 samples, 0.03%)</title><rect x="453.1" y="373" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="456.12" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (50,505,050 samples, 0.16%)</title><rect x="1145.3" y="645" width="1.9" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1148.27" y="655.5" ></text>
</g>
<g >
<title>SimHashWebPage::getSimHash (18,202,020,020 samples, 57.89%)</title><rect x="362.9" y="709" width="683.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="365.90" y="719.5" >SimHashWebPage::getSimHash</text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::~_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="1033.5" y="485" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1036.45" y="495.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, cppjieba::KeywordExtractor::Word, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::~map (90,909,090 samples, 0.29%)</title><rect x="977.3" y="613" width="3.5" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="980.35" y="623.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (50,505,050 samples, 0.16%)</title><rect x="331.1" y="213" width="1.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="223.5" ></text>
</g>
<g >
<title>generic_file_read_iter (60,606,060 samples, 0.19%)</title><rect x="13.8" y="597" width="2.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="16.79" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (60,606,060 samples, 0.19%)</title><rect x="1065.3" y="277" width="2.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1068.29" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,202,020 samples, 0.06%)</title><rect x="984.6" y="549" width="0.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="987.55" y="559.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::MakeNodeInfo (50,505,050 samples, 0.16%)</title><rect x="1081.6" y="357" width="1.9" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="1084.59" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;WordWeight::WEIGHT&gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="294.7" y="501" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="297.67" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (20,202,020 samples, 0.06%)</title><rect x="1060.4" y="341" width="0.7" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1063.36" y="351.5" ></text>
</g>
<g >
<title>cppjieba::Word::~Word (10,101,010 samples, 0.03%)</title><rect x="910.6" y="501" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="913.64" y="511.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="645" width="0.8" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="1192.24" y="655.5" ></text>
</g>
<g >
<title>cppjieba::PreFilter::HasNext (20,202,020 samples, 0.06%)</title><rect x="853.4" y="565" width="0.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="856.40" y="575.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="133" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1094.82" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (20,202,020 samples, 0.06%)</title><rect x="85.4" y="677" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="88.43" y="687.5" ></text>
</g>
<g >
<title>__x86_indirect_thunk_rax (10,101,010 samples, 0.03%)</title><rect x="50.9" y="533" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="53.94" y="543.5" ></text>
</g>
<g >
<title>__do_page_fault (20,202,020 samples, 0.06%)</title><rect x="1109.6" y="197" width="0.8" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1112.64" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::DictUnit const*&gt; &gt;::construct&lt;cppjieba::DictUnit const*, cppjieba::DictUnit const*&gt; (10,101,010 samples, 0.03%)</title><rect x="309.8" y="325" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="312.83" y="335.5" ></text>
</g>
<g >
<title>copy_page_to_iter (30,303,030 samples, 0.10%)</title><rect x="14.2" y="565" width="1.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="17.17" y="575.5" ></text>
</g>
<g >
<title>__tlb_remove_page_size (10,101,010 samples, 0.03%)</title><rect x="314.8" y="117" width="0.3" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="317.76" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="489.9" y="469" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="492.88" y="479.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="312.1" y="325" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="315.11" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (40,404,040 samples, 0.13%)</title><rect x="795.8" y="501" width="1.5" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="798.78" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, double&gt;, false, false&gt;::_Node_const_iterator (20,202,020 samples, 0.06%)</title><rect x="462.6" y="437" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="465.59" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="1084.6" y="341" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="1087.62" y="351.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="149" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1094.07" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_node_ptr (30,303,030 samples, 0.10%)</title><rect x="1130.9" y="325" width="1.1" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1133.87" y="335.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRuneInString (30,303,030 samples, 0.10%)</title><rect x="1082.3" y="293" width="1.2" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1085.35" y="303.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="197" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1090.65" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="693" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1064.12" y="703.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (101,010,100 samples, 0.32%)</title><rect x="1094.9" y="229" width="3.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="239.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="348.1" y="229" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="351.12" y="239.5" ></text>
</g>
<g >
<title>WebPageRemove::WebPageRemove (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="725" width="66.0" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="299.95" y="735.5" >WebPage..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::WordRange&gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="837.5" y="501" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="840.48" y="511.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (20,202,020 samples, 0.06%)</title><rect x="23.3" y="709" width="0.7" height="15.0" fill="rgb(218,64,15)" rx="2" ry="2" />
<text  x="26.27" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="465.2" y="501" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="468.25" y="511.5" ></text>
</g>
<g >
<title>do_group_exit (20,202,020 samples, 0.06%)</title><rect x="1158.2" y="709" width="0.7" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1161.16" y="719.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.03%)</title><rect x="1112.7" y="117" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1115.67" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="1039.1" y="581" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1042.14" y="591.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="229" width="1.1" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1092.55" y="239.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (222,222,220 samples, 0.71%)</title><rect x="331.1" y="293" width="8.3" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="303.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="613" width="0.8" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1192.24" y="623.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (40,404,040 samples, 0.13%)</title><rect x="1126.7" y="341" width="1.5" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1129.70" y="351.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="326.5" y="181" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="329.51" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;int, double&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="79.0" y="629" width="0.4" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="81.99" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="553.6" y="469" width="0.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="556.57" y="479.5" ></text>
</g>
<g >
<title>WebPageOffset::Parse (10,101,010 samples, 0.03%)</title><rect x="296.6" y="725" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="299.57" y="735.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::SetStaticWordWeights (484,848,480 samples, 1.54%)</title><rect x="329.5" y="373" width="18.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="332.54" y="383.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (151,515,150 samples, 0.48%)</title><rect x="331.1" y="277" width="5.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="287.5" ></text>
</g>
<g >
<title>__read (70,707,070 samples, 0.22%)</title><rect x="13.4" y="741" width="2.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="16.41" y="751.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.03%)</title><rect x="1113.1" y="85" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1116.05" y="95.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;SimHashWebPage,  (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="661" width="66.0" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="299.95" y="671.5" >std::__..</text>
</g>
<g >
<title>cppjieba::HMMModel::LoadModel (20,202,020 samples, 0.06%)</title><rect x="350.8" y="389" width="0.7" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="353.77" y="399.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (10,101,010 samples, 0.03%)</title><rect x="488.7" y="501" width="0.4" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="491.75" y="511.5" ></text>
</g>
<g >
<title>[unknown] (40,404,040 samples, 0.13%)</title><rect x="11.1" y="741" width="1.6" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="751.5" ></text>
</g>
<g >
<title>do_anonymous_page (50,505,050 samples, 0.16%)</title><rect x="1155.9" y="629" width="1.9" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1158.88" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_base (70,707,070 samples, 0.22%)</title><rect x="466.0" y="485" width="2.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="469.00" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.03%)</title><rect x="21.4" y="725" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="24.37" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 0.06%)</title><rect x="1113.4" y="277" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1116.43" y="287.5" ></text>
</g>
<g >
<title>ext4_mark_inode_dirty (70,707,070 samples, 0.22%)</title><rect x="48.3" y="501" width="2.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="51.28" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_get_Tp_allocator (20,202,020 samples, 0.06%)</title><rect x="807.5" y="517" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="810.53" y="527.5" ></text>
</g>
<g >
<title>std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::tuple (10,101,010 samples, 0.03%)</title><rect x="930.0" y="533" width="0.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="932.97" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="275.7" y="597" width="0.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="278.72" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::clear (30,303,030 samples, 0.10%)</title><rect x="295.4" y="677" width="1.2" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="298.43" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (50,505,050 samples, 0.16%)</title><rect x="275.3" y="629" width="1.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="278.34" y="639.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Word*&gt; (20,202,020 samples, 0.06%)</title><rect x="220.8" y="597" width="0.7" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="223.75" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="320.1" y="357" width="1.1" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="323.07" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="1019.0" y="581" width="0.4" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="1022.05" y="591.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="362.1" y="341" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="365.14" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (141,414,140 samples, 0.45%)</title><rect x="1046.0" y="693" width="5.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1048.96" y="703.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit const*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="344.7" y="309" width="2.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="347.71" y="319.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="1104.0" y="213" width="0.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1106.95" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;::~pair (70,707,070 samples, 0.22%)</title><rect x="291.3" y="581" width="2.6" height="15.0" fill="rgb(236,147,35)" rx="2" ry="2" />
<text  x="294.26" y="591.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (20,202,020 samples, 0.06%)</title><rect x="326.1" y="229" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="329.13" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator++ (30,303,030 samples, 0.10%)</title><rect x="59.7" y="693" width="1.1" height="15.0" fill="rgb(226,97,23)" rx="2" ry="2" />
<text  x="62.66" y="703.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; (10,101,010 samples, 0.03%)</title><rect x="243.9" y="693" width="0.4" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="246.88" y="703.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="489.1" y="501" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="492.13" y="511.5" ></text>
</g>
<g >
<title>__uselocale (10,101,010 samples, 0.03%)</title><rect x="24.4" y="693" width="0.4" height="15.0" fill="rgb(254,225,53)" rx="2" ry="2" />
<text  x="27.40" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (40,404,040 samples, 0.13%)</title><rect x="275.3" y="613" width="1.6" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="278.34" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt;::base (20,202,020 samples, 0.06%)</title><rect x="750.3" y="469" width="0.8" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="753.30" y="479.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="347.7" y="245" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="350.74" y="255.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.03%)</title><rect x="48.3" y="469" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="51.28" y="479.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (101,010,100 samples, 0.32%)</title><rect x="1126.7" y="357" width="3.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1129.70" y="367.5" ></text>
</g>
<g >
<title>tinyxml2::XMLElement::ParseDeep (101,010,100 samples, 0.32%)</title><rect x="65.3" y="613" width="3.8" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="68.34" y="623.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1097.9" y="133" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1100.89" y="143.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="339.4" y="293" width="2.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="342.40" y="303.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, double&gt; (10,101,010 samples, 0.03%)</title><rect x="450.5" y="373" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="453.46" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase_at_end (10,101,010 samples, 0.03%)</title><rect x="318.2" y="325" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="321.17" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="1113.4" y="357" width="0.8" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="1116.43" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (10,101,010 samples, 0.03%)</title><rect x="306.0" y="213" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="309.04" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="406.5" y="501" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="409.49" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (90,909,090 samples, 0.29%)</title><rect x="354.9" y="341" width="3.5" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="357.94" y="351.5" ></text>
</g>
<g >
<title>cppjieba::Dag::~Dag (30,303,030 samples, 0.10%)</title><rect x="804.9" y="469" width="1.1" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="807.88" y="479.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="693" width="5.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1129.70" y="703.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;JiebaSplitCn,  (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="581" width="5.7" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1129.70" y="591.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="581" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1064.12" y="591.5" ></text>
</g>
<g >
<title>cppjieba::GetWordsFromWordRanges (636,363,630 samples, 2.02%)</title><rect x="372.8" y="565" width="23.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="375.76" y="575.5" >c..</text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (40,404,040 samples, 0.13%)</title><rect x="358.4" y="325" width="1.5" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="361.35" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (515,151,510 samples, 1.64%)</title><rect x="97.2" y="693" width="19.3" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="100.18" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="161.6" y="469" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="164.62" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="980.8" y="565" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="983.76" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, unsigned int, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (50,505,050 samples, 0.16%)</title><rect x="211.3" y="501" width="1.9" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="214.28" y="511.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="227.2" y="693" width="0.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="230.20" y="703.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="324.2" y="245" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="327.24" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (959,595,950 samples, 3.05%)</title><rect x="138.5" y="533" width="36.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="141.50" y="543.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_eq (10,101,010 samples, 0.03%)</title><rect x="232.9" y="629" width="0.4" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="235.88" y="639.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="331.4" y="85" width="0.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="334.44" y="95.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::base (40,404,040 samples, 0.13%)</title><rect x="751.1" y="485" width="1.5" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="754.05" y="495.5" ></text>
</g>
<g >
<title>std::_Hash_bytes (20,202,020 samples, 0.06%)</title><rect x="1020.6" y="549" width="0.7" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1023.56" y="559.5" ></text>
</g>
<g >
<title>WordWeight::~WordWeight (111,111,110 samples, 0.35%)</title><rect x="291.3" y="709" width="4.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="294.26" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="225.7" y="613" width="0.4" height="15.0" fill="rgb(226,99,23)" rx="2" ry="2" />
<text  x="228.68" y="623.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::sync (10,101,010 samples, 0.03%)</title><rect x="1061.9" y="725" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1064.88" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (121,212,120 samples, 0.39%)</title><rect x="884.9" y="469" width="4.5" height="15.0" fill="rgb(249,203,48)" rx="2" ry="2" />
<text  x="887.86" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="206.7" y="517" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="209.73" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="859.8" y="533" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="862.84" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;unsigned long*, unsigned long&gt; (20,202,020 samples, 0.06%)</title><rect x="482.3" y="453" width="0.8" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="485.30" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (10,101,010 samples, 0.03%)</title><rect x="1114.9" y="325" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="1117.95" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="353.4" y="373" width="1.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="356.42" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Word*, std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="201.4" y="565" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="204.42" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (141,414,140 samples, 0.45%)</title><rect x="1046.0" y="661" width="5.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1048.96" y="671.5" ></text>
</g>
<g >
<title>cppjieba::WordRange::WordRange (30,303,030 samples, 0.10%)</title><rect x="188.5" y="597" width="1.2" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="191.54" y="607.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (121,212,120 samples, 0.39%)</title><rect x="331.1" y="261" width="4.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, true&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="235.5" y="677" width="0.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="238.54" y="687.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::find (121,212,120 samples, 0.39%)</title><rect x="299.6" y="309" width="4.5" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="302.60" y="319.5" ></text>
</g>
<g >
<title>std::fill_n&lt;int*, unsigned long, int&gt; (20,202,020 samples, 0.06%)</title><rect x="477.0" y="421" width="0.8" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="480.00" y="431.5" ></text>
</g>
<g >
<title>SplitChinese::~SplitChinese (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="613" width="5.7" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="1129.70" y="623.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (60,606,060 samples, 0.19%)</title><rect x="1055.8" y="373" width="2.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1058.81" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="930.3" y="517" width="0.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="933.35" y="527.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (60,606,060 samples, 0.19%)</title><rect x="337.1" y="245" width="2.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="340.12" y="255.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (20,202,020 samples, 0.06%)</title><rect x="310.2" y="261" width="0.8" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="313.21" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="347.7" y="293" width="2.3" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="350.74" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;int, double&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="82.8" y="645" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="85.78" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (20,202,020 samples, 0.06%)</title><rect x="463.4" y="453" width="0.7" height="15.0" fill="rgb(231,121,29)" rx="2" ry="2" />
<text  x="466.35" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;::~pair (30,303,030 samples, 0.10%)</title><rect x="295.4" y="597" width="1.2" height="15.0" fill="rgb(214,41,9)" rx="2" ry="2" />
<text  x="298.43" y="607.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="328.4" y="181" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="331.41" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt;::push_back (242,424,240 samples, 0.77%)</title><rect x="1022.8" y="613" width="9.1" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1025.84" y="623.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="707.8" y="453" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="710.84" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="278.8" y="613" width="0.7" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="281.75" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="309.1" y="261" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="312.07" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (40,404,040 samples, 0.13%)</title><rect x="237.1" y="677" width="1.5" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="240.05" y="687.5" ></text>
</g>
<g >
<title>limonp::Split (30,303,030 samples, 0.10%)</title><rect x="1116.1" y="373" width="1.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1119.08" y="383.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (10,101,010 samples, 0.03%)</title><rect x="350.4" y="245" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="353.39" y="255.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.03%)</title><rect x="21.4" y="709" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="24.37" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="1059.2" y="341" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1062.23" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="291.3" y="485" width="0.3" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="294.26" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="916.7" y="597" width="0.4" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="919.70" y="607.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;char*, unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="1055.4" y="661" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1058.44" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (141,414,140 samples, 0.45%)</title><rect x="158.2" y="485" width="5.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="161.21" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::~_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="490.3" y="485" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="493.26" y="495.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned int&gt;::operator (171,717,170 samples, 0.55%)</title><rect x="453.5" y="389" width="6.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="456.50" y="399.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::Find (5,757,575,700 samples, 18.31%)</title><rect x="495.6" y="533" width="216.0" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="498.57" y="543.5" >cppjieba::DictTrie::Find</text>
</g>
<g >
<title>std::__miter_base&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1030.0" y="469" width="0.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="1033.04" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="835.2" y="437" width="0.4" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="838.20" y="447.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="229" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1114.91" y="239.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (60,606,060 samples, 0.19%)</title><rect x="1108.5" y="293" width="2.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1111.50" y="303.5" ></text>
</g>
<g >
<title>std::operator==&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt; (111,111,110 samples, 0.35%)</title><rect x="748.4" y="501" width="4.2" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="751.40" y="511.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="1100.9" y="213" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1103.92" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (252,525,250 samples, 0.80%)</title><rect x="815.5" y="485" width="9.5" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="818.49" y="495.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;cppjieba::RuneStr&gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="317.4" y="309" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="320.41" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="1092.6" y="357" width="0.4" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1095.58" y="367.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="331.1" y="133" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="334.06" y="143.5" ></text>
</g>
<g >
<title>do_anonymous_page (30,303,030 samples, 0.10%)</title><rect x="1146.0" y="629" width="1.2" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1149.03" y="639.5" ></text>
</g>
<g >
<title>__x64_sys_munmap (10,101,010 samples, 0.03%)</title><rect x="325.4" y="245" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="328.37" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::vector&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, void&gt; (60,606,060 samples, 0.19%)</title><rect x="1111.2" y="357" width="2.2" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1114.16" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (10,101,010 samples, 0.03%)</title><rect x="308.7" y="261" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="311.70" y="271.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="347.7" y="197" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="350.74" y="207.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="686.2" y="421" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="689.24" y="431.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="181" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1094.07" y="191.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;unsigned int, false&gt; (10,101,010 samples, 0.03%)</title><rect x="812.5" y="501" width="0.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="815.46" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (121,212,120 samples, 0.39%)</title><rect x="261.7" y="613" width="4.5" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="264.69" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt;::operator-- (101,010,100 samples, 0.32%)</title><rect x="771.9" y="501" width="3.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="774.90" y="511.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="1095.6" y="165" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1098.62" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="275.0" y="613" width="0.3" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="277.96" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;cppjieba::DictUnit*, cppjieba::DictUnit*, std::allocator&lt;cppjieba::DictUnit&gt; &gt; (90,909,090 samples, 0.29%)</title><rect x="1089.2" y="325" width="3.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1092.17" y="335.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (202,020,200 samples, 0.64%)</title><rect x="1094.9" y="261" width="7.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="271.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt; &gt;::operator[] (70,707,070 samples, 0.22%)</title><rect x="246.9" y="693" width="2.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="249.91" y="703.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::push_back (40,404,040 samples, 0.13%)</title><rect x="492.5" y="533" width="1.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="495.54" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SimHashWebPage&gt; &gt;::destroy&lt;SimHashWebPage&gt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="629" width="5.3" height="15.0" fill="rgb(212,33,7)" rx="2" ry="2" />
<text  x="1058.81" y="639.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;cppjieba::WordRange*&gt; (10,101,010 samples, 0.03%)</title><rect x="839.8" y="501" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="842.75" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (40,404,040 samples, 0.13%)</title><rect x="293.9" y="677" width="1.5" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="296.91" y="687.5" ></text>
</g>
<g >
<title>lseek (20,202,020 samples, 0.06%)</title><rect x="1159.3" y="757" width="0.8" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1162.30" y="767.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;cppjieba::WordRange*, cppjieba::WordRange*, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="840.1" y="501" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="843.13" y="511.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1109.6" y="165" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1112.64" y="175.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt; (10,101,010 samples, 0.03%)</title><rect x="1043.7" y="629" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1046.68" y="639.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (60,606,060 samples, 0.19%)</title><rect x="344.7" y="293" width="2.3" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="347.71" y="303.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (30,303,030 samples, 0.10%)</title><rect x="489.9" y="501" width="1.1" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="492.88" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (30,303,030 samples, 0.10%)</title><rect x="348.9" y="197" width="1.1" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="351.88" y="207.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="343.9" y="245" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="346.95" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="246.5" y="597" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="249.53" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="977.3" y="517" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="980.35" y="527.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::DictUnit, cppjieba::DictUnit&amp;&gt; (60,606,060 samples, 0.19%)</title><rect x="347.7" y="277" width="2.3" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="350.74" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit const*, std::allocator&lt;cppjieba::DictUnit const*&gt; &gt;::_S_relocate (20,202,020 samples, 0.06%)</title><rect x="310.2" y="309" width="0.8" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="313.21" y="319.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="336.0" y="197" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="338.99" y="207.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="163.1" y="453" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="166.14" y="463.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="1094.9" y="181" width="0.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="191.5" ></text>
</g>
<g >
<title>std::__detail::operator==&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; (20,202,020 samples, 0.06%)</title><rect x="129.0" y="565" width="0.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="132.02" y="575.5" ></text>
</g>
<g >
<title>JiebaSplitCn::splitWords (2,747,474,720 samples, 8.74%)</title><rect x="118.4" y="677" width="103.1" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="121.41" y="687.5" >JiebaSplitCn..</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (111,111,110 samples, 0.35%)</title><rect x="273.1" y="645" width="4.1" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="276.06" y="655.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1095.2" y="85" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1098.24" y="95.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (20,202,020 samples, 0.06%)</title><rect x="1077.8" y="309" width="0.8" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1080.80" y="319.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="286.3" y="693" width="1.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="289.33" y="703.5" ></text>
</g>
<g >
<title>get_page_from_freelist (20,202,020 samples, 0.06%)</title><rect x="1146.0" y="581" width="0.8" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1149.03" y="591.5" ></text>
</g>
<g >
<title>std::allocate_shared&lt;simhash::Simhasher, std::allocator&lt;simhash::Simhasher&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="549" width="66.0" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="299.95" y="559.5" >std::al..</text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::Dag*&gt; (20,202,020 samples, 0.06%)</title><rect x="680.9" y="437" width="0.8" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="683.93" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="549" width="5.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1129.70" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned int&gt;, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="215.1" y="533" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="218.07" y="543.5" ></text>
</g>
<g >
<title>uncharge_page (10,101,010 samples, 0.03%)</title><rect x="350.4" y="53" width="0.4" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="353.39" y="63.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (20,202,020 samples, 0.06%)</title><rect x="386.0" y="533" width="0.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="389.02" y="543.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="1041.4" y="565" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="1044.41" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt;::_Hash_node (30,303,030 samples, 0.10%)</title><rect x="282.9" y="645" width="1.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="285.92" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="290.1" y="693" width="0.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="293.12" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (30,303,030 samples, 0.10%)</title><rect x="245.0" y="629" width="1.2" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="248.01" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_left (30,303,030 samples, 0.10%)</title><rect x="963.3" y="549" width="1.2" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="966.32" y="559.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="1045.6" y="661" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="1048.58" y="671.5" ></text>
</g>
<g >
<title>cppjieba::HMMModel::LoadEmitProb (20,202,020 samples, 0.06%)</title><rect x="350.8" y="373" width="0.7" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="353.77" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (242,424,240 samples, 0.77%)</title><rect x="450.8" y="405" width="9.1" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="453.84" y="415.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::CreateTrie (444,444,440 samples, 1.41%)</title><rect x="298.5" y="373" width="16.6" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="301.46" y="383.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__const_get&lt;unsigned int const, double&gt; (10,101,010 samples, 0.03%)</title><rect x="450.5" y="357" width="0.3" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="453.46" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;limonp::LocalVector&lt;unsigned int&gt; const*, limonp::LocalVector&lt;unsigned int&gt;*&gt; (50,505,050 samples, 0.16%)</title><rect x="1078.6" y="277" width="1.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1081.56" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_end (10,101,010 samples, 0.03%)</title><rect x="931.5" y="581" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="934.48" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (50,505,050 samples, 0.16%)</title><rect x="1067.6" y="277" width="1.9" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="1070.57" y="287.5" ></text>
</g>
<g >
<title>do_anonymous_page (20,202,020 samples, 0.06%)</title><rect x="349.3" y="117" width="0.7" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="352.25" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (141,414,140 samples, 0.45%)</title><rect x="304.1" y="277" width="5.4" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="307.15" y="287.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (10,101,010 samples, 0.03%)</title><rect x="36.2" y="629" width="0.3" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="39.15" y="639.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (10,101,010 samples, 0.03%)</title><rect x="983.0" y="469" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="986.04" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;::push_back (40,404,040 samples, 0.13%)</title><rect x="242.0" y="693" width="1.5" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="244.98" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (121,212,120 samples, 0.39%)</title><rect x="958.4" y="533" width="4.5" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="961.40" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::push_back (121,212,120 samples, 0.39%)</title><rect x="831.0" y="549" width="4.6" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="834.03" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_node (303,030,300 samples, 0.96%)</title><rect x="1007.7" y="581" width="11.3" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1010.67" y="591.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (40,404,040 samples, 0.13%)</title><rect x="43.0" y="549" width="1.5" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="45.98" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.03%)</title><rect x="325.4" y="277" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="328.37" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="1005.8" y="549" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1008.78" y="559.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge_delay (10,101,010 samples, 0.03%)</title><rect x="1146.8" y="613" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1149.79" y="623.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="923.5" y="517" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="926.52" y="527.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="1076.3" y="293" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1079.28" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_move_assign (10,101,010 samples, 0.03%)</title><rect x="981.1" y="501" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="984.14" y="511.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (50,505,050 samples, 0.16%)</title><rect x="1096.8" y="213" width="1.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1099.75" y="223.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; (60,606,060 samples, 0.19%)</title><rect x="519.8" y="501" width="2.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="522.83" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="295.8" y="437" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.81" y="447.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (101,010,100 samples, 0.32%)</title><rect x="111.6" y="629" width="3.8" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="114.59" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="417.9" y="485" width="0.3" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="420.86" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="1060.0" y="341" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1062.98" y="351.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="149" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1127.04" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1057.7" y="293" width="0.4" height="15.0" fill="rgb(252,217,51)" rx="2" ry="2" />
<text  x="1060.71" y="303.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::length (20,202,020 samples, 0.06%)</title><rect x="320.4" y="341" width="0.8" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="323.45" y="351.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="189.7" y="597" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="192.67" y="607.5" ></text>
</g>
<g >
<title>lru_cache_add_active_or_unevictable (10,101,010 samples, 0.03%)</title><rect x="346.2" y="117" width="0.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="349.22" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;simhash::Simhasher&gt; &gt;::construct&lt;simhash::Simhasher, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="469" width="66.0" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="299.95" y="479.5" >std::al..</text>
</g>
<g >
<title>std::__shared_ptr&lt;SimHashWebPage,  (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="693" width="5.3" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1058.81" y="703.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned long const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1040.3" y="581" width="0.4" height="15.0" fill="rgb(226,100,23)" rx="2" ry="2" />
<text  x="1043.27" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::size (30,303,030 samples, 0.10%)</title><rect x="801.1" y="533" width="1.1" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="804.09" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="245.0" y="597" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="248.01" y="607.5" ></text>
</g>
<g >
<title>cppjieba::HMMModel::GetEmitProb (1,373,737,360 samples, 4.37%)</title><rect x="413.7" y="501" width="51.5" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="416.69" y="511.5" >cppji..</text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="347.7" y="181" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="350.74" y="191.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="693" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="703.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (434,343,430 samples, 1.38%)</title><rect x="252.6" y="677" width="16.3" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="255.60" y="687.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (101,010,100 samples, 0.32%)</title><rect x="1126.7" y="389" width="3.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1129.70" y="399.5" ></text>
</g>
<g >
<title>WebPageInvert::buildWeight (5,414,141,360 samples, 17.22%)</title><rect x="87.7" y="725" width="203.2" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="90.71" y="735.5" >WebPageInvert::buildWeight</text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="343.9" y="229" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="346.95" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="1005.4" y="565" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1008.40" y="575.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.03%)</title><rect x="328.4" y="37" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="331.41" y="47.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (20,202,020 samples, 0.06%)</title><rect x="1107.0" y="229" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1109.99" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_default_append (767,676,760 samples, 2.44%)</title><rect x="679.4" y="485" width="28.8" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="682.41" y="495.5" >st..</text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="939.4" y="549" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="942.44" y="559.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (414,141,410 samples, 1.32%)</title><rect x="36.9" y="613" width="15.6" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="39.91" y="623.5" ></text>
</g>
<g >
<title>clear_page_erms (10,101,010 samples, 0.03%)</title><rect x="349.3" y="53" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="352.25" y="63.5" ></text>
</g>
<g >
<title>std::_Rb_tree_decrement (20,202,020 samples, 0.06%)</title><rect x="934.9" y="565" width="0.8" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="937.90" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="977.3" y="421" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="980.35" y="431.5" ></text>
</g>
<g >
<title>cppjieba::Trie::CreateTrie (313,131,310 samples, 1.00%)</title><rect x="1064.2" y="341" width="11.7" height="15.0" fill="rgb(233,130,31)" rx="2" ry="2" />
<text  x="1067.15" y="351.5" ></text>
</g>
<g >
<title>std::less&lt;std::pair&lt;int, double&gt; &gt;::operator (30,303,030 samples, 0.10%)</title><rect x="80.9" y="661" width="1.1" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="83.88" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="275.3" y="597" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="278.34" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (20,202,020 samples, 0.06%)</title><rect x="912.2" y="613" width="0.7" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="915.15" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n&lt;cppjieba::Dag*, unsigned long&gt; (171,717,170 samples, 0.55%)</title><rect x="178.7" y="517" width="6.4" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="181.68" y="527.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="1058.5" y="277" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1061.47" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="186.3" y="533" width="0.3" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="189.26" y="543.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::SetStaticWordWeights (474,747,470 samples, 1.51%)</title><rect x="1093.3" y="373" width="17.9" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1096.34" y="383.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRuneInString (10,101,010 samples, 0.03%)</title><rect x="315.5" y="293" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="318.52" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="621.4" y="389" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="624.42" y="399.5" ></text>
</g>
<g >
<title>do_writev (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="693" width="0.8" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.24" y="703.5" ></text>
</g>
<g >
<title>new_sync_read (10,101,010 samples, 0.03%)</title><rect x="21.4" y="629" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="24.37" y="639.5" ></text>
</g>
<g >
<title>cppjieba::Dag::Dag (363,636,360 samples, 1.16%)</title><rect x="687.8" y="405" width="13.6" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="690.75" y="415.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="328.4" y="149" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="331.41" y="159.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;SplitChinese, std::allocator&lt;SplitChinese&gt;,  (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="661" width="5.7" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="1129.70" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_bucket_index (40,404,040 samples, 0.13%)</title><rect x="231.0" y="629" width="1.5" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="233.99" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (80,808,080 samples, 0.26%)</title><rect x="300.0" y="277" width="3.0" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="302.98" y="287.5" ></text>
</g>
<g >
<title>tinyxml2::StrPair::GetStr (60,606,060 samples, 0.19%)</title><rect x="69.1" y="677" width="2.3" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="72.13" y="687.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit const*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="1108.5" y="325" width="2.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1111.50" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="234.8" y="645" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="237.78" y="655.5" ></text>
</g>
<g >
<title>_raw_spin_lock (20,202,020 samples, 0.06%)</title><rect x="1145.3" y="629" width="0.7" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1148.27" y="639.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="913.7" y="613" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="916.67" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_eq (10,101,010 samples, 0.03%)</title><rect x="884.5" y="469" width="0.4" height="15.0" fill="rgb(222,79,18)" rx="2" ry="2" />
<text  x="887.48" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SimHashWebPage&gt; &gt;::construct&lt;SimHashWebPage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="613" width="66.0" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="299.95" y="623.5" >std::al..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,101,010 samples, 0.03%)</title><rect x="1003.1" y="565" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="1006.13" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (10,101,010 samples, 0.03%)</title><rect x="247.3" y="629" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="250.29" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="1093.0" y="357" width="0.3" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="1095.96" y="367.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="370.9" y="469" width="0.3" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="373.86" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="1041.8" y="549" width="0.4" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1044.79" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (545,454,540 samples, 1.73%)</title><rect x="984.2" y="597" width="20.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="987.17" y="607.5" ></text>
</g>
<g >
<title>std::_Construct&lt;cppjieba::Dag&gt; (171,717,170 samples, 0.55%)</title><rect x="178.7" y="485" width="6.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="181.68" y="495.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="312.1" y="293" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="315.11" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (50,505,050 samples, 0.16%)</title><rect x="1070.2" y="229" width="1.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1073.22" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, double&gt;, false, false&gt;::operator (20,202,020 samples, 0.06%)</title><rect x="418.6" y="485" width="0.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="421.62" y="495.5" ></text>
</g>
<g >
<title>std::move&lt;int  (10,101,010 samples, 0.03%)</title><rect x="95.7" y="629" width="0.3" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="98.67" y="639.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="105.1" y="645" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="108.14" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (20,202,020 samples, 0.06%)</title><rect x="1129.7" y="277" width="0.8" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1132.73" y="287.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::operator= (30,303,030 samples, 0.10%)</title><rect x="982.3" y="533" width="1.1" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="985.28" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_emplace&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (151,515,150 samples, 0.48%)</title><rect x="1069.5" y="277" width="5.6" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="1072.46" y="287.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (60,606,060 samples, 0.19%)</title><rect x="1102.4" y="277" width="2.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1105.44" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (181,818,180 samples, 0.58%)</title><rect x="424.3" y="437" width="6.8" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="427.31" y="447.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;int, std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt;, std::_Select1st&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt; &gt;::_M_lower_bound (10,101,010 samples, 0.03%)</title><rect x="296.6" y="661" width="0.3" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="299.57" y="671.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (10,101,010 samples, 0.03%)</title><rect x="1025.1" y="549" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1028.11" y="559.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="709" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="1122.9" y="277" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1125.91" y="287.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="324.2" y="197" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="327.24" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_key (212,121,210 samples, 0.67%)</title><rect x="955.4" y="549" width="7.9" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="958.36" y="559.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="339.0" y="213" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="342.02" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.03%)</title><rect x="1056.2" y="325" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1059.19" y="335.5" ></text>
</g>
<g >
<title>mem_cgroup_from_task (10,101,010 samples, 0.03%)</title><rect x="1157.8" y="645" width="0.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="1160.78" y="655.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::ParseDeep (80,808,080 samples, 0.26%)</title><rect x="65.7" y="533" width="3.1" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="68.72" y="543.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::operator= (20,202,020 samples, 0.06%)</title><rect x="981.5" y="549" width="0.8" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="984.52" y="559.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="834.4" y="517" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="837.45" y="527.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="607.8" y="421" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="610.77" y="431.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_S_max_size (40,404,040 samples, 0.13%)</title><rect x="841.6" y="517" width="1.6" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="844.65" y="527.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned int const, double&gt;::pair&lt;unsigned int const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1115.3" y="277" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1118.33" y="287.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="894.7" y="485" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="897.72" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="1129.7" y="229" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1132.73" y="239.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="112.0" y="613" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="114.97" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (151,515,150 samples, 0.48%)</title><rect x="158.2" y="501" width="5.7" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="161.21" y="511.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="149" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1094.82" y="159.5" ></text>
</g>
<g >
<title>_int_free (131,313,130 samples, 0.42%)</title><rect x="16.4" y="741" width="5.0" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="19.44" y="751.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="110.4" y="645" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="113.45" y="655.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::Dag*&gt; (10,101,010 samples, 0.03%)</title><rect x="177.9" y="517" width="0.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="180.92" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (525,252,520 samples, 1.67%)</title><rect x="919.4" y="597" width="19.7" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="922.35" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt;::~unordered_map (70,707,070 samples, 0.22%)</title><rect x="291.3" y="565" width="2.6" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="294.26" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="236.3" y="645" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="239.30" y="655.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="276.5" y="597" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="279.48" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;, true&gt;::_S_get (10,101,010 samples, 0.03%)</title><rect x="1132.0" y="309" width="0.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1135.00" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="312.1" y="309" width="0.4" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="315.11" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_erase (90,909,090 samples, 0.29%)</title><rect x="977.3" y="581" width="3.5" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="980.35" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="981.5" y="533" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="984.52" y="543.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::~KeywordExtractor (30,303,030 samples, 0.10%)</title><rect x="1060.0" y="437" width="1.1" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1062.98" y="447.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="277" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="1127.04" y="287.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (50,505,050 samples, 0.16%)</title><rect x="14.2" y="581" width="1.9" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="17.17" y="591.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.03%)</title><rect x="1156.3" y="597" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1159.26" y="607.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_put_node (10,101,010 samples, 0.03%)</title><rect x="978.5" y="485" width="0.4" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="981.49" y="495.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (10,101,010 samples, 0.03%)</title><rect x="1118.0" y="373" width="0.4" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="1120.98" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (121,212,120 samples, 0.39%)</title><rect x="1064.9" y="293" width="4.6" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1067.91" y="303.5" ></text>
</g>
<g >
<title>vfs_writev (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="677" width="0.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1192.24" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::get_allocator (10,101,010 samples, 0.03%)</title><rect x="982.7" y="485" width="0.3" height="15.0" fill="rgb(216,55,13)" rx="2" ry="2" />
<text  x="985.66" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (20,202,020 samples, 0.06%)</title><rect x="1068.7" y="245" width="0.8" height="15.0" fill="rgb(208,16,3)" rx="2" ry="2" />
<text  x="1071.70" y="255.5" ></text>
</g>
<g >
<title>std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="962.9" y="533" width="0.4" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="965.95" y="543.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="347.7" y="229" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="350.74" y="239.5" ></text>
</g>
<g >
<title>__fget_light (20,202,020 samples, 0.06%)</title><rect x="1159.3" y="661" width="0.8" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1162.30" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (505,050,500 samples, 1.61%)</title><rect x="97.6" y="677" width="18.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="100.56" y="687.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1110.8" y="293" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1113.78" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (20,202,020 samples, 0.06%)</title><rect x="1070.6" y="213" width="0.8" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1073.60" y="223.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="328.4" y="213" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="331.41" y="223.5" ></text>
</g>
<g >
<title>std::remove_if&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, SplitChinese::rinse (121,212,120 samples, 0.39%)</title><rect x="221.5" y="661" width="4.6" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="224.51" y="671.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="324.2" y="181" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="327.24" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="149" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1111.50" y="159.5" ></text>
</g>
<g >
<title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, cppjieba::KeywordExtractor::Word, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::lower_bound (10,101,010 samples, 0.03%)</title><rect x="918.2" y="613" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="921.22" y="623.5" ></text>
</g>
<g >
<title>_int_free (10,101,010 samples, 0.03%)</title><rect x="978.5" y="453" width="0.4" height="15.0" fill="rgb(247,196,46)" rx="2" ry="2" />
<text  x="981.49" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="299.6" y="261" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="302.60" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::WordRange&gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="833.3" y="533" width="0.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="836.31" y="543.5" ></text>
</g>
<g >
<title>std::make_shared&lt;JiebaSplitCn, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="581" width="64.0" height="15.0" fill="rgb(243,175,42)" rx="2" ry="2" />
<text  x="1065.26" y="591.5" >std::ma..</text>
</g>
<g >
<title>__strlen_avx2 (20,202,020 samples, 0.06%)</title><rect x="1062.6" y="373" width="0.8" height="15.0" fill="rgb(246,188,45)" rx="2" ry="2" />
<text  x="1065.64" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt; &gt; &gt;::_M_realloc_insert&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1044.4" y="597" width="0.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="1047.44" y="607.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::~Word (10,101,010 samples, 0.03%)</title><rect x="977.3" y="469" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="980.35" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (50,505,050 samples, 0.16%)</title><rect x="85.1" y="693" width="1.8" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="88.05" y="703.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (50,505,050 samples, 0.16%)</title><rect x="340.2" y="261" width="1.9" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="343.16" y="271.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (20,202,020 samples, 0.06%)</title><rect x="349.3" y="85" width="0.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="352.25" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (30,303,030 samples, 0.10%)</title><rect x="622.2" y="389" width="1.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="625.17" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="1069.5" y="197" width="0.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1072.46" y="207.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="326.9" y="213" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="329.89" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::operator++ (10,101,010 samples, 0.03%)</title><rect x="1128.2" y="341" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1131.21" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator* (10,101,010 samples, 0.03%)</title><rect x="59.3" y="693" width="0.4" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="62.28" y="703.5" ></text>
</g>
<g >
<title>std::_Rb_tree_const_iterator&lt;std::pair&lt;int, double&gt; &gt;::operator++ (10,101,010 samples, 0.03%)</title><rect x="1061.5" y="725" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1064.50" y="735.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="1105.8" y="309" width="2.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1108.85" y="319.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1077.8" y="325" width="0.8" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="1080.80" y="335.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="1096.4" y="181" width="0.4" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1099.37" y="191.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="246.2" y="645" width="0.7" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="249.15" y="655.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (40,404,040 samples, 0.13%)</title><rect x="939.8" y="597" width="1.5" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="942.82" y="607.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt;::_M_next (40,404,040 samples, 0.13%)</title><rect x="291.6" y="501" width="1.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="294.64" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (10,101,010 samples, 0.03%)</title><rect x="473.6" y="437" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="476.58" y="447.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag*, cppjieba::Dag&gt; (10,101,010 samples, 0.03%)</title><rect x="195.7" y="581" width="0.4" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="198.74" y="591.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;::~pair (40,404,040 samples, 0.13%)</title><rect x="293.9" y="581" width="1.5" height="15.0" fill="rgb(227,104,25)" rx="2" ry="2" />
<text  x="296.91" y="591.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="1105.5" y="229" width="0.3" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1108.47" y="239.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (10,101,010 samples, 0.03%)</title><rect x="1079.3" y="53" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1082.32" y="63.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_S_relocate (60,606,060 samples, 0.19%)</title><rect x="838.2" y="533" width="2.3" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="841.24" y="543.5" ></text>
</g>
<g >
<title>tinyxml2::XMLUtil::SkipWhiteSpace (10,101,010 samples, 0.03%)</title><rect x="65.3" y="517" width="0.4" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="68.34" y="527.5" ></text>
</g>
<g >
<title>std::__detail::operator!=&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; (10,101,010 samples, 0.03%)</title><rect x="1057.0" y="357" width="0.3" height="15.0" fill="rgb(209,19,4)" rx="2" ry="2" />
<text  x="1059.95" y="367.5" ></text>
</g>
<g >
<title>cppjieba::GetWordFromRunes (272,727,270 samples, 0.87%)</title><rect x="374.3" y="549" width="10.2" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="377.27" y="559.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit const*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*, cppjieba::DictUnit&gt; (60,606,060 samples, 0.19%)</title><rect x="1108.5" y="341" width="2.3" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1111.50" y="351.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="883.0" y="437" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="885.96" y="447.5" ></text>
</g>
<g >
<title>mem_cgroup_try_charge (10,101,010 samples, 0.03%)</title><rect x="1146.8" y="597" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1149.79" y="607.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="1130.5" y="373" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="1133.49" y="383.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="1094.9" y="165" width="0.7" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1097.86" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (30,303,030 samples, 0.10%)</title><rect x="245.0" y="645" width="1.2" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="248.01" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="210.5" y="485" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="213.52" y="495.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_Vector_impl_data::_Vector_impl_data (30,303,030 samples, 0.10%)</title><rect x="847.0" y="501" width="1.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="849.95" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (171,717,170 samples, 0.55%)</title><rect x="877.7" y="469" width="6.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="880.66" y="479.5" ></text>
</g>
<g >
<title>std::__addressof&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1057.3" y="245" width="0.4" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="1060.33" y="255.5" ></text>
</g>
<g >
<title>simhash::jenkins::hashlittle2 (10,101,010 samples, 0.03%)</title><rect x="1045.2" y="645" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1048.20" y="655.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::GetMinWeight (10,101,010 samples, 0.03%)</title><rect x="738.9" y="517" width="0.4" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="741.92" y="527.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (292,929,290 samples, 0.93%)</title><rect x="1094.9" y="309" width="10.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="319.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (10,101,010 samples, 0.03%)</title><rect x="478.5" y="501" width="0.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="481.51" y="511.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="501" width="66.0" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="299.95" y="511.5" >std::__..</text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (232,323,230 samples, 0.74%)</title><rect x="897.7" y="549" width="8.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="900.75" y="559.5" ></text>
</g>
<g >
<title>fileno (10,101,010 samples, 0.03%)</title><rect x="1158.9" y="757" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1161.92" y="767.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="1113.1" y="117" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1116.05" y="127.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="338.3" y="197" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="341.26" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_Vector_impl::~_Vector_impl (20,202,020 samples, 0.06%)</title><rect x="809.0" y="501" width="0.8" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="812.05" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (20,202,020 samples, 0.06%)</title><rect x="104.4" y="645" width="0.7" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="107.38" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="1058.1" y="373" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="1061.09" y="383.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (10,101,010 samples, 0.03%)</title><rect x="1078.9" y="69" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1081.94" y="79.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (60,606,060 samples, 0.19%)</title><rect x="13.8" y="613" width="2.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="16.79" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (70,707,070 samples, 0.22%)</title><rect x="672.6" y="469" width="2.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="675.59" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;WordWeight::WEIGHT&gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="295.0" y="501" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="298.05" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1084.2" y="357" width="0.8" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="1087.24" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="306.4" y="213" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="309.42" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::size (50,505,050 samples, 0.16%)</title><rect x="791.2" y="517" width="1.9" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="794.23" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_const_iterator (40,404,040 samples, 0.13%)</title><rect x="517.2" y="501" width="1.5" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="520.18" y="511.5" ></text>
</g>
<g >
<title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*&gt; (20,202,020 samples, 0.06%)</title><rect x="1029.3" y="469" width="0.7" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="1032.28" y="479.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="206.7" y="469" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="209.73" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned int&gt;, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="824.6" y="437" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="827.59" y="447.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (60,606,060 samples, 0.19%)</title><rect x="215.8" y="581" width="2.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="218.83" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (90,909,090 samples, 0.29%)</title><rect x="966.4" y="533" width="3.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="969.36" y="543.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="340.9" y="165" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="343.92" y="175.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (131,313,130 samples, 0.42%)</title><rect x="39.6" y="565" width="4.9" height="15.0" fill="rgb(211,32,7)" rx="2" ry="2" />
<text  x="42.57" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, double&gt;, false, false&gt;::_Node_const_iterator (30,303,030 samples, 0.10%)</title><rect x="420.9" y="469" width="1.1" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="423.90" y="479.5" ></text>
</g>
<g >
<title>handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="181" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1089.90" y="191.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1080.5" y="293" width="0.7" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1083.45" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (20,202,020 samples, 0.06%)</title><rect x="517.9" y="485" width="0.8" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="520.93" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (50,505,050 samples, 0.16%)</title><rect x="282.9" y="661" width="1.9" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="285.92" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::resize (90,909,090 samples, 0.29%)</title><rect x="369.0" y="565" width="3.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="371.97" y="575.5" ></text>
</g>
<g >
<title>cppjieba::Trie::Find (1,747,474,730 samples, 5.56%)</title><rect x="121.4" y="581" width="65.6" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="124.44" y="591.5" >cppjieb..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,202,020 samples, 0.06%)</title><rect x="1024.0" y="549" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="1026.97" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree_insert_and_rebalance (30,303,030 samples, 0.10%)</title><rect x="83.5" y="677" width="1.2" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="86.54" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="102.1" y="661" width="0.4" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="105.11" y="671.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1096.4" y="165" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1099.37" y="175.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (80,808,080 samples, 0.26%)</title><rect x="1055.8" y="389" width="3.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1058.81" y="399.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (20,202,020 samples, 0.06%)</title><rect x="64.6" y="709" width="0.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="67.58" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::operator[] (50,505,050 samples, 0.16%)</title><rect x="676.8" y="501" width="1.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="679.76" y="511.5" ></text>
</g>
<g >
<title>cppjieba::Jieba::Jieba (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="421" width="64.0" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1065.26" y="431.5" >cppjieb..</text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, true&gt;::_Node_const_iterator (10,101,010 samples, 0.03%)</title><rect x="1022.5" y="581" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1025.46" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (30,303,030 samples, 0.10%)</title><rect x="318.6" y="341" width="1.1" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="321.55" y="351.5" ></text>
</g>
<g >
<title>do_page_fault (20,202,020 samples, 0.06%)</title><rect x="1108.5" y="213" width="0.8" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1111.50" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (3,808,080,770 samples, 12.11%)</title><rect x="532.7" y="485" width="142.9" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="535.72" y="495.5" >std::_Hashtable&lt;un..</text>
</g>
<g >
<title>std::__addressof&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="369.0" y="501" width="0.3" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="371.97" y="511.5" ></text>
</g>
<g >
<title>std::__detail::operator==&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; (10,101,010 samples, 0.03%)</title><rect x="522.1" y="501" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="525.10" y="511.5" ></text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (10,101,010 samples, 0.03%)</title><rect x="903.8" y="517" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="906.81" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_S_do_relocate (30,303,030 samples, 0.10%)</title><rect x="839.4" y="517" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="842.37" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="342.4" y="277" width="1.2" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="345.43" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::find (131,313,130 samples, 0.42%)</title><rect x="1064.5" y="309" width="5.0" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1067.53" y="319.5" ></text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (30,303,030 samples, 0.10%)</title><rect x="316.3" y="293" width="1.1" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="319.28" y="303.5" ></text>
</g>
<g >
<title>SingleWord::splitString (757,575,750 samples, 2.41%)</title><rect x="88.5" y="709" width="28.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="91.46" y="719.5" >Si..</text>
</g>
<g >
<title>add_transaction_credits (10,101,010 samples, 0.03%)</title><rect x="42.6" y="501" width="0.4" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="45.60" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="350.0" y="325" width="0.4" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="353.01" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="314.8" y="309" width="0.3" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="317.76" y="319.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="921.6" y="549" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="924.63" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="994.4" y="533" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="997.41" y="543.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (30,303,030 samples, 0.10%)</title><rect x="1035.3" y="581" width="1.2" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1038.35" y="591.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="709" width="0.4" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1064.12" y="719.5" ></text>
</g>
<g >
<title>vfs_read (10,101,010 samples, 0.03%)</title><rect x="21.4" y="661" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="24.37" y="671.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (90,909,090 samples, 0.29%)</title><rect x="1143.8" y="757" width="3.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1146.76" y="767.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::~LocalVector (10,101,010 samples, 0.03%)</title><rect x="314.4" y="277" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="317.38" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned int&gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="881.4" y="437" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="884.45" y="447.5" ></text>
</g>
<g >
<title>ext4_mark_iloc_dirty (40,404,040 samples, 0.13%)</title><rect x="48.3" y="485" width="1.5" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="51.28" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (10,101,010 samples, 0.03%)</title><rect x="238.6" y="693" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="241.57" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, false, true&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="361.8" y="341" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="364.76" y="351.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (10,101,010 samples, 0.03%)</title><rect x="21.4" y="549" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="24.37" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (141,414,140 samples, 0.45%)</title><rect x="1046.0" y="677" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1048.96" y="687.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="213" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1089.90" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,101,010 samples, 0.03%)</title><rect x="87.3" y="645" width="0.4" height="15.0" fill="rgb(241,168,40)" rx="2" ry="2" />
<text  x="90.33" y="655.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="565" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1161.54" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="266.2" y="613" width="0.4" height="15.0" fill="rgb(246,193,46)" rx="2" ry="2" />
<text  x="269.24" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="251.8" y="677" width="0.4" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="254.84" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="895.9" y="517" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="898.85" y="527.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (40,404,040 samples, 0.13%)</title><rect x="1103.2" y="229" width="1.5" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1106.20" y="239.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="333.7" y="181" width="0.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="336.71" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_v (70,707,070 samples, 0.22%)</title><rect x="445.9" y="389" width="2.7" height="15.0" fill="rgb(224,87,21)" rx="2" ry="2" />
<text  x="448.91" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (40,404,040 samples, 0.13%)</title><rect x="528.5" y="469" width="1.6" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="531.55" y="479.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="334.9" y="117" width="0.3" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="337.85" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="420.1" y="469" width="0.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="423.14" y="479.5" ></text>
</g>
<g >
<title>std::__unguarded_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (40,404,040 samples, 0.13%)</title><rect x="329.5" y="309" width="1.6" height="15.0" fill="rgb(216,50,12)" rx="2" ry="2" />
<text  x="332.54" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (70,707,070 samples, 0.22%)</title><rect x="300.4" y="261" width="2.6" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="303.36" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="478.1" y="469" width="0.4" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="481.13" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (70,707,070 samples, 0.22%)</title><rect x="263.6" y="597" width="2.6" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="266.59" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_node (121,212,120 samples, 0.39%)</title><rect x="229.9" y="661" width="4.5" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="232.85" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_max_size (60,606,060 samples, 0.19%)</title><rect x="106.7" y="629" width="2.2" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="109.66" y="639.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="1095.6" y="181" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1098.62" y="191.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="470.9" y="469" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="473.93" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="246.5" y="613" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="249.53" y="623.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (30,303,030 samples, 0.10%)</title><rect x="1078.6" y="229" width="1.1" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1081.56" y="239.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;, long, cppjieba::KeywordExtractor::Word, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="981.1" y="549" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="984.14" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="1071.4" y="213" width="0.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1074.36" y="223.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1096.0" y="117" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1098.99" y="127.5" ></text>
</g>
<g >
<title>std::_Construct&lt;limonp::LocalVector&lt;unsigned int&gt;, limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (50,505,050 samples, 0.16%)</title><rect x="312.5" y="261" width="1.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="315.49" y="271.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (10,101,010 samples, 0.03%)</title><rect x="333.7" y="165" width="0.4" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="336.71" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (151,515,150 samples, 0.48%)</title><rect x="425.4" y="421" width="5.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="428.44" y="431.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="668.4" y="405" width="0.4" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="671.42" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (101,010,100 samples, 0.32%)</title><rect x="1118.7" y="341" width="3.8" height="15.0" fill="rgb(206,8,2)" rx="2" ry="2" />
<text  x="1121.74" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="360.6" y="325" width="0.4" height="15.0" fill="rgb(213,36,8)" rx="2" ry="2" />
<text  x="363.63" y="335.5" ></text>
</g>
<g >
<title>tinyxml2::XMLText::ParseDeep (80,808,080 samples, 0.26%)</title><rect x="65.7" y="517" width="3.1" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="68.72" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="1073.6" y="229" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1076.63" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Word&gt; (20,202,020 samples, 0.06%)</title><rect x="910.6" y="517" width="0.8" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="913.64" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_1&lt;true&gt;::__uninit_default_n&lt;double*, unsigned long&gt; (40,404,040 samples, 0.13%)</title><rect x="469.0" y="437" width="1.6" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="472.04" y="447.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::~vector (10,101,010 samples, 0.03%)</title><rect x="1110.8" y="357" width="0.4" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="1113.78" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="236.3" y="661" width="0.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="239.30" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="814.7" y="485" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="817.73" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (30,303,030 samples, 0.10%)</title><rect x="295.4" y="549" width="1.2" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.43" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (70,707,070 samples, 0.22%)</title><rect x="134.7" y="517" width="2.7" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="137.71" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (30,303,030 samples, 0.10%)</title><rect x="245.0" y="613" width="1.2" height="15.0" fill="rgb(223,83,20)" rx="2" ry="2" />
<text  x="248.01" y="623.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;SimHashWebPage&gt;::shared_ptr&lt;std::allocator&lt;SimHashWebPage&gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="677" width="66.0" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="299.95" y="687.5" >std::sh..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::new_allocator (40,404,040 samples, 0.13%)</title><rect x="925.0" y="421" width="1.6" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="928.04" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (10,101,010 samples, 0.03%)</title><rect x="670.7" y="421" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="673.69" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (10,101,010 samples, 0.03%)</title><rect x="621.0" y="405" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="624.04" y="415.5" ></text>
</g>
<g >
<title>alloc_pages_vma (20,202,020 samples, 0.06%)</title><rect x="1089.6" y="85" width="0.7" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1092.55" y="95.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="245" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1127.04" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_check_len (10,101,010 samples, 0.03%)</title><rect x="185.9" y="533" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="188.88" y="543.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit&gt; (30,303,030 samples, 0.10%)</title><rect x="1088.0" y="277" width="1.2" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1091.03" y="287.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="165" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1089.90" y="175.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="337.5" y="197" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="340.50" y="207.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_allocate (40,404,040 samples, 0.13%)</title><rect x="836.7" y="533" width="1.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="839.72" y="543.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="1097.5" y="133" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1100.51" y="143.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="1104.0" y="181" width="0.3" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1106.95" y="191.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (40,404,040 samples, 0.13%)</title><rect x="334.1" y="245" width="1.5" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="337.09" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="206.7" y="549" width="1.2" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="209.73" y="559.5" ></text>
</g>
<g >
<title>generic_file_buffered_read (10,101,010 samples, 0.03%)</title><rect x="21.4" y="581" width="0.4" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="24.37" y="591.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="336.0" y="165" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="338.99" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (20,202,020 samples, 0.06%)</title><rect x="474.3" y="453" width="0.8" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="477.34" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="229" width="0.3" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1090.65" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="471.7" y="485" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="474.69" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt; &gt;::find (434,343,430 samples, 1.38%)</title><rect x="252.6" y="693" width="16.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="255.60" y="703.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::KeywordExtractor::Word*&gt; (70,707,070 samples, 0.22%)</title><rect x="1031.9" y="565" width="2.7" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1034.93" y="575.5" ></text>
</g>
<g >
<title>cppjieba::PreFilter::Next (1,161,616,150 samples, 3.69%)</title><rect x="854.2" y="565" width="43.5" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="857.16" y="575.5" >cppj..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="113.9" y="565" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="116.86" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (50,505,050 samples, 0.16%)</title><rect x="1016.4" y="533" width="1.9" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1019.39" y="543.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (10,101,010 samples, 0.03%)</title><rect x="314.8" y="277" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="317.76" y="287.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="345.1" y="277" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="348.09" y="287.5" ></text>
</g>
<g >
<title>std::tuple&lt;unsigned int const&amp;&gt;::tuple (10,101,010 samples, 0.03%)</title><rect x="284.1" y="613" width="0.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="287.06" y="623.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::KeywordExtractor::Word&gt; (60,606,060 samples, 0.19%)</title><rect x="1032.3" y="533" width="2.3" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="1035.31" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="107.8" y="613" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="110.80" y="623.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="229" width="0.4" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1094.82" y="239.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (60,606,060 samples, 0.19%)</title><rect x="347.7" y="261" width="2.3" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="350.74" y="271.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="261" width="0.3" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1090.65" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::back (20,202,020 samples, 0.06%)</title><rect x="202.9" y="565" width="0.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="205.94" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_Hash_node_value_base (10,101,010 samples, 0.03%)</title><rect x="308.3" y="229" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="311.32" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::deallocate (30,303,030 samples, 0.10%)</title><rect x="851.5" y="501" width="1.1" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="854.50" y="511.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::WordRange*, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="848.1" y="533" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="851.09" y="543.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="347.4" y="277" width="0.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="350.36" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;unsigned int const, std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (20,202,020 samples, 0.06%)</title><rect x="246.9" y="645" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="249.91" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, true, true&gt;::_Node_const_iterator (10,101,010 samples, 0.03%)</title><rect x="1005.4" y="581" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="1008.40" y="591.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (20,202,020 samples, 0.06%)</title><rect x="1104.7" y="245" width="0.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="1107.71" y="255.5" ></text>
</g>
<g >
<title>usb_hcd_poll_rh_status (10,101,010 samples, 0.03%)</title><rect x="514.5" y="373" width="0.4" height="15.0" fill="rgb(208,16,4)" rx="2" ry="2" />
<text  x="517.52" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (10,101,010 samples, 0.03%)</title><rect x="276.9" y="613" width="0.3" height="15.0" fill="rgb(208,14,3)" rx="2" ry="2" />
<text  x="279.86" y="623.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="219.2" y="581" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="222.24" y="591.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (60,606,060 samples, 0.19%)</title><rect x="331.1" y="229" width="2.2" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="239.5" ></text>
</g>
<g >
<title>pagevec_lru_move_fn (10,101,010 samples, 0.03%)</title><rect x="1156.6" y="581" width="0.4" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="1159.64" y="591.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="286.3" y="677" width="1.5" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="289.33" y="687.5" ></text>
</g>
<g >
<title>ext4_get_group_desc (10,101,010 samples, 0.03%)</title><rect x="50.6" y="453" width="0.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="53.56" y="463.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned int&gt;::operator (717,171,710 samples, 2.28%)</title><rect x="641.1" y="405" width="26.9" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="644.13" y="415.5" >s..</text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::lower_bound (878,787,870 samples, 2.79%)</title><rect x="943.6" y="581" width="33.0" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="946.61" y="591.5" >st..</text>
</g>
<g >
<title>__x64_sys_munmap (10,101,010 samples, 0.03%)</title><rect x="314.8" y="245" width="0.3" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="317.76" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (60,606,060 samples, 0.19%)</title><rect x="624.1" y="405" width="2.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="627.07" y="415.5" ></text>
</g>
<g >
<title>ext4_do_update_inode (30,303,030 samples, 0.10%)</title><rect x="48.7" y="469" width="1.1" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="51.66" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (40,404,040 samples, 0.13%)</title><rect x="277.2" y="645" width="1.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="280.23" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (90,909,090 samples, 0.29%)</title><rect x="626.3" y="405" width="3.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="629.34" y="415.5" ></text>
</g>
<g >
<title>__alloc_pages_nodemask (20,202,020 samples, 0.06%)</title><rect x="1146.0" y="597" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1149.03" y="607.5" ></text>
</g>
<g >
<title>__do_page_fault (30,303,030 samples, 0.10%)</title><rect x="348.9" y="181" width="1.1" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="351.88" y="191.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="484.6" y="421" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="487.58" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (30,303,030 samples, 0.10%)</title><rect x="637.7" y="357" width="1.2" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="640.72" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="939.1" y="565" width="0.3" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="942.07" y="575.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (10,101,010 samples, 0.03%)</title><rect x="325.4" y="181" width="0.4" height="15.0" fill="rgb(251,212,50)" rx="2" ry="2" />
<text  x="328.37" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (10,101,010 samples, 0.03%)</title><rect x="85.8" y="645" width="0.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="88.81" y="655.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="933.0" y="565" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="936.00" y="575.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::~DictTrie (111,111,110 samples, 0.35%)</title><rect x="1126.7" y="421" width="4.2" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="1129.70" y="431.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::~_Vector_base (30,303,030 samples, 0.10%)</title><rect x="472.1" y="485" width="1.1" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="475.07" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="128.6" y="565" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="131.64" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash (50,505,050 samples, 0.16%)</title><rect x="1123.3" y="325" width="1.9" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="1126.29" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (222,222,220 samples, 0.71%)</title><rect x="544.8" y="437" width="8.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="547.85" y="447.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::Init (1,434,343,420 samples, 4.56%)</title><rect x="296.9" y="389" width="53.9" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="299.95" y="399.5" >cppji..</text>
</g>
<g >
<title>std::operator==&lt;char&gt; (10,101,010 samples, 0.03%)</title><rect x="245.4" y="581" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="248.39" y="591.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag*&gt; (20,202,020 samples, 0.06%)</title><rect x="680.9" y="453" width="0.8" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="683.93" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="418.2" y="485" width="0.4" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="421.24" y="495.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt;*, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt; (50,505,050 samples, 0.16%)</title><rect x="1078.6" y="325" width="1.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="1081.56" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.03%)</title><rect x="350.4" y="261" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="353.39" y="271.5" ></text>
</g>
<g >
<title>std::sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, bool  (404,040,400 samples, 1.28%)</title><rect x="329.5" y="357" width="15.2" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="332.54" y="367.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="707.5" y="453" width="0.3" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="710.46" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (10,101,010 samples, 0.03%)</title><rect x="325.4" y="261" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="328.37" y="271.5" ></text>
</g>
<g >
<title>std::__shared_count&lt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="565" width="5.7" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1129.70" y="575.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="346.2" y="133" width="0.4" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="349.22" y="143.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (30,303,030 samples, 0.10%)</title><rect x="1109.3" y="261" width="1.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1112.26" y="271.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="1110.0" y="85" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1113.02" y="95.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (10,101,010 samples, 0.03%)</title><rect x="233.6" y="581" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="236.64" y="591.5" ></text>
</g>
<g >
<title>std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1093.3" y="293" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1096.34" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (60,606,060 samples, 0.19%)</title><rect x="291.6" y="533" width="2.3" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="294.64" y="543.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::WeightCompare (10,101,010 samples, 0.03%)</title><rect x="331.8" y="149" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="334.82" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="303.0" y="261" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="306.01" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag&gt; (10,101,010 samples, 0.03%)</title><rect x="195.7" y="533" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="198.74" y="543.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;SplitChinese,  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="677" width="64.0" height="15.0" fill="rgb(244,182,43)" rx="2" ry="2" />
<text  x="1065.26" y="687.5" >std::__..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="249.2" y="629" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="252.18" y="639.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="1086.5" y="293" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1089.52" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="350.0" y="357" width="0.8" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="353.01" y="367.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (131,313,130 samples, 0.42%)</title><rect x="1094.9" y="245" width="4.9" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="255.5" ></text>
</g>
<g >
<title>do_user_addr_fault (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="213" width="0.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1090.65" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator&lt; &lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="334.1" y="213" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="337.09" y="223.5" ></text>
</g>
<g >
<title>cppjieba::MPSegment::CutByDag (292,929,290 samples, 0.93%)</title><rect x="786.7" y="533" width="11.0" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="789.68" y="543.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::FirstChildElement (10,101,010 samples, 0.03%)</title><rect x="71.4" y="709" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="74.41" y="719.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_Rb_tree_iterator (10,101,010 samples, 0.03%)</title><rect x="975.8" y="565" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="978.83" y="575.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (10,101,010 samples, 0.03%)</title><rect x="13.0" y="741" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="16.03" y="751.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (50,505,050 samples, 0.16%)</title><rect x="1067.6" y="261" width="1.9" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1070.57" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::~vector (10,101,010 samples, 0.03%)</title><rect x="1130.5" y="405" width="0.4" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="1133.49" y="415.5" ></text>
</g>
<g >
<title>std::__relocate_object_a&lt;cppjieba::WordRange, cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="835.2" y="453" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="838.20" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (60,606,060 samples, 0.19%)</title><rect x="636.6" y="389" width="2.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="639.58" y="399.5" ></text>
</g>
<g >
<title>jbd2__journal_start (10,101,010 samples, 0.03%)</title><rect x="47.9" y="485" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="50.91" y="495.5" ></text>
</g>
<g >
<title>generic_write_end (131,313,130 samples, 0.42%)</title><rect x="46.4" y="549" width="4.9" height="15.0" fill="rgb(206,8,1)" rx="2" ry="2" />
<text  x="49.39" y="559.5" ></text>
</g>
<g >
<title>get_mem_cgroup_from_mm (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="69" width="0.4" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1094.82" y="79.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (10,101,010 samples, 0.03%)</title><rect x="1115.7" y="389" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1118.71" y="399.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (20,202,020 samples, 0.06%)</title><rect x="383.0" y="485" width="0.7" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="385.99" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (20,202,020 samples, 0.06%)</title><rect x="461.8" y="437" width="0.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="464.83" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="1064.5" y="293" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1067.53" y="303.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_S_key (40,404,040 samples, 0.13%)</title><rect x="77.9" y="661" width="1.5" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="80.85" y="671.5" ></text>
</g>
<g >
<title>std::__shared_ptr&lt;simhash::Simhasher,  (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="565" width="5.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1058.81" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (30,303,030 samples, 0.10%)</title><rect x="1088.0" y="293" width="1.2" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1091.03" y="303.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="1090.7" y="213" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1093.69" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="361.0" y="309" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="364.01" y="319.5" ></text>
</g>
<g >
<title>cppjieba::Jieba::~Jieba (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="453" width="5.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1058.81" y="463.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="333.3" y="229" width="0.8" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="336.33" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="826.9" y="549" width="0.3" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="829.86" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="671.8" y="469" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="674.83" y="479.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="597" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="1064.12" y="607.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="245" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1114.91" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::DictUnit&gt;::construct&lt;cppjieba::DictUnit, cppjieba::DictUnit const&amp;&gt; (50,505,050 samples, 0.16%)</title><rect x="1086.1" y="325" width="1.9" height="15.0" fill="rgb(215,46,11)" rx="2" ry="2" />
<text  x="1089.14" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::find (20,202,020 samples, 0.06%)</title><rect x="710.9" y="517" width="0.7" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="713.87" y="527.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::size (20,202,020 samples, 0.06%)</title><rect x="190.1" y="597" width="0.7" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="193.05" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::back (80,808,080 samples, 0.26%)</title><rect x="392.8" y="517" width="3.1" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="395.85" y="527.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (20,202,020 samples, 0.06%)</title><rect x="115.4" y="661" width="0.7" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="118.38" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (151,515,150 samples, 0.48%)</title><rect x="109.7" y="661" width="5.7" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="112.69" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_Vector_base (40,404,040 samples, 0.13%)</title><rect x="802.2" y="517" width="1.5" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="805.23" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (60,606,060 samples, 0.19%)</title><rect x="270.4" y="661" width="2.3" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="273.41" y="671.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::Word::Word (212,121,210 samples, 0.67%)</title><rect x="1023.6" y="565" width="8.0" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="1026.59" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_Vector_impl::_Vector_impl (40,404,040 samples, 0.13%)</title><rect x="846.6" y="517" width="1.5" height="15.0" fill="rgb(248,197,47)" rx="2" ry="2" />
<text  x="849.58" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::substr (20,202,020 samples, 0.06%)</title><rect x="287.8" y="709" width="0.8" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="290.85" y="719.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt;::operator (60,606,060 samples, 0.19%)</title><rect x="777.2" y="485" width="2.3" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="780.21" y="495.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1039.9" y="549" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1042.89" y="559.5" ></text>
</g>
<g >
<title>std::__copy_move_a&lt;false, unsigned long const*, unsigned long*&gt; (20,202,020 samples, 0.06%)</title><rect x="1029.3" y="453" width="0.7" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1032.28" y="463.5" ></text>
</g>
<g >
<title>iov_iter_copy_from_user_atomic (20,202,020 samples, 0.06%)</title><rect x="1189.2" y="581" width="0.8" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="1192.24" y="591.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;cppjieba::WordRange*, cppjieba::WordRange*, std::allocator&lt;cppjieba::WordRange&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="839.0" y="517" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="841.99" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="349.3" y="149" width="0.7" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="352.25" y="159.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (30,303,030 samples, 0.10%)</title><rect x="348.9" y="245" width="1.1" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="351.88" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::_M_range_initialize&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (60,606,060 samples, 0.19%)</title><rect x="1111.2" y="341" width="2.2" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="1114.16" y="351.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="333.0" y="181" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="335.96" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_drop_node (10,101,010 samples, 0.03%)</title><rect x="977.3" y="549" width="0.4" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="980.35" y="559.5" ></text>
</g>
<g >
<title>cppjieba::Jieba::~Jieba (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="437" width="5.7" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="1129.70" y="447.5" ></text>
</g>
<g >
<title>run_timer_softirq (10,101,010 samples, 0.03%)</title><rect x="514.5" y="437" width="0.4" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="517.52" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="197.3" y="485" width="0.3" height="15.0" fill="rgb(252,217,52)" rx="2" ry="2" />
<text  x="200.25" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="87.3" y="597" width="0.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="90.33" y="607.5" ></text>
</g>
<g >
<title>__lru_cache_add (10,101,010 samples, 0.03%)</title><rect x="346.2" y="101" width="0.4" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="349.22" y="111.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="1127.8" y="229" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="1130.83" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;, true&gt;::_S_get (10,101,010 samples, 0.03%)</title><rect x="1130.9" y="293" width="0.3" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="1133.87" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::max_size (10,101,010 samples, 0.03%)</title><rect x="372.0" y="533" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="375.00" y="543.5" ></text>
</g>
<g >
<title>std::__distance&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="926.9" y="453" width="0.4" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="929.94" y="463.5" ></text>
</g>
<g >
<title>cppjieba::MPSegment::CalcDP (1,999,999,980 samples, 6.36%)</title><rect x="711.6" y="533" width="75.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="714.63" y="543.5" >cppjieba..</text>
</g>
<g >
<title>read (10,101,010 samples, 0.03%)</title><rect x="21.4" y="741" width="0.4" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="24.37" y="751.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="331.8" y="165" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="334.82" y="175.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="1093.7" y="277" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1096.72" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (70,707,070 samples, 0.22%)</title><rect x="291.3" y="645" width="2.6" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="294.26" y="655.5" ></text>
</g>
<g >
<title>do_anonymous_page (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="85" width="0.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1094.07" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::DictUnit&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="325.4" y="309" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="328.37" y="319.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="333.0" y="213" width="0.3" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="335.96" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="929.6" y="533" width="0.4" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="932.59" y="543.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;JiebaSplitCn&gt;::~shared_ptr (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="597" width="5.7" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="1129.70" y="607.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="1005.4" y="597" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="1008.40" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="198.8" y="565" width="0.3" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="201.77" y="575.5" ></text>
</g>
<g >
<title>cppjieba::Trie::DeleteNode (101,010,100 samples, 0.32%)</title><rect x="1126.7" y="373" width="3.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1129.70" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::push_back (30,303,030 samples, 0.10%)</title><rect x="486.1" y="517" width="1.1" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="489.09" y="527.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (30,303,030 samples, 0.10%)</title><rect x="318.6" y="309" width="1.1" height="15.0" fill="rgb(219,66,15)" rx="2" ry="2" />
<text  x="321.55" y="319.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="262.5" y="581" width="1.1" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="265.45" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_uses_single_bucket (10,101,010 samples, 0.03%)</title><rect x="1071.0" y="181" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="1073.98" y="191.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="262.1" y="581" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="265.07" y="591.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="677" width="5.7" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1129.70" y="687.5" ></text>
</g>
<g >
<title>std::__final_insertion_sort&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (40,404,040 samples, 0.13%)</title><rect x="329.5" y="325" width="1.6" height="15.0" fill="rgb(238,156,37)" rx="2" ry="2" />
<text  x="332.54" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::~unordered_map (20,202,020 samples, 0.06%)</title><rect x="1057.3" y="357" width="0.8" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1060.33" y="367.5" ></text>
</g>
<g >
<title>async_page_fault (90,909,090 samples, 0.29%)</title><rect x="1154.7" y="741" width="3.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1157.75" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="623.7" y="405" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="626.69" y="415.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,101,010 samples, 0.03%)</title><rect x="982.3" y="469" width="0.4" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="985.28" y="479.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="181" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1114.91" y="191.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_Head_base (10,101,010 samples, 0.03%)</title><rect x="1125.6" y="261" width="0.3" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="1128.56" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct_aux&lt;char const*&gt; (20,202,020 samples, 0.06%)</title><rect x="353.4" y="341" width="0.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="356.42" y="351.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::KeywordExtractor::Word*, std::vector&lt;cppjieba::KeywordExtractor::Word, std::allocator&lt;cppjieba::KeywordExtractor::Word&gt; &gt; &gt;, long, cppjieba::KeywordExtractor::Word, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="982.3" y="549" width="1.1" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="985.28" y="559.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="176.8" y="549" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="179.78" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="237.4" y="565" width="0.4" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="240.43" y="575.5" ></text>
</g>
<g >
<title>cppjieba::Trie::Find (5,686,868,630 samples, 18.09%)</title><rect x="495.6" y="517" width="213.4" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="498.57" y="527.5" >cppjieba::Trie::Find</text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="213.9" y="549" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="216.93" y="559.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (20,202,020 samples, 0.06%)</title><rect x="1086.9" y="293" width="0.8" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1089.90" y="303.5" ></text>
</g>
<g >
<title>do_async_page_fault (30,303,030 samples, 0.10%)</title><rect x="348.9" y="213" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="351.88" y="223.5" ></text>
</g>
<g >
<title>std::max&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="704.8" y="453" width="0.4" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="707.81" y="463.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="1095.2" y="101" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1098.24" y="111.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;simhash::Simhasher&gt;::construct&lt;simhash::Simhasher, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="453" width="66.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="299.95" y="463.5" >__gnu_c..</text>
</g>
<g >
<title>std::operator== (10,101,010 samples, 0.03%)</title><rect x="976.6" y="597" width="0.4" height="15.0" fill="rgb(229,110,26)" rx="2" ry="2" />
<text  x="979.59" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;JiebaSplitCn&gt; &gt;::destroy&lt;JiebaSplitCn&gt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="517" width="5.7" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="1129.70" y="527.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="361.4" y="261" width="0.4" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="364.38" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (20,202,020 samples, 0.06%)</title><rect x="473.6" y="453" width="0.7" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="476.58" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, false, true&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="916.7" y="613" width="0.4" height="15.0" fill="rgb(248,199,47)" rx="2" ry="2" />
<text  x="919.70" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::~_Hashtable (30,303,030 samples, 0.10%)</title><rect x="295.4" y="693" width="1.2" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="298.43" y="703.5" ></text>
</g>
<g >
<title>free_unref_page_list (10,101,010 samples, 0.03%)</title><rect x="1158.5" y="533" width="0.4" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1161.54" y="543.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::find (555,555,550 samples, 1.77%)</title><rect x="984.2" y="613" width="20.8" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="987.17" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="1064.2" y="277" width="0.3" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="1067.15" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (10,101,010 samples, 0.03%)</title><rect x="308.3" y="213" width="0.4" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="311.32" y="223.5" ></text>
</g>
<g >
<title>__vfprintf_internal (10,101,010 samples, 0.03%)</title><rect x="16.1" y="725" width="0.3" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="19.06" y="735.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="1107.0" y="277" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1109.99" y="287.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="196.9" y="565" width="0.4" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="199.87" y="575.5" ></text>
</g>
<g >
<title>do_exit (20,202,020 samples, 0.06%)</title><rect x="1158.2" y="693" width="0.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1161.16" y="703.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (30,303,030 samples, 0.10%)</title><rect x="295.4" y="709" width="1.2" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="298.43" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;::_Hash_node_value_base (10,101,010 samples, 0.03%)</title><rect x="283.7" y="629" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="286.68" y="639.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="311.7" y="293" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="314.73" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="128.3" y="549" width="0.3" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="131.27" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (60,606,060 samples, 0.19%)</title><rect x="135.1" y="501" width="2.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="138.09" y="511.5" ></text>
</g>
<g >
<title>std::reverse_iterator&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::Dag*, std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt; &gt; &gt;::operator++ (10,101,010 samples, 0.03%)</title><rect x="800.0" y="533" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="802.95" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;limonp::LocalVector&lt;unsigned int&gt;*, limonp::LocalVector&lt;unsigned int&gt;*, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt; (50,505,050 samples, 0.16%)</title><rect x="312.5" y="325" width="1.9" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="315.49" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_iterator (10,101,010 samples, 0.03%)</title><rect x="676.0" y="485" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="679.00" y="495.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="331.1" y="197" width="0.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h1 (20,202,020 samples, 0.06%)</title><rect x="879.6" y="437" width="0.7" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="882.55" y="447.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1130.5" y="341" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1133.49" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="1072.5" y="261" width="1.5" height="15.0" fill="rgb(228,108,26)" rx="2" ry="2" />
<text  x="1075.49" y="271.5" ></text>
</g>
<g >
<title>WebPageRemove::~WebPageRemove (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="725" width="5.3" height="15.0" fill="rgb(246,191,45)" rx="2" ry="2" />
<text  x="1058.81" y="735.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, double, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt; &gt;::operator[] (30,303,030 samples, 0.10%)</title><rect x="1114.6" y="357" width="1.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="1117.57" y="367.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="197" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1114.91" y="207.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (20,202,020 samples, 0.06%)</title><rect x="1059.2" y="373" width="0.8" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1062.23" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_ptr (80,808,080 samples, 0.26%)</title><rect x="959.9" y="517" width="3.0" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="962.91" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="174.1" y="517" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="177.13" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="276.1" y="581" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="279.10" y="591.5" ></text>
</g>
<g >
<title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="976.2" y="565" width="0.4" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="979.21" y="575.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::CalculateWeight (10,101,010 samples, 0.03%)</title><rect x="298.1" y="373" width="0.4" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="301.08" y="383.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="185.9" y="501" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="188.88" y="511.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="391.3" y="373" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="394.33" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="350.4" y="325" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="353.39" y="335.5" ></text>
</g>
<g >
<title>do_async_page_fault (30,303,030 samples, 0.10%)</title><rect x="1078.6" y="197" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1081.56" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Identity, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="1018.3" y="517" width="0.4" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="1021.29" y="527.5" ></text>
</g>
<g >
<title>__do_page_fault (90,909,090 samples, 0.29%)</title><rect x="1154.7" y="693" width="3.5" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1157.75" y="703.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;limonp::LocalVector&lt;unsigned int&gt; const*, limonp::LocalVector&lt;unsigned int&gt;*&gt; (50,505,050 samples, 0.16%)</title><rect x="1078.6" y="293" width="1.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1081.56" y="303.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt;*&gt; (20,202,020 samples, 0.06%)</title><rect x="1080.5" y="325" width="0.7" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="1083.45" y="335.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="82.8" y="613" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="85.78" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (50,505,050 samples, 0.16%)</title><rect x="812.8" y="485" width="1.9" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="815.84" y="495.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (40,404,040 samples, 0.13%)</title><rect x="267.0" y="645" width="1.5" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="270.00" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (20,202,020 samples, 0.06%)</title><rect x="207.1" y="517" width="0.8" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="210.11" y="527.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="661" width="5.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1058.81" y="671.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (818,181,810 samples, 2.60%)</title><rect x="865.1" y="517" width="30.8" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="868.15" y="527.5" >st..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (20,202,020 samples, 0.06%)</title><rect x="353.4" y="357" width="0.8" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="356.42" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (70,707,070 samples, 0.22%)</title><rect x="1069.8" y="261" width="2.7" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="1072.84" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;0, std::__detail::_Select1st, true&gt;::_S_get (10,101,010 samples, 0.03%)</title><rect x="307.6" y="245" width="0.3" height="15.0" fill="rgb(236,144,34)" rx="2" ry="2" />
<text  x="310.56" y="255.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="318.2" y="293" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="321.17" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (70,707,070 samples, 0.22%)</title><rect x="291.3" y="629" width="2.6" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="294.26" y="639.5" ></text>
</g>
<g >
<title>std::forward&lt;unsigned int&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="212.8" y="485" width="0.4" height="15.0" fill="rgb(245,185,44)" rx="2" ry="2" />
<text  x="215.79" y="495.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_drop_node (10,101,010 samples, 0.03%)</title><rect x="978.9" y="485" width="0.3" height="15.0" fill="rgb(240,165,39)" rx="2" ry="2" />
<text  x="981.87" y="495.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="261" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1127.04" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="226.4" y="693" width="0.4" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="229.44" y="703.5" ></text>
</g>
<g >
<title>std::shared_ptr&lt;SplitChinese&gt;::shared_ptr&lt;std::allocator&lt;SplitChinese&gt;, char const  (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="693" width="64.0" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1065.26" y="703.5" >std::sh..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="1099.4" y="165" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1102.41" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, double&gt;, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="463.0" y="421" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="465.97" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (10,101,010 samples, 0.03%)</title><rect x="1056.2" y="277" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="1059.19" y="287.5" ></text>
</g>
<g >
<title>std::fill_n&lt;double*, unsigned long, double&gt; (40,404,040 samples, 0.13%)</title><rect x="469.0" y="421" width="1.6" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="472.04" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="921.6" y="517" width="0.4" height="15.0" fill="rgb(234,136,32)" rx="2" ry="2" />
<text  x="924.63" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (30,303,030 samples, 0.10%)</title><rect x="984.2" y="581" width="1.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="987.17" y="591.5" ></text>
</g>
<g >
<title>std::make_shared&lt;simhash::Simhasher, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="565" width="66.0" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="299.95" y="575.5" >std::ma..</text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="565" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="1064.12" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::unordered_map&lt;unsigned int, WordWeight::TF, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (90,909,090 samples, 0.29%)</title><rect x="252.6" y="661" width="3.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="255.60" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::_M_realloc_insert&lt;cppjieba::DictUnit const&amp;&gt; (111,111,110 samples, 0.35%)</title><rect x="325.0" y="341" width="4.2" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="328.00" y="351.5" ></text>
</g>
<g >
<title>std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::insert (10,101,010 samples, 0.03%)</title><rect x="1126.3" y="725" width="0.4" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="1129.32" y="735.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::construct&lt;limonp::LocalVector&lt;unsigned int&gt;, limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (50,505,050 samples, 0.16%)</title><rect x="1075.9" y="341" width="1.9" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1078.90" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (30,303,030 samples, 0.10%)</title><rect x="530.1" y="469" width="1.1" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="533.06" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1058.5" y="341" width="0.3" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1061.47" y="351.5" ></text>
</g>
<g >
<title>JiebaSplitCn::~JiebaSplitCn (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="485" width="5.7" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="1129.70" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt;::construct&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1125.6" y="309" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1128.56" y="319.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::LocalVector (121,212,120 samples, 0.39%)</title><rect x="696.1" y="389" width="4.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="699.09" y="399.5" ></text>
</g>
<g >
<title>__handle_mm_fault (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="117" width="1.1" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1092.55" y="127.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::operator[] (30,303,030 samples, 0.10%)</title><rect x="908.0" y="565" width="1.1" height="15.0" fill="rgb(238,152,36)" rx="2" ry="2" />
<text  x="910.98" y="575.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_impl::~_Vector_impl (10,101,010 samples, 0.03%)</title><rect x="1034.2" y="469" width="0.4" height="15.0" fill="rgb(229,114,27)" rx="2" ry="2" />
<text  x="1037.21" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Select1st::operator (20,202,020 samples, 0.06%)</title><rect x="173.4" y="485" width="0.7" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="176.37" y="495.5" ></text>
</g>
<g >
<title>irq_exit (10,101,010 samples, 0.03%)</title><rect x="607.8" y="405" width="0.3" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="610.77" y="415.5" ></text>
</g>
<g >
<title>std::forward&lt;double&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="75.6" y="709" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="78.58" y="719.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="63.4" y="709" width="1.2" height="15.0" fill="rgb(209,22,5)" rx="2" ry="2" />
<text  x="66.45" y="719.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (50,505,050 samples, 0.16%)</title><rect x="305.7" y="229" width="1.9" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="308.66" y="239.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="1098.6" y="149" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1101.65" y="159.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="1005.0" y="613" width="0.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1008.02" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="307.2" y="213" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="310.18" y="223.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::DictUnit*&gt; (10,101,010 samples, 0.03%)</title><rect x="1110.8" y="309" width="0.4" height="15.0" fill="rgb(238,154,36)" rx="2" ry="2" />
<text  x="1113.78" y="319.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="335.2" y="181" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="338.23" y="191.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (10,101,010 samples, 0.03%)</title><rect x="977.3" y="437" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="980.35" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="244.3" y="645" width="0.7" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="247.26" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_insert_unique_node (70,707,070 samples, 0.22%)</title><rect x="1122.5" y="341" width="2.7" height="15.0" fill="rgb(234,133,31)" rx="2" ry="2" />
<text  x="1125.53" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::clear (30,303,030 samples, 0.10%)</title><rect x="827.6" y="549" width="1.2" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="830.62" y="559.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.03%)</title><rect x="1146.4" y="565" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1149.41" y="575.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="337.5" y="181" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="340.50" y="191.5" ></text>
</g>
<g >
<title>std::_Tuple_impl&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;::_M_head (10,101,010 samples, 0.03%)</title><rect x="927.7" y="453" width="0.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="930.69" y="463.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="328.4" y="165" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="331.41" y="175.5" ></text>
</g>
<g >
<title>SplitChinese::rmStopWords (3,252,525,220 samples, 10.34%)</title><rect x="116.9" y="709" width="122.0" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="119.89" y="719.5" >SplitChinese::r..</text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*&gt; (20,202,020 samples, 0.06%)</title><rect x="347.0" y="325" width="0.7" height="15.0" fill="rgb(228,110,26)" rx="2" ry="2" />
<text  x="349.98" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="309.5" y="325" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="312.45" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="173.0" y="485" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="175.99" y="495.5" ></text>
</g>
<g >
<title>rmqueue (10,101,010 samples, 0.03%)</title><rect x="1078.9" y="37" width="0.4" height="15.0" fill="rgb(226,98,23)" rx="2" ry="2" />
<text  x="1081.94" y="47.5" ></text>
</g>
<g >
<title>std::find_if_not&lt;__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, int  (161,616,160 samples, 0.51%)</title><rect x="91.1" y="677" width="6.1" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="94.12" y="687.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_deallocate (20,202,020 samples, 0.06%)</title><rect x="808.3" y="501" width="0.7" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="811.29" y="511.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator* (20,202,020 samples, 0.06%)</title><rect x="914.0" y="613" width="0.8" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="917.05" y="623.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (252,525,250 samples, 0.80%)</title><rect x="206.0" y="565" width="9.4" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="208.97" y="575.5" ></text>
</g>
<g >
<title>SplitChinese::SplitChinese (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="597" width="64.0" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1065.26" y="607.5" >SplitCh..</text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::WordRange*, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="827.6" y="533" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="830.62" y="543.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, double&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="451.2" y="373" width="0.4" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="454.22" y="383.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="645" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="655.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="291.3" y="469" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="294.26" y="479.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (40,404,040 samples, 0.13%)</title><rect x="1094.9" y="197" width="1.5" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="1097.86" y="207.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_put_node (10,101,010 samples, 0.03%)</title><rect x="978.9" y="469" width="0.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="981.87" y="479.5" ></text>
</g>
<g >
<title>clear_page_erms (10,101,010 samples, 0.03%)</title><rect x="1110.0" y="69" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1113.02" y="79.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="295.4" y="469" width="0.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.43" y="479.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="896.6" y="549" width="0.8" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="899.61" y="559.5" ></text>
</g>
<g >
<title>release_pages (10,101,010 samples, 0.03%)</title><rect x="350.4" y="85" width="0.4" height="15.0" fill="rgb(228,106,25)" rx="2" ry="2" />
<text  x="353.39" y="95.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="843.2" y="533" width="0.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="846.16" y="543.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::destroy&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="295.4" y="629" width="1.2" height="15.0" fill="rgb(225,96,22)" rx="2" ry="2" />
<text  x="298.43" y="639.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="368.6" y="565" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="371.59" y="575.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::LoadIdfDict (303,030,300 samples, 0.96%)</title><rect x="351.5" y="389" width="11.4" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="354.53" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::WEIGHT&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (20,202,020 samples, 0.06%)</title><rect x="246.2" y="629" width="0.7" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="249.15" y="639.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt;::pair&lt;unsigned long&amp;, cppjieba::DictUnit const*, true&gt; (10,101,010 samples, 0.03%)</title><rect x="129.8" y="565" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="132.78" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (474,747,470 samples, 1.51%)</title><rect x="872.0" y="501" width="17.8" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="874.97" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::DictUnit&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="350.4" y="309" width="0.4" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="353.39" y="319.5" ></text>
</g>
<g >
<title>generic_file_read_iter (10,101,010 samples, 0.03%)</title><rect x="21.4" y="597" width="0.4" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="24.37" y="607.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="200.7" y="581" width="0.3" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="203.66" y="591.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::~DictUnit (10,101,010 samples, 0.03%)</title><rect x="1094.1" y="277" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="1097.10" y="287.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (20,202,020 samples, 0.06%)</title><rect x="1079.7" y="229" width="0.8" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="1082.69" y="239.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1105.5" y="261" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1108.47" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::_Node_const_iterator (20,202,020 samples, 0.06%)</title><rect x="709.7" y="517" width="0.8" height="15.0" fill="rgb(225,92,22)" rx="2" ry="2" />
<text  x="712.74" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;unsigned long const*, std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt; &gt;, unsigned long*, unsigned long&gt; (30,303,030 samples, 0.10%)</title><rect x="1029.3" y="533" width="1.1" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="1032.28" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_eq (30,303,030 samples, 0.10%)</title><rect x="669.6" y="421" width="1.1" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="672.56" y="431.5" ></text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (10,101,010 samples, 0.03%)</title><rect x="906.1" y="533" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="909.09" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="1018.7" y="533" width="0.3" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="1021.67" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (30,303,030 samples, 0.10%)</title><rect x="1060.0" y="373" width="1.1" height="15.0" fill="rgb(248,200,47)" rx="2" ry="2" />
<text  x="1062.98" y="383.5" ></text>
</g>
<g >
<title>unmap_single_vma (10,101,010 samples, 0.03%)</title><rect x="314.8" y="165" width="0.3" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="317.76" y="175.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_get_insert_hint_unique_pos (131,313,130 samples, 0.42%)</title><rect x="931.9" y="581" width="4.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="934.86" y="591.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned int const, cppjieba::TrieNode*&gt; (10,101,010 samples, 0.03%)</title><rect x="640.7" y="373" width="0.4" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="643.75" y="383.5" ></text>
</g>
<g >
<title>std::IsIn&lt;unsigned int, std::unordered_set&lt;unsigned int, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;unsigned int&gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="906.8" y="565" width="0.8" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="909.85" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;std::pair&lt;unsigned int const, double&gt;, false, false&gt;::_Node_const_iterator (10,101,010 samples, 0.03%)</title><rect x="464.5" y="453" width="0.4" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="467.49" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (20,202,020 samples, 0.06%)</title><rect x="101.4" y="661" width="0.7" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="104.35" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::push_back (10,101,010 samples, 0.03%)</title><rect x="197.3" y="597" width="0.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="200.25" y="607.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;JiebaSplitCn&gt; &gt;::construct&lt;JiebaSplitCn, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="485" width="64.0" height="15.0" fill="rgb(237,150,36)" rx="2" ry="2" />
<text  x="1065.26" y="495.5" >std::al..</text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit const*, std::allocator&lt;cppjieba::DictUnit const*&gt; &gt;::_M_realloc_insert&lt;cppjieba::DictUnit const*&gt; (20,202,020 samples, 0.06%)</title><rect x="310.2" y="325" width="0.8" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="313.21" y="335.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (10,101,010 samples, 0.03%)</title><rect x="245.8" y="597" width="0.4" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="248.77" y="607.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::ToElementWithName (10,101,010 samples, 0.03%)</title><rect x="71.4" y="677" width="0.4" height="15.0" fill="rgb(248,198,47)" rx="2" ry="2" />
<text  x="74.41" y="687.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::KeywordExtractor (282,828,280 samples, 0.90%)</title><rect x="1115.7" y="405" width="10.6" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="1118.71" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_Node_iterator_base (10,101,010 samples, 0.03%)</title><rect x="1055.8" y="309" width="0.4" height="15.0" fill="rgb(253,221,53)" rx="2" ry="2" />
<text  x="1058.81" y="319.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cppjieba::DictUnit const*, cppjieba::DictUnit*&gt; (90,909,090 samples, 0.29%)</title><rect x="1089.2" y="277" width="3.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1092.17" y="287.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_key (10,101,010 samples, 0.03%)</title><rect x="937.2" y="581" width="0.3" height="15.0" fill="rgb(239,158,38)" rx="2" ry="2" />
<text  x="940.17" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_initialize (40,404,040 samples, 0.13%)</title><rect x="476.2" y="485" width="1.6" height="15.0" fill="rgb(210,25,6)" rx="2" ry="2" />
<text  x="479.24" y="495.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1095.2" y="117" width="0.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1098.24" y="127.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_allocate (10,101,010 samples, 0.03%)</title><rect x="478.9" y="485" width="0.4" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="481.89" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;char, std::allocator&lt;char&gt; &gt;::vector (10,101,010 samples, 0.03%)</title><rect x="1055.4" y="709" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1058.44" y="719.5" ></text>
</g>
<g >
<title>cppjieba::Word::Word (10,101,010 samples, 0.03%)</title><rect x="392.1" y="501" width="0.4" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="395.09" y="511.5" ></text>
</g>
<g >
<title>tinyxml2::XMLDocument::LoadFile (101,010,100 samples, 0.32%)</title><rect x="65.3" y="693" width="3.8" height="15.0" fill="rgb(208,17,4)" rx="2" ry="2" />
<text  x="68.34" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;unsigned int, false&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="889.4" y="485" width="0.4" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="892.41" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::end (30,303,030 samples, 0.10%)</title><rect x="130.9" y="565" width="1.2" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="133.92" y="575.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; (20,202,020 samples, 0.06%)</title><rect x="318.6" y="293" width="0.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="321.55" y="303.5" ></text>
</g>
<g >
<title>do_async_page_fault (20,202,020 samples, 0.06%)</title><rect x="345.8" y="229" width="0.8" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="348.84" y="239.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;double&gt; &gt;::deallocate (10,101,010 samples, 0.03%)</title><rect x="472.8" y="453" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="475.83" y="463.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="312.1" y="277" width="0.4" height="15.0" fill="rgb(250,210,50)" rx="2" ry="2" />
<text  x="315.11" y="287.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::~DictUnit (10,101,010 samples, 0.03%)</title><rect x="333.0" y="149" width="0.3" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="335.96" y="159.5" ></text>
</g>
<g >
<title>std::__pair_get&lt;0ul&gt;::__get&lt;unsigned int const, cppjieba::TrieNode*&gt; (20,202,020 samples, 0.06%)</title><rect x="165.8" y="437" width="0.7" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="168.79" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (10,101,010 samples, 0.03%)</title><rect x="301.9" y="213" width="0.4" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="304.87" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_node (30,303,030 samples, 0.10%)</title><rect x="295.4" y="645" width="1.2" height="15.0" fill="rgb(253,225,53)" rx="2" ry="2" />
<text  x="298.43" y="655.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::init_ (10,101,010 samples, 0.03%)</title><rect x="343.9" y="213" width="0.4" height="15.0" fill="rgb(236,143,34)" rx="2" ry="2" />
<text  x="346.95" y="223.5" ></text>
</g>
<g >
<title>write (686,868,680 samples, 2.18%)</title><rect x="26.7" y="741" width="25.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="29.68" y="751.5" >w..</text>
</g>
<g >
<title>file_update_time (10,101,010 samples, 0.03%)</title><rect x="38.1" y="581" width="0.3" height="15.0" fill="rgb(210,27,6)" rx="2" ry="2" />
<text  x="41.05" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_allocate_buckets (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="293" width="0.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="1127.04" y="303.5" ></text>
</g>
<g >
<title>__handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="345.8" y="149" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="348.84" y="159.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator-- (20,202,020 samples, 0.06%)</title><rect x="935.7" y="565" width="0.7" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="938.65" y="575.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (10,101,010 samples, 0.03%)</title><rect x="384.1" y="517" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="387.13" y="527.5" ></text>
</g>
<g >
<title>async_page_fault (10,101,010 samples, 0.03%)</title><rect x="326.5" y="213" width="0.4" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="329.51" y="223.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="1099.0" y="133" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="1102.03" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (20,202,020 samples, 0.06%)</title><rect x="1129.7" y="309" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1132.73" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_membuf&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="921.6" y="533" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="924.63" y="543.5" ></text>
</g>
<g >
<title>std::__niter_wrap&lt;double*&gt; (10,101,010 samples, 0.03%)</title><rect x="470.2" y="405" width="0.4" height="15.0" fill="rgb(241,166,39)" rx="2" ry="2" />
<text  x="473.17" y="415.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator[] (20,202,020 samples, 0.06%)</title><rect x="1034.6" y="613" width="0.7" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="1037.59" y="623.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::insert&lt;std::pair&lt;unsigned int, cppjieba::TrieNode*&gt; &gt; (141,414,140 samples, 0.45%)</title><rect x="304.1" y="309" width="5.4" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="307.15" y="319.5" ></text>
</g>
<g >
<title>std::__addressof&lt;cppjieba::Dag&gt; (20,202,020 samples, 0.06%)</title><rect x="682.1" y="437" width="0.7" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="685.07" y="447.5" ></text>
</g>
<g >
<title>tlb_flush_mmu (10,101,010 samples, 0.03%)</title><rect x="325.4" y="165" width="0.4" height="15.0" fill="rgb(214,45,10)" rx="2" ry="2" />
<text  x="328.37" y="175.5" ></text>
</g>
<g >
<title>JiebaSplitCn::JiebaSplitCn (1,707,070,690 samples, 5.43%)</title><rect x="1062.3" y="453" width="64.0" height="15.0" fill="rgb(220,71,17)" rx="2" ry="2" />
<text  x="1065.26" y="463.5" >JiebaSp..</text>
</g>
<g >
<title>std::forward&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="245.0" y="581" width="0.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="248.01" y="591.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="245.4" y="597" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="248.39" y="607.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="330.3" y="277" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="333.30" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="359.5" y="309" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="362.49" y="319.5" ></text>
</g>
<g >
<title>clear_page_erms (10,101,010 samples, 0.03%)</title><rect x="1156.3" y="565" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1159.26" y="575.5" ></text>
</g>
<g >
<title>clear_page_erms (10,101,010 samples, 0.03%)</title><rect x="1089.9" y="37" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1092.93" y="47.5" ></text>
</g>
<g >
<title>do_async_page_fault (30,303,030 samples, 0.10%)</title><rect x="1089.6" y="197" width="1.1" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1092.55" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_v (20,202,020 samples, 0.06%)</title><rect x="163.9" y="469" width="0.8" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="166.90" y="479.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="324.2" y="165" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="327.24" y="175.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::~unordered_map (30,303,030 samples, 0.10%)</title><rect x="1060.0" y="421" width="1.1" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1062.98" y="431.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (10,101,010 samples, 0.03%)</title><rect x="318.2" y="261" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="321.17" y="271.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::IsUserDictSingleChineseWord (434,343,430 samples, 1.38%)</title><rect x="809.8" y="533" width="16.3" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="812.81" y="543.5" ></text>
</g>
<g >
<title>[unknown] (10,101,010 samples, 0.03%)</title><rect x="11.1" y="677" width="0.4" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="14.14" y="687.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (20,202,020 samples, 0.06%)</title><rect x="1057.3" y="325" width="0.8" height="15.0" fill="rgb(210,23,5)" rx="2" ry="2" />
<text  x="1060.33" y="335.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (20,202,020 samples, 0.06%)</title><rect x="385.3" y="533" width="0.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="388.27" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_do_relocate (30,303,030 samples, 0.10%)</title><rect x="237.4" y="645" width="1.2" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="240.43" y="655.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::~_Vector_base (10,101,010 samples, 0.03%)</title><rect x="350.4" y="341" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="353.39" y="351.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_move_assign (30,303,030 samples, 0.10%)</title><rect x="982.3" y="501" width="1.1" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="985.28" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_Tp_allocator (10,101,010 samples, 0.03%)</title><rect x="101.0" y="661" width="0.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="103.97" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (70,707,070 samples, 0.22%)</title><rect x="253.4" y="629" width="2.6" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="256.35" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (111,111,110 samples, 0.35%)</title><rect x="527.0" y="485" width="4.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="530.03" y="495.5" ></text>
</g>
<g >
<title>__vm_munmap (10,101,010 samples, 0.03%)</title><rect x="350.4" y="229" width="0.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="353.39" y="239.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="229" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1127.04" y="239.5" ></text>
</g>
<g >
<title>std::forward&lt;std::tuple&lt;&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="928.8" y="533" width="0.8" height="15.0" fill="rgb(236,145,34)" rx="2" ry="2" />
<text  x="931.83" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="1006.9" y="565" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1009.92" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_eq (20,202,020 samples, 0.06%)</title><rect x="1014.9" y="549" width="0.7" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1017.88" y="559.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_S_right (20,202,020 samples, 0.06%)</title><rect x="964.5" y="549" width="0.7" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="967.46" y="559.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (60,606,060 samples, 0.19%)</title><rect x="60.8" y="693" width="2.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="63.79" y="703.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (10,101,010 samples, 0.03%)</title><rect x="350.4" y="101" width="0.4" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="353.39" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="229.5" y="629" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="232.47" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (10,101,010 samples, 0.03%)</title><rect x="1127.8" y="245" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1130.83" y="255.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt;::pair&lt;unsigned long&amp;, cppjieba::DictUnit const*, true&gt; (10,101,010 samples, 0.03%)</title><rect x="522.5" y="501" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="525.48" y="511.5" ></text>
</g>
<g >
<title>cppjieba::FullSegment::Cut (2,686,868,660 samples, 8.54%)</title><rect x="118.4" y="629" width="100.8" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="121.41" y="639.5" >cppjieba::Fu..</text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="336.0" y="229" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="338.99" y="239.5" ></text>
</g>
<g >
<title>new_sync_write (414,141,410 samples, 1.32%)</title><rect x="36.9" y="629" width="15.6" height="15.0" fill="rgb(244,181,43)" rx="2" ry="2" />
<text  x="39.91" y="639.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (545,454,540 samples, 1.73%)</title><rect x="32.0" y="725" width="20.5" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="34.99" y="735.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (40,404,040 samples, 0.13%)</title><rect x="286.3" y="661" width="1.5" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="289.33" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::resize (191,919,190 samples, 0.61%)</title><rect x="478.9" y="501" width="7.2" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="481.89" y="511.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;cppjieba::DictUnit const*, cppjieba::DictUnit*, cppjieba::DictUnit&gt; (90,909,090 samples, 0.29%)</title><rect x="1089.2" y="309" width="3.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1092.17" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_Vector_base (60,606,060 samples, 0.19%)</title><rect x="1027.0" y="533" width="2.3" height="15.0" fill="rgb(223,83,19)" rx="2" ry="2" />
<text  x="1030.01" y="543.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="1125.2" y="325" width="0.4" height="15.0" fill="rgb(225,93,22)" rx="2" ry="2" />
<text  x="1128.18" y="335.5" ></text>
</g>
<g >
<title>cppjieba::GetWordFromRunes (40,404,040 samples, 0.13%)</title><rect x="198.0" y="597" width="1.5" height="15.0" fill="rgb(229,111,26)" rx="2" ry="2" />
<text  x="201.01" y="607.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;double, std::allocator&lt;double&gt; &gt;::_Vector_impl::_Vector_impl (20,202,020 samples, 0.06%)</title><rect x="467.9" y="469" width="0.8" height="15.0" fill="rgb(208,15,3)" rx="2" ry="2" />
<text  x="470.90" y="479.5" ></text>
</g>
<g >
<title>[BuildWebPage] (10,101,010 samples, 0.03%)</title><rect x="924.3" y="485" width="0.4" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="927.28" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (10,101,010 samples, 0.03%)</title><rect x="86.2" y="677" width="0.4" height="15.0" fill="rgb(231,124,29)" rx="2" ry="2" />
<text  x="89.19" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;2, std::__detail::_Mod_range_hashing, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="1005.8" y="533" width="0.4" height="15.0" fill="rgb(223,86,20)" rx="2" ry="2" />
<text  x="1008.78" y="543.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::ParseDeep (101,010,100 samples, 0.32%)</title><rect x="65.3" y="629" width="3.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="68.34" y="639.5" ></text>
</g>
<g >
<title>_int_malloc (282,828,280 samples, 0.90%)</title><rect x="1147.5" y="757" width="10.7" height="15.0" fill="rgb(215,47,11)" rx="2" ry="2" />
<text  x="1150.55" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;unsigned int, true, false&gt;::_Node_const_iterator (30,303,030 samples, 0.10%)</title><rect x="822.3" y="453" width="1.2" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="825.32" y="463.5" ></text>
</g>
<g >
<title>do_page_fault (90,909,090 samples, 0.29%)</title><rect x="1154.7" y="709" width="3.5" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1157.75" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="1072.1" y="245" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1075.11" y="255.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="333.3" y="213" width="0.8" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="336.33" y="223.5" ></text>
</g>
<g >
<title>unlock_page (10,101,010 samples, 0.03%)</title><rect x="52.1" y="565" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="55.08" y="575.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="347.0" y="357" width="0.7" height="15.0" fill="rgb(219,66,16)" rx="2" ry="2" />
<text  x="349.98" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (10,101,010 samples, 0.03%)</title><rect x="1058.5" y="357" width="0.3" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="1061.47" y="367.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::~LocalVector (10,101,010 samples, 0.03%)</title><rect x="1088.0" y="245" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1091.03" y="255.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (70,707,070 samples, 0.22%)</title><rect x="1099.8" y="229" width="2.6" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1102.78" y="239.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::sputc (40,404,040 samples, 0.13%)</title><rect x="1052.8" y="629" width="1.5" height="15.0" fill="rgb(240,163,39)" rx="2" ry="2" />
<text  x="1055.78" y="639.5" ></text>
</g>
<g >
<title>__sb_start_write (10,101,010 samples, 0.03%)</title><rect x="35.8" y="645" width="0.4" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="38.78" y="655.5" ></text>
</g>
<g >
<title>std::_Sp_counted_base&lt; (141,414,140 samples, 0.45%)</title><rect x="1055.8" y="533" width="5.3" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1058.81" y="543.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;int, double&gt;, std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_Alloc_node&gt; (40,404,040 samples, 0.13%)</title><rect x="82.0" y="677" width="1.5" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="85.02" y="687.5" ></text>
</g>
<g >
<title>__ext4_journal_start_sb (80,808,080 samples, 0.26%)</title><rect x="39.9" y="549" width="3.1" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="42.95" y="559.5" ></text>
</g>
<g >
<title>__x64_sys_write (474,747,470 samples, 1.51%)</title><rect x="34.6" y="693" width="17.9" height="15.0" fill="rgb(246,189,45)" rx="2" ry="2" />
<text  x="37.64" y="703.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="345.5" y="261" width="0.3" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="348.46" y="271.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (10,101,010 samples, 0.03%)</title><rect x="341.3" y="213" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="344.29" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::deallocate (20,202,020 samples, 0.06%)</title><rect x="1131.2" y="309" width="0.8" height="15.0" fill="rgb(249,206,49)" rx="2" ry="2" />
<text  x="1134.25" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="335.6" y="229" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="338.61" y="239.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (10,101,010 samples, 0.03%)</title><rect x="978.1" y="405" width="0.4" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="981.11" y="415.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1059.2" y="357" width="0.4" height="15.0" fill="rgb(250,208,49)" rx="2" ry="2" />
<text  x="1062.23" y="367.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::clear (10,101,010 samples, 0.03%)</title><rect x="332.6" y="85" width="0.4" height="15.0" fill="rgb(213,40,9)" rx="2" ry="2" />
<text  x="335.58" y="95.5" ></text>
</g>
<g >
<title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="965.2" y="549" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="968.22" y="559.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned int&gt;::operator (40,404,040 samples, 0.13%)</title><rect x="886.0" y="437" width="1.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="889.00" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (10,101,010 samples, 0.03%)</title><rect x="1085.4" y="341" width="0.4" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1088.38" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="210.1" y="517" width="0.8" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="213.14" y="527.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1096.4" y="149" width="0.4" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1099.37" y="159.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="1094.9" y="133" width="0.7" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1097.86" y="143.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_Vector_impl::~_Vector_impl (20,202,020 samples, 0.06%)</title><rect x="196.1" y="581" width="0.8" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="199.12" y="591.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="1107.7" y="245" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1110.74" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__detail::_Identity, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="229.1" y="645" width="0.8" height="15.0" fill="rgb(214,41,10)" rx="2" ry="2" />
<text  x="232.09" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (202,020,200 samples, 0.64%)</title><rect x="1118.4" y="357" width="7.5" height="15.0" fill="rgb(211,31,7)" rx="2" ry="2" />
<text  x="1121.36" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt;, true&gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="249.6" y="677" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="252.56" y="687.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (111,111,110 samples, 0.35%)</title><rect x="46.8" y="533" width="4.1" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="49.77" y="543.5" ></text>
</g>
<g >
<title>std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="329.9" y="293" width="1.2" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="332.92" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Node_const_iterator&lt;unsigned int, true, false&gt;::_Node_const_iterator (10,101,010 samples, 0.03%)</title><rect x="895.1" y="501" width="0.4" height="15.0" fill="rgb(218,62,14)" rx="2" ry="2" />
<text  x="898.09" y="511.5" ></text>
</g>
<g >
<title>async_page_fault (60,606,060 samples, 0.19%)</title><rect x="1144.9" y="741" width="2.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1147.89" y="751.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::Dag*&gt; (80,808,080 samples, 0.26%)</title><rect x="804.5" y="501" width="3.0" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="807.50" y="511.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_impl_data::_Vector_impl_data (10,101,010 samples, 0.03%)</title><rect x="475.1" y="453" width="0.4" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="478.10" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, WordWeight::IDF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (50,505,050 samples, 0.16%)</title><rect x="244.3" y="677" width="1.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="247.26" y="687.5" ></text>
</g>
<g >
<title>std::_Construct&lt;limonp::LocalVector&lt;unsigned int&gt;, limonp::LocalVector&lt;unsigned int&gt; const&amp;&gt; (50,505,050 samples, 0.16%)</title><rect x="1078.6" y="261" width="1.9" height="15.0" fill="rgb(242,172,41)" rx="2" ry="2" />
<text  x="1081.56" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::size (60,606,060 samples, 0.19%)</title><rect x="843.5" y="549" width="2.3" height="15.0" fill="rgb(223,87,20)" rx="2" ry="2" />
<text  x="846.54" y="559.5" ></text>
</g>
<g >
<title>std::__cxx11::list&lt;WordWeight::WEIGHT, std::allocator&lt;WordWeight::WEIGHT&gt; &gt;::_M_create_node&lt;WordWeight::WEIGHT&gt; (20,202,020 samples, 0.06%)</title><rect x="242.7" y="661" width="0.8" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="245.74" y="671.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_create_storage (40,404,040 samples, 0.13%)</title><rect x="1027.8" y="517" width="1.5" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1030.76" y="527.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;cppjieba::Dag const*, cppjieba::Dag*&gt; (10,101,010 samples, 0.03%)</title><rect x="185.1" y="485" width="0.4" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="188.12" y="495.5" ></text>
</g>
<g >
<title>std::__niter_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (10,101,010 samples, 0.03%)</title><rect x="112.3" y="613" width="0.4" height="15.0" fill="rgb(208,18,4)" rx="2" ry="2" />
<text  x="115.35" y="623.5" ></text>
</g>
<g >
<title>std::make_shared&lt;SimHashWebPage, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1,757,575,740 samples, 5.59%)</title><rect x="296.9" y="709" width="66.0" height="15.0" fill="rgb(231,122,29)" rx="2" ry="2" />
<text  x="299.95" y="719.5" >std::ma..</text>
</g>
<g >
<title>limonp::Split (30,303,030 samples, 0.10%)</title><rect x="351.9" y="373" width="1.1" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="354.91" y="383.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.8" y="197" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1094.82" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (20,202,020 samples, 0.06%)</title><rect x="999.7" y="501" width="0.8" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="1002.71" y="511.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (30,303,030 samples, 0.10%)</title><rect x="1090.7" y="229" width="1.1" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1093.69" y="239.5" ></text>
</g>
<g >
<title>std::_Head_base&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, false&gt;::_M_head (10,101,010 samples, 0.03%)</title><rect x="928.1" y="485" width="0.4" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="931.07" y="495.5" ></text>
</g>
<g >
<title>async_page_fault (20,202,020 samples, 0.06%)</title><rect x="1112.7" y="229" width="0.7" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1115.67" y="239.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (60,606,060 samples, 0.19%)</title><rect x="337.1" y="229" width="2.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="340.12" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_M_default_append (10,101,010 samples, 0.03%)</title><rect x="676.4" y="501" width="0.4" height="15.0" fill="rgb(207,12,2)" rx="2" ry="2" />
<text  x="679.38" y="511.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (60,606,060 samples, 0.19%)</title><rect x="315.5" y="325" width="2.3" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="318.52" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, false&gt; &gt;::construct&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned int const&amp;&gt;, std::tuple&lt;&gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="284.1" y="629" width="0.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="287.06" y="639.5" ></text>
</g>
<g >
<title>__memchr_avx2 (50,505,050 samples, 0.16%)</title><rect x="1133.1" y="757" width="1.9" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="1136.14" y="767.5" ></text>
</g>
<g >
<title>std::iter_swap&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="331.4" y="101" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="334.44" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="268.9" y="613" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="271.89" y="623.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (10,101,010 samples, 0.03%)</title><rect x="245.4" y="565" width="0.4" height="15.0" fill="rgb(224,91,21)" rx="2" ry="2" />
<text  x="248.39" y="575.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="1104.7" y="277" width="1.1" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="1107.71" y="287.5" ></text>
</g>
<g >
<title>handle_mm_fault (20,202,020 samples, 0.06%)</title><rect x="1078.9" y="133" width="0.8" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1081.94" y="143.5" ></text>
</g>
<g >
<title>operator new (10,101,010 samples, 0.03%)</title><rect x="1077.4" y="325" width="0.4" height="15.0" fill="rgb(216,51,12)" rx="2" ry="2" />
<text  x="1080.42" y="335.5" ></text>
</g>
<g >
<title>std::__detail::operator==&lt;std::pair&lt;unsigned int const, double&gt;, false&gt; (10,101,010 samples, 0.03%)</title><rect x="419.4" y="485" width="0.4" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="422.38" y="495.5" ></text>
</g>
<g >
<title>__memchr_avx2 (30,303,030 samples, 0.10%)</title><rect x="22.1" y="709" width="1.2" height="15.0" fill="rgb(226,100,24)" rx="2" ry="2" />
<text  x="25.13" y="719.5" ></text>
</g>
<g >
<title>__printf_fp_l (10,101,010 samples, 0.03%)</title><rect x="16.1" y="709" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="19.06" y="719.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::operator= (10,101,010 samples, 0.03%)</title><rect x="1104.3" y="213" width="0.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="1107.33" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::WordRange&gt;::construct&lt;cppjieba::WordRange, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="197.3" y="469" width="0.3" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="200.25" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;SplitChinese&gt; &gt;::destroy&lt;SplitChinese&gt; (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="645" width="5.7" height="15.0" fill="rgb(227,102,24)" rx="2" ry="2" />
<text  x="1129.70" y="655.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_S_key (10,101,010 samples, 0.03%)</title><rect x="83.2" y="661" width="0.3" height="15.0" fill="rgb(245,188,44)" rx="2" ry="2" />
<text  x="86.16" y="671.5" ></text>
</g>
<g >
<title>do_async_page_fault (10,101,010 samples, 0.03%)</title><rect x="1111.9" y="213" width="0.4" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="1114.91" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="1031.6" y="565" width="0.3" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1034.55" y="575.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;cppjieba::Dag*&gt; (10,101,010 samples, 0.03%)</title><rect x="195.7" y="549" width="0.4" height="15.0" fill="rgb(251,211,50)" rx="2" ry="2" />
<text  x="198.74" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, true&gt; &gt; &gt;::_M_deallocate_node (30,303,030 samples, 0.10%)</title><rect x="1060.0" y="357" width="1.1" height="15.0" fill="rgb(241,167,40)" rx="2" ry="2" />
<text  x="1062.98" y="367.5" ></text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;cppjieba::DictUnit*, cppjieba::DictUnit*, std::allocator&lt;cppjieba::DictUnit&gt; &gt; (90,909,090 samples, 0.29%)</title><rect x="325.8" y="325" width="3.4" height="15.0" fill="rgb(206,6,1)" rx="2" ry="2" />
<text  x="328.75" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator!=&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="63.1" y="709" width="0.3" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="66.07" y="719.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (20,202,020 samples, 0.06%)</title><rect x="331.1" y="149" width="0.7" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="159.5" ></text>
</g>
<g >
<title>std::__unguarded_partition&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="331.8" y="181" width="1.2" height="15.0" fill="rgb(231,123,29)" rx="2" ry="2" />
<text  x="334.82" y="191.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="295.8" y="421" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.81" y="431.5" ></text>
</g>
<g >
<title>std::make_pair&lt;unsigned int&amp;, double&amp;&gt; (40,404,040 samples, 0.13%)</title><rect x="76.0" y="709" width="1.5" height="15.0" fill="rgb(244,179,43)" rx="2" ry="2" />
<text  x="78.96" y="719.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::operator= (10,101,010 samples, 0.03%)</title><rect x="314.0" y="245" width="0.4" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="317.00" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (30,303,030 samples, 0.10%)</title><rect x="263.6" y="581" width="1.1" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="266.59" y="591.5" ></text>
</g>
<g >
<title>new_sync_read (60,606,060 samples, 0.19%)</title><rect x="13.8" y="629" width="2.3" height="15.0" fill="rgb(218,61,14)" rx="2" ry="2" />
<text  x="16.79" y="639.5" ></text>
</g>
<g >
<title>std::__unguarded_linear_insert&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Val_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="1094.5" y="309" width="0.4" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="1097.48" y="319.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (414,141,410 samples, 1.32%)</title><rect x="36.9" y="597" width="15.6" height="15.0" fill="rgb(220,73,17)" rx="2" ry="2" />
<text  x="39.91" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_S_relocate (10,101,010 samples, 0.03%)</title><rect x="485.7" y="469" width="0.4" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="488.71" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;cppjieba::DictUnit const*&gt;::construct&lt;cppjieba::DictUnit const*, cppjieba::DictUnit const*&gt; (10,101,010 samples, 0.03%)</title><rect x="309.8" y="309" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="312.83" y="319.5" ></text>
</g>
<g >
<title>__GI_____strtod_l_internal (20,202,020 samples, 0.06%)</title><rect x="52.5" y="757" width="0.7" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="55.45" y="767.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Identity, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, true, true&gt; &gt;::_M_find_before_node (303,030,300 samples, 0.96%)</title><rect x="1007.7" y="565" width="11.3" height="15.0" fill="rgb(223,85,20)" rx="2" ry="2" />
<text  x="1010.67" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned int&gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="885.6" y="437" width="0.4" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="888.62" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, unsigned int, std::allocator&lt;unsigned int&gt;, std::__detail::_Identity, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="204.8" y="565" width="0.8" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="207.83" y="575.5" ></text>
</g>
<g >
<title>std::equal_to&lt;unsigned int&gt;::operator (171,717,170 samples, 0.55%)</title><rect x="166.5" y="469" width="6.5" height="15.0" fill="rgb(230,115,27)" rx="2" ry="2" />
<text  x="169.55" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="916.3" y="613" width="0.4" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="919.32" y="623.5" ></text>
</g>
<g >
<title>__do_page_fault (10,101,010 samples, 0.03%)</title><rect x="391.3" y="421" width="0.4" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="394.33" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3,050,505,020 samples, 9.70%)</title><rect x="556.6" y="453" width="114.5" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="559.60" y="463.5" >std::_Hashtabl..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="227.6" y="645" width="0.4" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="230.58" y="655.5" ></text>
</g>
<g >
<title>tinyxml2::StrPair::ParseText (80,808,080 samples, 0.26%)</title><rect x="65.7" y="501" width="3.1" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="68.72" y="511.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (30,303,030 samples, 0.10%)</title><rect x="1035.3" y="613" width="1.2" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1038.35" y="623.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (40,404,040 samples, 0.13%)</title><rect x="312.5" y="245" width="1.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="315.49" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (10,101,010 samples, 0.03%)</title><rect x="532.3" y="485" width="0.4" height="15.0" fill="rgb(254,227,54)" rx="2" ry="2" />
<text  x="535.34" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="99.1" y="661" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="102.08" y="671.5" ></text>
</g>
<g >
<title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (10,101,010 samples, 0.03%)</title><rect x="85.8" y="613" width="0.4" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="88.81" y="623.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="519.1" y="453" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="522.07" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="304.9" y="213" width="0.8" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="307.91" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::operator[] (20,202,020 samples, 0.06%)</title><rect x="175.6" y="565" width="0.8" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="178.65" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::operator-&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="96.0" y="629" width="1.2" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="99.05" y="639.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;unsigned int, cppjieba::TrieNode*, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt; &gt;::end (10,101,010 samples, 0.03%)</title><rect x="1064.2" y="309" width="0.3" height="15.0" fill="rgb(242,171,40)" rx="2" ry="2" />
<text  x="1067.15" y="319.5" ></text>
</g>
<g >
<title>std::map&lt;int, std::pair&lt;unsigned int, unsigned int&gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::pair&lt;unsigned int, unsigned int&gt; &gt; &gt; &gt;::operator[] (10,101,010 samples, 0.03%)</title><rect x="296.6" y="709" width="0.3" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="299.57" y="719.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1087.7" y="245" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1090.65" y="255.5" ></text>
</g>
<g >
<title>__vm_munmap (10,101,010 samples, 0.03%)</title><rect x="1061.1" y="661" width="0.4" height="15.0" fill="rgb(231,121,28)" rx="2" ry="2" />
<text  x="1064.12" y="671.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (10,101,010 samples, 0.03%)</title><rect x="301.1" y="245" width="0.4" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="304.11" y="255.5" ></text>
</g>
<g >
<title>__memcpy_avx_unaligned_erms (20,202,020 samples, 0.06%)</title><rect x="1107.0" y="213" width="0.7" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="1109.99" y="223.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::~_Vector_base (20,202,020 samples, 0.06%)</title><rect x="1033.8" y="485" width="0.8" height="15.0" fill="rgb(209,18,4)" rx="2" ry="2" />
<text  x="1036.83" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::__detail::_Select1st, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (20,202,020 samples, 0.06%)</title><rect x="358.7" y="293" width="0.8" height="15.0" fill="rgb(217,56,13)" rx="2" ry="2" />
<text  x="361.73" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, WordWeight::TF&gt;, std::allocator&lt;std::pair&lt;unsigned int const, WordWeight::TF&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (10,101,010 samples, 0.03%)</title><rect x="291.3" y="533" width="0.3" height="15.0" fill="rgb(207,12,3)" rx="2" ry="2" />
<text  x="294.26" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt;::_M_next (10,101,010 samples, 0.03%)</title><rect x="1128.2" y="325" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1131.21" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, unsigned long, false&gt;::_S_equals (949,494,940 samples, 3.02%)</title><rect x="633.2" y="421" width="35.6" height="15.0" fill="rgb(219,67,16)" rx="2" ry="2" />
<text  x="636.17" y="431.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_ebo_helper&lt;1, std::hash&lt;unsigned int&gt;, true&gt;::_S_cget (10,101,010 samples, 0.03%)</title><rect x="277.6" y="581" width="0.4" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="280.61" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (20,202,020 samples, 0.06%)</title><rect x="543.3" y="437" width="0.8" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="546.33" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::end (20,202,020 samples, 0.06%)</title><rect x="462.6" y="453" width="0.8" height="15.0" fill="rgb(222,81,19)" rx="2" ry="2" />
<text  x="465.59" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, unsigned int, std::__detail::_Identity, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_h2 (10,101,010 samples, 0.03%)</title><rect x="870.5" y="485" width="0.3" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="873.46" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::Dag&gt; &gt;::deallocate (20,202,020 samples, 0.06%)</title><rect x="808.3" y="485" width="0.7" height="15.0" fill="rgb(245,188,45)" rx="2" ry="2" />
<text  x="811.29" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::DictUnit const*, std::allocator&lt;cppjieba::DictUnit const*&gt; &gt;::push_back (30,303,030 samples, 0.10%)</title><rect x="309.8" y="357" width="1.2" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="312.83" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_vma (10,101,010 samples, 0.03%)</title><rect x="1110.0" y="117" width="0.4" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1113.02" y="127.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;char*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::base (10,101,010 samples, 0.03%)</title><rect x="223.0" y="629" width="0.4" height="15.0" fill="rgb(251,214,51)" rx="2" ry="2" />
<text  x="226.03" y="639.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars&lt;__gnu_cxx::__normal_iterator&lt;char*, std::vector&lt;char, std::allocator&lt;char&gt; &gt; &gt; &gt; (30,303,030 samples, 0.10%)</title><rect x="286.7" y="645" width="1.1" height="15.0" fill="rgb(242,174,41)" rx="2" ry="2" />
<text  x="289.71" y="655.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, double&gt;, std::allocator&lt;std::pair&lt;unsigned int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="432.3" y="437" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="435.27" y="447.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="238.6" y="629" width="0.3" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="241.57" y="639.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace&lt;JiebaSplitCn, std::allocator&lt;JiebaSplitCn&gt;,  (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="533" width="5.7" height="15.0" fill="rgb(206,5,1)" rx="2" ry="2" />
<text  x="1129.70" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (10,101,010 samples, 0.03%)</title><rect x="1132.8" y="725" width="0.3" height="15.0" fill="rgb(253,223,53)" rx="2" ry="2" />
<text  x="1135.76" y="735.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::DictUnit*, cppjieba::DictUnit&gt; (30,303,030 samples, 0.10%)</title><rect x="1088.0" y="325" width="1.2" height="15.0" fill="rgb(233,129,31)" rx="2" ry="2" />
<text  x="1091.03" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::~vector (20,202,020 samples, 0.06%)</title><rect x="220.8" y="629" width="0.7" height="15.0" fill="rgb(234,133,32)" rx="2" ry="2" />
<text  x="223.75" y="639.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit const*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="1108.5" y="309" width="2.3" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1111.50" y="319.5" ></text>
</g>
<g >
<title>tinyxml2::XMLNode::ParseDeep (101,010,100 samples, 0.32%)</title><rect x="65.3" y="661" width="3.8" height="15.0" fill="rgb(225,96,23)" rx="2" ry="2" />
<text  x="68.34" y="671.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::LocalVector (10,101,010 samples, 0.03%)</title><rect x="336.0" y="181" width="0.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="338.99" y="191.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (10,101,010 samples, 0.03%)</title><rect x="1035.3" y="565" width="0.4" height="15.0" fill="rgb(213,41,9)" rx="2" ry="2" />
<text  x="1038.35" y="575.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1091.1" y="165" width="0.3" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1094.07" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1,151,515,140 samples, 3.66%)</title><rect x="132.1" y="549" width="43.2" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="135.06" y="559.5" >std:..</text>
</g>
<g >
<title>std::vector&lt;cppjieba::Word, std::allocator&lt;cppjieba::Word&gt; &gt;::size (10,101,010 samples, 0.03%)</title><rect x="220.4" y="629" width="0.4" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="223.38" y="639.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_rehash_aux (50,505,050 samples, 0.16%)</title><rect x="1123.3" y="309" width="1.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1126.29" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="623.3" y="405" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="626.31" y="415.5" ></text>
</g>
<g >
<title>__lock_text_start (10,101,010 samples, 0.03%)</title><rect x="1156.6" y="565" width="0.4" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="1159.64" y="575.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt; &gt;::_M_erase (20,202,020 samples, 0.06%)</title><rect x="978.9" y="501" width="0.7" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="981.87" y="511.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (50,505,050 samples, 0.16%)</title><rect x="1081.6" y="309" width="1.9" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="1084.59" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="305.3" y="181" width="0.4" height="15.0" fill="rgb(231,119,28)" rx="2" ry="2" />
<text  x="308.28" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (10,101,010 samples, 0.03%)</title><rect x="1056.2" y="293" width="0.4" height="15.0" fill="rgb(232,124,29)" rx="2" ry="2" />
<text  x="1059.19" y="303.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::reserve (10,101,010 samples, 0.03%)</title><rect x="350.8" y="325" width="0.4" height="15.0" fill="rgb(231,120,28)" rx="2" ry="2" />
<text  x="353.77" y="335.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::end (30,303,030 samples, 0.10%)</title><rect x="782.1" y="501" width="1.2" height="15.0" fill="rgb(206,7,1)" rx="2" ry="2" />
<text  x="785.14" y="511.5" ></text>
</g>
<g >
<title>__libc_start_main (28,646,464,360 samples, 91.10%)</title><rect x="58.1" y="757" width="1075.0" height="15.0" fill="rgb(236,142,34)" rx="2" ry="2" />
<text  x="61.14" y="767.5" >__libc_start_main</text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="1089.9" y="53" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1092.93" y="63.5" ></text>
</g>
<g >
<title>cppjieba::KeywordExtractor::~KeywordExtractor (40,404,040 samples, 0.13%)</title><rect x="1130.9" y="421" width="1.5" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1133.87" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (10,101,010 samples, 0.03%)</title><rect x="1129.4" y="325" width="0.3" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1132.35" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (10,101,010 samples, 0.03%)</title><rect x="296.9" y="373" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="299.95" y="383.5" ></text>
</g>
<g >
<title>do_anonymous_page (20,202,020 samples, 0.06%)</title><rect x="1078.9" y="101" width="0.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="1081.94" y="111.5" ></text>
</g>
<g >
<title>WordWeight::allWordsWeight (282,828,280 samples, 0.90%)</title><rect x="238.9" y="709" width="10.7" height="15.0" fill="rgb(217,59,14)" rx="2" ry="2" />
<text  x="241.95" y="719.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::max_size (40,404,040 samples, 0.13%)</title><rect x="705.2" y="453" width="1.5" height="15.0" fill="rgb(234,134,32)" rx="2" ry="2" />
<text  x="708.19" y="463.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;std::pair&lt;unsigned long, cppjieba::DictUnit const*&gt; &gt;::empty (121,212,120 samples, 0.39%)</title><rect x="740.8" y="517" width="4.6" height="15.0" fill="rgb(222,80,19)" rx="2" ry="2" />
<text  x="743.82" y="527.5" ></text>
</g>
<g >
<title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, cppjieba::KeywordExtractor::Word&gt; &gt;::operator* (20,202,020 samples, 0.06%)</title><rect x="939.1" y="597" width="0.7" height="15.0" fill="rgb(244,183,43)" rx="2" ry="2" />
<text  x="942.07" y="607.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, double, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, double&gt; &gt; &gt;::~unordered_map (40,404,040 samples, 0.13%)</title><rect x="1130.9" y="405" width="1.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1133.87" y="415.5" ></text>
</g>
<g >
<title>std::_Rb_tree&lt;std::pair&lt;int, double&gt;, std::pair&lt;int, double&gt;, std::_Identity&lt;std::pair&lt;int, double&gt; &gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt;::_M_erase (10,101,010 samples, 0.03%)</title><rect x="295.8" y="453" width="0.4" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="298.81" y="463.5" ></text>
</g>
<g >
<title>ksys_read (10,101,010 samples, 0.03%)</title><rect x="21.4" y="677" width="0.4" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="24.37" y="687.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;cppjieba::WordRange&gt; &gt;::allocate (30,303,030 samples, 0.10%)</title><rect x="837.1" y="517" width="1.1" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="840.10" y="527.5" ></text>
</g>
<g >
<title>std::forward&lt;cppjieba::DictUnit const*&gt; (10,101,010 samples, 0.03%)</title><rect x="522.5" y="485" width="0.4" height="15.0" fill="rgb(205,2,0)" rx="2" ry="2" />
<text  x="525.48" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::set&lt;std::pair&lt;int, double&gt;, std::less&lt;std::pair&lt;int, double&gt; &gt;, std::allocator&lt;std::pair&lt;int, double&gt; &gt; &gt; &gt;, true&gt; &gt; &gt;::_M_deallocate_nodes (30,303,030 samples, 0.10%)</title><rect x="295.4" y="661" width="1.2" height="15.0" fill="rgb(211,28,6)" rx="2" ry="2" />
<text  x="298.43" y="671.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::vector (60,606,060 samples, 0.19%)</title><rect x="845.8" y="549" width="2.3" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="848.82" y="559.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*&gt; (60,606,060 samples, 0.19%)</title><rect x="347.7" y="309" width="2.3" height="15.0" fill="rgb(218,59,14)" rx="2" ry="2" />
<text  x="350.74" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (50,505,050 samples, 0.16%)</title><rect x="1065.3" y="261" width="1.9" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="1068.29" y="271.5" ></text>
</g>
<g >
<title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_default_initialize (40,404,040 samples, 0.13%)</title><rect x="469.0" y="485" width="1.6" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="472.04" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::_S_max_size (10,101,010 samples, 0.03%)</title><rect x="706.3" y="437" width="0.4" height="15.0" fill="rgb(220,72,17)" rx="2" ry="2" />
<text  x="709.33" y="447.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (10,101,010 samples, 0.03%)</title><rect x="344.3" y="245" width="0.4" height="15.0" fill="rgb(212,35,8)" rx="2" ry="2" />
<text  x="347.33" y="255.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="1105.5" y="245" width="0.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="1108.47" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;unsigned long&gt;::max_size (20,202,020 samples, 0.06%)</title><rect x="483.8" y="405" width="0.8" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="486.82" y="415.5" ></text>
</g>
<g >
<title>cppjieba::HMMSegment::InternalCut (2,272,727,250 samples, 7.23%)</title><rect x="405.7" y="533" width="85.3" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="408.73" y="543.5" >cppjieba::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (10,101,010 samples, 0.03%)</title><rect x="1085.0" y="341" width="0.4" height="15.0" fill="rgb(214,43,10)" rx="2" ry="2" />
<text  x="1088.00" y="351.5" ></text>
</g>
<g >
<title>cppjieba::RuneStr::RuneStr (20,202,020 samples, 0.06%)</title><rect x="184.4" y="469" width="0.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="187.37" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Node_iterator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, false, false&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="1058.8" y="389" width="0.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1061.85" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;unsigned long&gt; &gt;::construct&lt;unsigned long, unsigned long const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="1036.9" y="597" width="0.3" height="15.0" fill="rgb(234,135,32)" rx="2" ry="2" />
<text  x="1039.86" y="607.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_ptr (10,101,010 samples, 0.03%)</title><rect x="1129.7" y="245" width="0.4" height="15.0" fill="rgb(243,177,42)" rx="2" ry="2" />
<text  x="1132.73" y="255.5" ></text>
</g>
<g >
<title>limonp::LocalVector&lt;unsigned int&gt;::capacity (10,101,010 samples, 0.03%)</title><rect x="1079.7" y="213" width="0.4" height="15.0" fill="rgb(251,213,51)" rx="2" ry="2" />
<text  x="1082.69" y="223.5" ></text>
</g>
<g >
<title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_check_init_len (20,202,020 samples, 0.06%)</title><rect x="477.8" y="485" width="0.7" height="15.0" fill="rgb(211,27,6)" rx="2" ry="2" />
<text  x="480.75" y="495.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::WordRange, std::allocator&lt;cppjieba::WordRange&gt; &gt;::_S_relocate (10,101,010 samples, 0.03%)</title><rect x="835.2" y="517" width="0.4" height="15.0" fill="rgb(250,209,50)" rx="2" ry="2" />
<text  x="838.20" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10,101,010 samples, 0.03%)</title><rect x="300.7" y="213" width="0.4" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="303.74" y="223.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (10,101,010 samples, 0.03%)</title><rect x="333.0" y="165" width="0.3" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="335.96" y="175.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (30,303,030 samples, 0.10%)</title><rect x="1021.3" y="549" width="1.2" height="15.0" fill="rgb(226,96,23)" rx="2" ry="2" />
<text  x="1024.32" y="559.5" ></text>
</g>
<g >
<title>std::distance&lt;char*&gt; (40,404,040 samples, 0.13%)</title><rect x="382.6" y="501" width="1.5" height="15.0" fill="rgb(246,190,45)" rx="2" ry="2" />
<text  x="385.61" y="511.5" ></text>
</g>
<g >
<title>do_page_fault (10,101,010 samples, 0.03%)</title><rect x="1086.9" y="229" width="0.4" height="15.0" fill="rgb(216,54,13)" rx="2" ry="2" />
<text  x="1089.90" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="518.7" y="469" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="521.69" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::__aligned_buffer&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;::_M_addr (10,101,010 samples, 0.03%)</title><rect x="622.2" y="373" width="0.4" height="15.0" fill="rgb(247,197,47)" rx="2" ry="2" />
<text  x="625.17" y="383.5" ></text>
</g>
<g >
<title>__handle_mm_fault (10,101,010 samples, 0.03%)</title><rect x="1124.0" y="165" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1127.04" y="175.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare (20,202,020 samples, 0.06%)</title><rect x="264.7" y="581" width="0.8" height="15.0" fill="rgb(243,176,42)" rx="2" ry="2" />
<text  x="267.73" y="591.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::~_Vector_base (10,101,010 samples, 0.03%)</title><rect x="314.8" y="341" width="0.3" height="15.0" fill="rgb(225,94,22)" rx="2" ry="2" />
<text  x="317.76" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (101,010,100 samples, 0.32%)</title><rect x="299.6" y="293" width="3.8" height="15.0" fill="rgb(219,64,15)" rx="2" ry="2" />
<text  x="302.60" y="303.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="470.9" y="453" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="473.93" y="463.5" ></text>
</g>
<g >
<title>std::__uninitialized_default_n_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (70,707,070 samples, 0.22%)</title><rect x="369.0" y="533" width="2.6" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="371.97" y="543.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, cppjieba::DictUnit*, cppjieba::DictUnit&gt; (60,606,060 samples, 0.19%)</title><rect x="1111.2" y="325" width="2.2" height="15.0" fill="rgb(254,228,54)" rx="2" ry="2" />
<text  x="1114.16" y="335.5" ></text>
</g>
<g >
<title>std::__unguarded_partition_pivot&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (30,303,030 samples, 0.10%)</title><rect x="335.6" y="261" width="1.1" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="338.61" y="271.5" ></text>
</g>
<g >
<title>std::__introsort_loop&lt;__gnu_cxx::__normal_iterator&lt;cppjieba::DictUnit*, std::vector&lt;cppjieba::DictUnit, std::allocator&lt;cppjieba::DictUnit&gt; &gt; &gt;, long, __gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (363,636,360 samples, 1.16%)</title><rect x="331.1" y="325" width="13.6" height="15.0" fill="rgb(222,78,18)" rx="2" ry="2" />
<text  x="334.06" y="335.5" ></text>
</g>
<g >
<title>cppjieba::DictUnit::DictUnit (30,303,030 samples, 0.10%)</title><rect x="345.5" y="277" width="1.1" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="348.46" y="287.5" ></text>
</g>
<g >
<title>tinyxml2::XMLElement::ParseDeep (80,808,080 samples, 0.26%)</title><rect x="65.7" y="549" width="3.1" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="68.72" y="559.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="237.4" y="581" width="0.8" height="15.0" fill="rgb(207,10,2)" rx="2" ry="2" />
<text  x="240.43" y="591.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.03%)</title><rect x="1109.6" y="133" width="0.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1112.64" y="143.5" ></text>
</g>
<g >
<title>std::vector&lt;cppjieba::Dag, std::allocator&lt;cppjieba::Dag&gt; &gt;::begin (60,606,060 samples, 0.19%)</title><rect x="784.4" y="501" width="2.3" height="15.0" fill="rgb(225,95,22)" rx="2" ry="2" />
<text  x="787.41" y="511.5" ></text>
</g>
<g >
<title>std::__relocate_a&lt;cppjieba::DictUnit const**, cppjieba::DictUnit const**, std::allocator&lt;cppjieba::DictUnit const*&gt; &gt; (20,202,020 samples, 0.06%)</title><rect x="310.2" y="277" width="0.8" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="313.21" y="287.5" ></text>
</g>
<g >
<title>std::unique_ptr&lt;cppjieba::Jieba, std::default_delete&lt;cppjieba::Jieba&gt; &gt;::~unique_ptr (151,515,150 samples, 0.48%)</title><rect x="1126.7" y="469" width="5.7" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1129.70" y="479.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (20,202,020 samples, 0.06%)</title><rect x="1088.4" y="261" width="0.8" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="1091.41" y="271.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;limonp::LocalVector&lt;unsigned int&gt;, std::allocator&lt;limonp::LocalVector&lt;unsigned int&gt; &gt; &gt;::_M_deallocate (10,101,010 samples, 0.03%)</title><rect x="314.8" y="325" width="0.3" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="317.76" y="335.5" ></text>
</g>
<g >
<title>std::min&lt;unsigned long&gt; (10,101,010 samples, 0.03%)</title><rect x="185.9" y="485" width="0.4" height="15.0" fill="rgb(235,140,33)" rx="2" ry="2" />
<text  x="188.88" y="495.5" ></text>
</g>
<g >
<title>cppjieba::MixSegment::Cut (12,151,515,030 samples, 38.64%)</title><rect x="397.4" y="565" width="456.0" height="15.0" fill="rgb(243,178,42)" rx="2" ry="2" />
<text  x="400.39" y="575.5" >cppjieba::MixSegment::Cut</text>
</g>
<g >
<title>WebPage::Parse (363,636,360 samples, 1.16%)</title><rect x="58.1" y="725" width="13.7" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="61.14" y="735.5" ></text>
</g>
<g >
<title>vfs_read (60,606,060 samples, 0.19%)</title><rect x="13.8" y="661" width="2.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="16.79" y="671.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;cppjieba::WordRange*, cppjieba::WordRange&gt; (10,101,010 samples, 0.03%)</title><rect x="828.4" y="517" width="0.4" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="831.38" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_value_base&lt;unsigned int&gt;::_M_valptr (10,101,010 samples, 0.03%)</title><rect x="881.1" y="421" width="0.3" height="15.0" fill="rgb(246,192,46)" rx="2" ry="2" />
<text  x="884.07" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;bool  (10,101,010 samples, 0.03%)</title><rect x="336.7" y="261" width="0.4" height="15.0" fill="rgb(230,117,28)" rx="2" ry="2" />
<text  x="339.75" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;unsigned int, std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt;, std::allocator&lt;std::pair&lt;unsigned int const, cppjieba::TrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;unsigned int&gt;, std::hash&lt;unsigned int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (10,101,010 samples, 0.03%)</title><rect x="304.5" y="261" width="0.4" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="307.53" y="271.5" ></text>
</g>
<g >
<title>std::get&lt;0ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="927.7" y="485" width="0.4" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="930.69" y="495.5" ></text>
</g>
<g >
<title>std::swap&lt;cppjieba::DictUnit&gt; (30,303,030 samples, 0.10%)</title><rect x="343.6" y="261" width="1.1" height="15.0" fill="rgb(221,75,17)" rx="2" ry="2" />
<text  x="346.57" y="271.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (10,101,010 samples, 0.03%)</title><rect x="206.7" y="485" width="0.4" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="209.73" y="495.5" ></text>
</g>
<g >
<title>do_user_addr_fault (20,202,020 samples, 0.06%)</title><rect x="1109.6" y="181" width="0.8" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="1112.64" y="191.5" ></text>
</g>
<g >
<title>cppjieba::DictTrie::Shrink (80,808,080 samples, 0.26%)</title><rect x="347.7" y="373" width="3.1" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="350.74" y="383.5" ></text>
</g>
<g >
<title>cppjieba::DecodeRunesInString (20,202,020 samples, 0.06%)</title><rect x="315.5" y="309" width="0.8" height="15.0" fill="rgb(205,4,1)" rx="2" ry="2" />
<text  x="318.52" y="319.5" ></text>
</g>
<g >
<title>std::hash&lt;unsigned int&gt;::operator (10,101,010 samples, 0.03%)</title><rect x="629.8" y="405" width="0.3" height="15.0" fill="rgb(209,21,5)" rx="2" ry="2" />
<text  x="632.76" y="415.5" ></text>
</g>
<g >
<title>get_page_from_freelist (10,101,010 samples, 0.03%)</title><rect x="1078.9" y="53" width="0.4" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="1081.94" y="63.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;unsigned long, std::allocator&lt;unsigned long&gt; &gt;::_M_allocate (20,202,020 samples, 0.06%)</title><rect x="1028.5" y="501" width="0.8" height="15.0" fill="rgb(224,87,20)" rx="2" ry="2" />
<text  x="1031.52" y="511.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (50,505,050 samples, 0.16%)</title><rect x="1000.5" y="501" width="1.9" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1003.47" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::__is_null_pointer&lt;char const&gt; (10,101,010 samples, 0.03%)</title><rect x="288.2" y="677" width="0.4" height="15.0" fill="rgb(217,57,13)" rx="2" ry="2" />
<text  x="291.23" y="687.5" ></text>
</g>
<g >
<title>std::pair&lt;unsigned int const, WordWeight::TF&gt;::pair&lt;unsigned int const&amp;&gt; (10,101,010 samples, 0.03%)</title><rect x="284.4" y="629" width="0.4" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="287.44" y="639.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (10,101,010 samples, 0.03%)</title><rect x="293.2" y="453" width="0.3" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="296.15" y="463.5" ></text>
</g>
</g>
</svg>
